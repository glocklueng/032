
4bit_layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  0000357a  0000360e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000357a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800510  00800510  00003a1e  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  00003a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000603  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bff  00000000  00000000  000041c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b5  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bf0  00000000  00000000  00008275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00009e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e6  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e17  00000000  00000000  0000a97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b795  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__ctors_end>
       4:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
       8:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
       c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      10:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      14:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      18:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      1c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      20:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      24:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      28:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      2c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      30:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_12>
      34:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      38:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_14>
      3c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      40:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      44:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      48:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__vector_18>
      4c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      50:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      54:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      58:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      5c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      60:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      64:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      68:	0c 94 95 12 	jmp	0x252a	; 0x252a <__vector_26>
      6c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      70:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      74:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      78:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      7c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      80:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      84:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>
      88:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__bad_interrupt>

0000008c <led30>:
      8c:	00 7f 03 1f 03 c7 03 f1 01 3f 03 4f 03 d3 03 f4     .........?.O....
      9c:	00 f7 00 df 03 37 03 cd 01 f3 01 cf 03 73 03 dc     .....7.......s..
      ac:	01 fc 00 fd 03 7c 03 3d                             .....|.=

000000b4 <black>:
      b4:	90 3b 3a 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .;:.B4.;..;6.B..
      c4:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
      d4:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
      e4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
      f4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     104:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     114:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     124:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     134:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     144:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     154:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     164:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     174:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     184:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     194:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     1a4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     1b4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     1c4:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     1d4:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     1e4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     1f4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     204:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     214:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     224:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     234:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     244:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     254:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     264:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     274:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     284:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     294:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     2a4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     2b4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     2c4:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     2d4:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     2e4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     2f4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     304:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     314:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     324:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     334:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     344:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     354:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     364:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     374:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     384:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     394:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     3a4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     3b4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     3c4:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     3d4:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     3e4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     3f4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     404:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     414:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     424:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     434:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     444:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     454:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     464:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 80 3d 00     ..66.?..=4.6..=.
     474:	90 3b 3a 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .;:.B4.;..;6.B..
     484:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     494:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     4a4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     4b4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     4c4:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     4d4:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     4e4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     4f4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     504:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     514:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     524:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     534:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     544:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     554:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     564:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     574:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     584:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     594:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     5a4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     5b4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     5c4:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     5d4:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     5e4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     5f4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     604:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     614:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     624:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     634:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     644:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     654:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     664:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     674:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     684:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     694:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     6a4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     6b4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     6c4:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     6d4:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     6e4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     6f4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     704:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     714:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     724:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     734:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     744:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     754:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     764:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     774:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     784:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     794:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     7a4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     7b4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     7c4:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     7d4:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     7e4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     7f4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     804:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     814:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     824:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     834:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     844:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     854:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     864:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     874:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     884:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     894:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     8a4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     8b4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     8c4:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     8d4:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     8e4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 80 3d 00     ..66.?..=4.6..=.
     8f4:	90 3b 3a 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .;:.B4.;..;6.B..
     904:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     914:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     924:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     934:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     944:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     954:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     964:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     974:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     984:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     994:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     9a4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     9b4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     9c4:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     9d4:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     9e4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     9f4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     a04:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     a14:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     a24:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     a34:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     a44:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     a54:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     a64:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     a74:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     a84:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     a94:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     aa4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     ab4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     ac4:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     ad4:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     ae4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     af4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     b04:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     b14:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     b24:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     b34:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     b44:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     b54:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     b64:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     b74:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     b84:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     b94:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     ba4:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     bb4:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     bc4:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     bd4:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     be4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     bf4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     c04:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     c14:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     c24:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     c34:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     c44:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     c54:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     c64:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     c74:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     c84:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     c94:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     ca4:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 3b 3a     ..66.?..=4.6..;:
     cb4:	80 3d 00 90 42 34 80 3b 00 90 3b 36 80 42 00 90     .=..B4.;..;6.B..
     cc4:	3f 34 80 3b 00 90 3b 38 80 3f 00 90 42 34 80 3b     ?4.;..;8.?..B4.;
     cd4:	00 90 3b 36 80 42 00 90 3f 34 80 3b 00 90 38 3a     ..;6.B..?4.;..8:
     ce4:	80 3f 00 90 3f 34 80 38 00 90 38 36 80 3f 00 90     .?..?4.8..86.?..
     cf4:	3d 34 80 38 00 90 38 38 80 3d 00 90 3f 34 80 38     =4.8..88.=..?4.8
     d04:	00 90 38 36 80 3f 00 90 3d 34 80 38 00 90 34 3a     ..86.?..=4.8..4:
     d14:	80 3d 00 90 3b 34 80 34 00 90 34 36 80 3b 00 90     .=..;4.4..46.;..
     d24:	3f 34 80 34 00 90 34 38 80 3f 00 90 3d 34 80 34     ?4.4..48.?..=4.4
     d34:	00 90 34 36 80 3d 00 90 40 34 80 34 00 90 36 3a     ..46.=..@4.4..6:
     d44:	80 40 00 90 3a 34 80 36 00 90 36 36 80 3a 00 90     .@..:4.6..66.:..
     d54:	3d 34 80 36 00 90 36 38 80 3d 00 90 3f 34 80 36     =4.6..68.=..?4.6
     d64:	00 90 36 36 80 3f 00 90 3d 34 80 36 00 90 36 46     ..66.?..=4.6..6F
     d74:	80 3d 00 80 36 00 90 36 42 80 36 00 90 36 40 80     .=..6..6B.6..6@.
     d84:	36 00 90 36 38 80 36 00 90 36 34 80 36 00 90 36     6..68.6..64.6..6
     d94:	42 80 36 00 90 3b 3a 90 42 34 80 3b 00 90 3b 36     B.6..;:.B4.;..;6
     da4:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
     db4:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
     dc4:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
     dd4:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
     de4:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
     df4:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
     e04:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
     e14:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
     e24:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
     e34:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
     e44:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
     e54:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
     e64:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
     e74:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
     e84:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
     e94:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
     ea4:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
     eb4:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
     ec4:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
     ed4:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
     ee4:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
     ef4:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
     f04:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
     f14:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
     f24:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
     f34:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
     f44:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
     f54:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
     f64:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
     f74:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
     f84:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
     f94:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
     fa4:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
     fb4:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
     fc4:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
     fd4:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
     fe4:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
     ff4:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
    1004:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
    1014:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
    1024:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
    1034:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
    1044:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
    1054:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
    1064:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
    1074:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
    1084:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
    1094:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
    10a4:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
    10b4:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
    10c4:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
    10d4:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
    10e4:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
    10f4:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
    1104:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
    1114:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
    1124:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
    1134:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
    1144:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
    1154:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
    1164:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
    1174:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
    1184:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
    1194:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
    11a4:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
    11b4:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
    11c4:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
    11d4:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
    11e4:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
    11f4:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
    1204:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
    1214:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
    1224:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
    1234:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
    1244:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
    1254:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
    1264:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
    1274:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
    1284:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
    1294:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
    12a4:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
    12b4:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
    12c4:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
    12d4:	00 90 3b 3a 80 3d 00 90 42 34 80 3b 00 90 3b 36     ..;:.=..B4.;..;6
    12e4:	80 42 00 90 3f 34 80 3b 00 90 3b 38 80 3f 00 90     .B..?4.;..;8.?..
    12f4:	42 34 80 3b 00 90 3b 36 80 42 00 90 3f 34 80 3b     B4.;..;6.B..?4.;
    1304:	00 90 38 3a 80 3f 00 90 3f 34 80 38 00 90 38 36     ..8:.?..?4.8..86
    1314:	80 3f 00 90 3d 34 80 38 00 90 38 38 80 3d 00 90     .?..=4.8..88.=..
    1324:	3f 34 80 38 00 90 38 36 80 3f 00 90 3d 34 80 38     ?4.8..86.?..=4.8
    1334:	00 90 34 3a 80 3d 00 90 3b 34 80 34 00 90 34 36     ..4:.=..;4.4..46
    1344:	80 3b 00 90 3f 34 80 34 00 90 34 38 80 3f 00 90     .;..?4.4..48.?..
    1354:	3d 34 80 34 00 90 34 36 80 3d 00 90 40 34 80 34     =4.4..46.=..@4.4
    1364:	00 90 36 3a 80 40 00 90 3a 34 80 36 00 90 36 36     ..6:.@..:4.6..66
    1374:	80 3a 00 90 3d 34 80 36 00 90 36 38 80 3d 00 90     .:..=4.6..68.=..
    1384:	3f 34 80 36 00 90 36 36 80 3f 00 90 3d 34 80 36     ?4.6..66.?..=4.6
    1394:	00 80 3d 00                                         ..=.

00001398 <daft>:
    1398:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
    13a8:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
    13b8:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
    13c8:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
    13d8:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
    13e8:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
    13f8:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
    1408:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
    1418:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
    1428:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
    1438:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
    1448:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
    1458:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
    1468:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
    1478:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
    1488:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
    1498:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
    14a8:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
    14b8:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
    14c8:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
    14d8:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
    14e8:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
    14f8:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
    1508:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
    1518:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    1528:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    1538:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    1548:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    1558:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    1568:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    1578:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1588:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1598:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    15a8:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    15b8:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    15c8:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    15d8:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    15e8:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    15f8:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1608:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1618:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    1628:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1638:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1648:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1658:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1668:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1678:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1688:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1698:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    16a8:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    16b8:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    16c8:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    16d8:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    16e8:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    16f8:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1708:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1718:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    1728:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1738:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1748:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    1758:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1768:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    1778:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1788:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1798:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    17a8:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    17b8:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    17c8:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    17d8:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    17e8:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    17f8:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1808:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1818:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    1828:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    1838:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    1848:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    1858:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    1868:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    1878:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1888:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1898:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    18a8:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    18b8:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    18c8:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    18d8:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    18e8:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    18f8:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1908:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1918:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    1928:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1938:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1948:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1958:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1968:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1978:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1988:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1998:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    19a8:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    19b8:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    19c8:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
    19d8:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
    19e8:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
    19f8:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1a08:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1a18:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    1a28:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
    1a38:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
    1a48:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
    1a58:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1a68:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    1a78:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1a88:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
    1a98:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
    1aa8:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
    1ab8:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1ac8:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1ad8:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1ae8:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
    1af8:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
    1b08:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
    1b18:	90 4a 7f 80 4a 00                                   .J..J.

00001b1e <__ctors_end>:
    1b1e:	11 24       	eor	r1, r1
    1b20:	1f be       	out	0x3f, r1	; 63
    1b22:	cf ef       	ldi	r28, 0xFF	; 255
    1b24:	d0 e1       	ldi	r29, 0x10	; 16
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	cd bf       	out	0x3d, r28	; 61

00001b2a <__do_copy_data>:
    1b2a:	15 e0       	ldi	r17, 0x05	; 5
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b1 e0       	ldi	r27, 0x01	; 1
    1b30:	ea e7       	ldi	r30, 0x7A	; 122
    1b32:	f5 e3       	ldi	r31, 0x35	; 53
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	0b bf       	out	0x3b, r16	; 59
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <__do_copy_data+0x14>
    1b3a:	07 90       	elpm	r0, Z+
    1b3c:	0d 92       	st	X+, r0
    1b3e:	a0 31       	cpi	r26, 0x10	; 16
    1b40:	b1 07       	cpc	r27, r17
    1b42:	d9 f7       	brne	.-10     	; 0x1b3a <__do_copy_data+0x10>

00001b44 <__do_clear_bss>:
    1b44:	15 e0       	ldi	r17, 0x05	; 5
    1b46:	a0 e1       	ldi	r26, 0x10	; 16
    1b48:	b5 e0       	ldi	r27, 0x05	; 5
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <.do_clear_bss_start>

00001b4c <.do_clear_bss_loop>:
    1b4c:	1d 92       	st	X+, r1

00001b4e <.do_clear_bss_start>:
    1b4e:	a4 37       	cpi	r26, 0x74	; 116
    1b50:	b1 07       	cpc	r27, r17
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <.do_clear_bss_loop>
    1b54:	0e 94 aa 13 	call	0x2754	; 0x2754 <main>
    1b58:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <_exit>

00001b5c <__bad_interrupt>:
    1b5c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001b60 <read_adc>:
};


// sample an ADC channel
void read_adc(knob_t *k)
{
    1b60:	fc 01       	movw	r30, r24

	uint16_t val = ADCL;
    1b62:	34 b1       	in	r19, 0x04	; 4
	val += (ADCH << 8);
    1b64:	25 b1       	in	r18, 0x05	; 5
	// accumulate value
	k->accum += val;
    1b66:	92 2f       	mov	r25, r18
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	83 0f       	add	r24, r19
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	9c 01       	movw	r18, r24
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	a4 81       	ldd	r26, Z+4	; 0x04
    1b7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b7c:	28 0f       	add	r18, r24
    1b7e:	39 1f       	adc	r19, r25
    1b80:	4a 1f       	adc	r20, r26
    1b82:	5b 1f       	adc	r21, r27
    1b84:	22 83       	std	Z+2, r18	; 0x02
    1b86:	33 83       	std	Z+3, r19	; 0x03
    1b88:	44 83       	std	Z+4, r20	; 0x04
    1b8a:	55 83       	std	Z+5, r21	; 0x05

	// take average when timer overflows
	if (adctimer == 0)
    1b8c:	80 91 10 05 	lds	r24, 0x0510
    1b90:	88 23       	and	r24, r24
    1b92:	69 f4       	brne	.+26     	; 0x1bae <read_adc+0x4e>
	{
		k->val = k->accum / NUM_ADC_SAMPLES;
    1b94:	85 e0       	ldi	r24, 0x05	; 5
    1b96:	56 95       	lsr	r21
    1b98:	47 95       	ror	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	8a 95       	dec	r24
    1ba0:	d1 f7       	brne	.-12     	; 0x1b96 <read_adc+0x36>
    1ba2:	31 83       	std	Z+1, r19	; 0x01
    1ba4:	20 83       	st	Z, r18
		k->accum = 0;
    1ba6:	12 82       	std	Z+2, r1	; 0x02
    1ba8:	13 82       	std	Z+3, r1	; 0x03
    1baa:	14 82       	std	Z+4, r1	; 0x04
    1bac:	15 82       	std	Z+5, r1	; 0x05
    1bae:	08 95       	ret

00001bb0 <init_interrupts>:
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
    1bb0:	80 e9       	ldi	r24, 0x90	; 144
    1bb2:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
    1bb4:	86 e0       	ldi	r24, 0x06	; 6
    1bb6:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    1bba:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    1bbe:	8f e1       	ldi	r24, 0x1F	; 31
    1bc0:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
    1bc2:	80 e8       	ldi	r24, 0x80	; 128
    1bc4:	8b b9       	out	0x0b, r24	; 11
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);

	/* Enable USART Receive interrupt */
	enable_USART_interrupts();

}
    1bc6:	08 95       	ret

00001bc8 <init_io>:

void init_io( void )
{
	//b0 - b3 of PORT C is output
	DDRC = 0xFF;
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	84 bb       	out	0x14, r24	; 20

	// for led
	DDRE = 0xff;
    1bcc:	82 b9       	out	0x02, r24	; 2

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
    1bce:	81 b3       	in	r24, 0x11	; 17
    1bd0:	8f 70       	andi	r24, 0x0F	; 15
    1bd2:	81 bb       	out	0x11, r24	; 17

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
    1bd4:	82 b3       	in	r24, 0x12	; 18
    1bd6:	80 6f       	ori	r24, 0xF0	; 240
    1bd8:	82 bb       	out	0x12, r24	; 18
}
    1bda:	08 95       	ret

00001bdc <init_timers>:
void init_timers( void )
{

	//8-bit timer 0 for decay, sweep, vibrato effects?
	//Enable Overflow interrupts for Timer 0
	TIMSK = 0b00000001;
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	97 bf       	out	0x37, r25	; 55

	//Normal counter operation
	TCCR1A = 0b00000000;
    1be0:	1f bc       	out	0x2f, r1	; 47

	//Divide by 1024 prescalar
	TCCR1B = 0b00000101;
    1be2:	85 e0       	ldi	r24, 0x05	; 5
    1be4:	8e bd       	out	0x2e, r24	; 46

	//Start terminal count at zero
	TCNT0 = 0x00;
    1be6:	12 be       	out	0x32, r1	; 50

	//16-bit timer 1 for main frequency generation
	TIMSK |= _BV(TOIE1) | _BV( OCIE1A ) ;
    1be8:	87 b7       	in	r24, 0x37	; 55
    1bea:	84 61       	ori	r24, 0x14	; 20
    1bec:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0b00100000; // Enable A and B compare interrupts

	TCCR1A = 0b00000001;
    1bee:	9f bd       	out	0x2f, r25	; 47

	// Prescaler 1, Fast PWM
	TCCR1B = 0b00010001;
    1bf0:	81 e1       	ldi	r24, 0x11	; 17
    1bf2:	8e bd       	out	0x2e, r24	; 46

	//Start count at zero now
	TCNT1H = 0;
    1bf4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
    1bf6:	1c bc       	out	0x2c, r1	; 44
}
    1bf8:	08 95       	ret

00001bfa <init_adc>:

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
    1bfa:	86 b1       	in	r24, 0x06	; 6
    1bfc:	87 60       	ori	r24, 0x07	; 7
    1bfe:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
    1c00:	37 9a       	sbi	0x06, 7	; 6
}
    1c02:	08 95       	ret

00001c04 <__vector_18>:
	return 0;
}
unsigned short daftIndex = 0;

/* USART Received byte interrupt (get MIDI byte)*/
ISR(USART0_RX_vect) {
    1c04:	1f 92       	push	r1
    1c06:	0f 92       	push	r0
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	0f 92       	push	r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
	byte_received = UDR0;
    1c12:	8c b1       	in	r24, 0x0c	; 12
    1c14:	80 93 58 05 	sts	0x0558, r24
	byte_ready = 1;
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	90 93 52 05 	sts	0x0552, r25
	PORTE ^=0x1;
    1c1e:	83 b1       	in	r24, 0x03	; 3
    1c20:	89 27       	eor	r24, r25
    1c22:	83 b9       	out	0x03, r24	; 3
}
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25

	PORTE ^=0x1;
    1c42:	83 b1       	in	r24, 0x03	; 3
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	89 27       	eor	r24, r25
    1c48:	83 b9       	out	0x03, r24	; 3

	if(note_on_gate == 1) {
    1c4a:	80 91 65 05 	lds	r24, 0x0565
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	01 f5       	brne	.+64     	; 0x1c92 <__vector_12+0x60>
		fivebit_counter ++;
    1c52:	80 91 66 05 	lds	r24, 0x0566
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	80 93 66 05 	sts	0x0566, r24

		//Reset counter if 'overflowed'
		if(fivebit_counter> 31) fivebit_counter = 0;
    1c5c:	80 32       	cpi	r24, 0x20	; 32
    1c5e:	10 f0       	brcs	.+4      	; 0x1c64 <__vector_12+0x32>
    1c60:	10 92 66 05 	sts	0x0566, r1

		//Each amplitude b0-3 is XNORed with b4 to create output
		unsigned char strobe = (fivebit_counter & 0b00010000) >> 4;
    1c64:	20 91 66 05 	lds	r18, 0x0566
		if(strobe == 1) {
    1c68:	82 2f       	mov	r24, r18
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	80 71       	andi	r24, 0x10	; 16
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	68 94       	set
    1c72:	13 f8       	bld	r1, 3
    1c74:	95 95       	asr	r25
    1c76:	87 95       	ror	r24
    1c78:	16 94       	lsr	r1
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <__vector_12+0x42>
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	19 f4       	brne	.+6      	; 0x1c86 <__vector_12+0x54>
			amplitude = ~(fivebit_counter ^ 0b00001111);
    1c80:	80 ef       	ldi	r24, 0xF0	; 240
    1c82:	28 27       	eor	r18, r24
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <__vector_12+0x56>
		} else {
			amplitude = ~(fivebit_counter ^ 0b00000000);
    1c86:	20 95       	com	r18
    1c88:	20 93 5d 05 	sts	0x055D, r18
		}
		//amplitude &= 0b11111111;
		//amplitude |= (strobe << 4);
		
		PORTC = amplitude;
    1c8c:	80 91 5d 05 	lds	r24, 0x055D
    1c90:	85 bb       	out	0x15, r24	; 21
	}

}
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <__vector_14>:

ISR(TIMER1_OVF_vect) 
{
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	0b b6       	in	r0, 0x3b	; 59
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31

	/* Sweep */
	if((sweep_enabled == 1) && (sweep_amount> 0) && (note_on_gate == 1)) {
    1cc8:	80 91 6d 05 	lds	r24, 0x056D
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_14+0x30>
    1cd0:	6c c0       	rjmp	.+216    	; 0x1daa <__vector_14+0x108>
    1cd2:	20 91 70 05 	lds	r18, 0x0570
    1cd6:	22 23       	and	r18, r18
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <__vector_14+0x3a>
    1cda:	67 c0       	rjmp	.+206    	; 0x1daa <__vector_14+0x108>
    1cdc:	80 91 65 05 	lds	r24, 0x0565
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <__vector_14+0x44>
    1ce4:	62 c0       	rjmp	.+196    	; 0x1daa <__vector_14+0x108>
		fake_16_timer ++;
    1ce6:	80 91 63 05 	lds	r24, 0x0563
    1cea:	90 91 64 05 	lds	r25, 0x0564
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	90 93 64 05 	sts	0x0564, r25
    1cf4:	80 93 63 05 	sts	0x0563, r24
		if(fake_16_timer >= 2) {
    1cf8:	02 97       	sbiw	r24, 0x02	; 2
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <__vector_14+0x5c>
    1cfc:	56 c0       	rjmp	.+172    	; 0x1daa <__vector_14+0x108>

			unsigned int sweep_mod = sweep_amount * note_table[playing_midi_note] / (8 * playing_midi_note);
    1cfe:	60 91 5c 05 	lds	r22, 0x055C
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	fb 01       	movw	r30, r22
    1d0a:	e0 50       	subi	r30, 0x00	; 0
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	01 90       	ld	r0, Z+
    1d10:	f0 81       	ld	r31, Z
    1d12:	e0 2d       	mov	r30, r0
    1d14:	82 2f       	mov	r24, r18
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	66 0f       	add	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	66 0f       	add	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	9c 01       	movw	r18, r24
    1d22:	e2 9f       	mul	r30, r18
    1d24:	c0 01       	movw	r24, r0
    1d26:	e3 9f       	mul	r30, r19
    1d28:	90 0d       	add	r25, r0
    1d2a:	f2 9f       	mul	r31, r18
    1d2c:	90 0d       	add	r25, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodhi4>
    1d34:	9b 01       	movw	r18, r22

			//Sweep down mode
			if(sweep_direction == SWEEP_DOWN) {
    1d36:	80 91 6b 05 	lds	r24, 0x056B
    1d3a:	40 91 56 05 	lds	r20, 0x0556
    1d3e:	50 91 57 05 	lds	r21, 0x0557
    1d42:	88 23       	and	r24, r24
    1d44:	59 f4       	brne	.+22     	; 0x1d5c <__vector_14+0xba>
				if(frequency < MAXIMUM_FREQ) {
    1d46:	8a e4       	ldi	r24, 0x4A	; 74
    1d48:	48 33       	cpi	r20, 0x38	; 56
    1d4a:	58 07       	cpc	r21, r24
    1d4c:	98 f4       	brcc	.+38     	; 0x1d74 <__vector_14+0xd2>
					frequency += sweep_mod;
    1d4e:	24 0f       	add	r18, r20
    1d50:	35 1f       	adc	r19, r21
    1d52:	30 93 57 05 	sts	0x0557, r19
    1d56:	20 93 56 05 	sts	0x0556, r18
    1d5a:	17 c0       	rjmp	.+46     	; 0x1d8a <__vector_14+0xe8>
				}
			}
			//Sweep up mode
			else
			{
				if(frequency> MINIMUM_FREQ+sweep_mod) {
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	cc 96       	adiw	r24, 0x3c	; 60
    1d60:	84 17       	cp	r24, r20
    1d62:	95 07       	cpc	r25, r21
    1d64:	38 f4       	brcc	.+14     	; 0x1d74 <__vector_14+0xd2>
					frequency -= sweep_mod;
    1d66:	46 1b       	sub	r20, r22
    1d68:	57 0b       	sbc	r21, r23
    1d6a:	50 93 57 05 	sts	0x0557, r21
    1d6e:	40 93 56 05 	sts	0x0556, r20
    1d72:	0b c0       	rjmp	.+22     	; 0x1d8a <__vector_14+0xe8>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
    1d74:	80 91 73 05 	lds	r24, 0x0573
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <__vector_14+0xe4>
						frequency = note_table[playing_midi_note];
    1d7c:	f0 93 57 05 	sts	0x0557, r31
    1d80:	e0 93 56 05 	sts	0x0556, r30
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <__vector_14+0xe8>
					}
					else {
						amplitude = 0;
    1d86:	10 92 5d 05 	sts	0x055D, r1
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1d8a:	80 91 61 05 	lds	r24, 0x0561
    1d8e:	90 91 62 05 	lds	r25, 0x0562
    1d92:	20 91 56 05 	lds	r18, 0x0556
    1d96:	30 91 57 05 	lds	r19, 0x0557
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	9b bd       	out	0x2b, r25	; 43
    1da0:	8a bd       	out	0x2a, r24	; 42
					}
				}
			}

			update_frequency(frequency);
			fake_16_timer = 0;
    1da2:	10 92 64 05 	sts	0x0564, r1
    1da6:	10 92 63 05 	sts	0x0563, r1
		}

	}

}
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0b be       	out	0x3b, r0	; 59
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <enable_USART_interrupts>:
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
    1dd0:	80 e8       	ldi	r24, 0x80	; 128
    1dd2:	8b b9       	out	0x0b, r24	; 11
}
    1dd4:	08 95       	ret

00001dd6 <disable_USART_interrupts>:

void disable_USART_interrupts() {
	UCSR0A = (0 << RXCIE0);
    1dd6:	1b b8       	out	0x0b, r1	; 11
}
    1dd8:	08 95       	ret

00001dda <note_on>:

void note_on() {
	num_bytes = 0;
    1dda:	10 92 53 05 	sts	0x0553, r1
	//Reset main timer1
	TCNT1 = 0;
    1dde:	1d bc       	out	0x2d, r1	; 45
    1de0:	1c bc       	out	0x2c, r1	; 44
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
    1de2:	e0 91 55 05 	lds	r30, 0x0555
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	e0 50       	subi	r30, 0x00	; 0
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	90 93 57 05 	sts	0x0557, r25
    1df8:	80 93 56 05 	sts	0x0556, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1dfc:	20 91 61 05 	lds	r18, 0x0561
    1e00:	30 91 62 05 	lds	r19, 0x0562
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	9b bd       	out	0x2b, r25	; 43
    1e0a:	8a bd       	out	0x2a, r24	; 42
	//Reset main timer1
	TCNT1 = 0;
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
	update_frequency(frequency);
	note_on_gate = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 65 05 	sts	0x0565, r24
}
    1e12:	08 95       	ret

00001e14 <note_off>:

void note_off() {
	num_bytes = 0;
    1e14:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
    1e18:	10 92 65 05 	sts	0x0565, r1
}
    1e1c:	08 95       	ret

00001e1e <process_cc>:

void process_cc() {
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
	num_ccs = 0;
    1e22:	10 92 59 05 	sts	0x0559, r1

	switch (current_midi_cc) {
    1e26:	80 91 6f 05 	lds	r24, 0x056F
    1e2a:	8c 30       	cpi	r24, 0x0C	; 12
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <process_cc+0x12>
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <process_cc+0x90>
    1e30:	8d 30       	cpi	r24, 0x0D	; 13
    1e32:	30 f4       	brcc	.+12     	; 0x1e40 <process_cc+0x22>
    1e34:	87 30       	cpi	r24, 0x07	; 7
    1e36:	69 f0       	breq	.+26     	; 0x1e52 <process_cc+0x34>
    1e38:	88 30       	cpi	r24, 0x08	; 8
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <process_cc+0x20>
    1e3c:	63 c0       	rjmp	.+198    	; 0x1f04 <process_cc+0xe6>
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <process_cc+0x3e>
    1e40:	8e 30       	cpi	r24, 0x0E	; 14
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <process_cc+0x28>
    1e44:	4a c0       	rjmp	.+148    	; 0x1eda <process_cc+0xbc>
    1e46:	8e 30       	cpi	r24, 0x0E	; 14
    1e48:	e8 f1       	brcs	.+122    	; 0x1ec4 <process_cc+0xa6>
    1e4a:	8f 30       	cpi	r24, 0x0F	; 15
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <process_cc+0x32>
    1e4e:	5a c0       	rjmp	.+180    	; 0x1f04 <process_cc+0xe6>
    1e50:	4f c0       	rjmp	.+158    	; 0x1ef0 <process_cc+0xd2>

	case MASTER_VOLUME_CC:
		master_volume = current_midi_ccdata;
    1e52:	80 91 68 05 	lds	r24, 0x0568
    1e56:	80 93 54 05 	sts	0x0554, r24
    1e5a:	54 c0       	rjmp	.+168    	; 0x1f04 <process_cc+0xe6>
		break;
	case FINE_PITCH_CC:
		fine_pitch_bend = ((note_table[playing_midi_note - 1]
    1e5c:	e0 91 5c 05 	lds	r30, 0x055C
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	df 01       	movw	r26, r30
    1e68:	a0 50       	subi	r26, 0x00	; 0
    1e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6c:	0d 91       	ld	r16, X+
    1e6e:	1c 91       	ld	r17, X
    1e70:	e2 50       	subi	r30, 0x02	; 2
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	20 81       	ld	r18, Z
    1e76:	31 81       	ldd	r19, Z+1	; 0x01
    1e78:	20 1b       	sub	r18, r16
    1e7a:	31 0b       	sbc	r19, r17
    1e7c:	80 91 68 05 	lds	r24, 0x0568
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	ac 01       	movw	r20, r24
    1e84:	24 9f       	mul	r18, r20
    1e86:	c0 01       	movw	r24, r0
    1e88:	25 9f       	mul	r18, r21
    1e8a:	90 0d       	add	r25, r0
    1e8c:	34 9f       	mul	r19, r20
    1e8e:	90 0d       	add	r25, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	60 ec       	ldi	r22, 0xC0	; 192
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodhi4>
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	70 93 62 05 	sts	0x0562, r23
    1ea0:	60 93 61 05 	sts	0x0561, r22
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1ea4:	80 0f       	add	r24, r16
    1ea6:	91 1f       	adc	r25, r17
    1ea8:	9b bd       	out	0x2b, r25	; 43
    1eaa:	8a bd       	out	0x2a, r24	; 42
    1eac:	2b c0       	rjmp	.+86     	; 0x1f04 <process_cc+0xe6>
		                               - note_table[playing_midi_note]) * current_midi_ccdata) / 192;
		update_frequency(note_table[playing_midi_note]);
		break;

	case SWEEP_ENABLED_CC:
		if (current_midi_ccdata > 64)
    1eae:	80 91 68 05 	lds	r24, 0x0568
    1eb2:	81 34       	cpi	r24, 0x41	; 65
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <process_cc+0xa0>
			sweep_enabled = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 93 6d 05 	sts	0x056D, r24
    1ebc:	23 c0       	rjmp	.+70     	; 0x1f04 <process_cc+0xe6>
		else
			sweep_enabled = 0;
    1ebe:	10 92 6d 05 	sts	0x056D, r1
    1ec2:	20 c0       	rjmp	.+64     	; 0x1f04 <process_cc+0xe6>
		break;

	case SWEEP_DIRECTION_CC:
		if (current_midi_ccdata > 64)
    1ec4:	80 91 68 05 	lds	r24, 0x0568
    1ec8:	81 34       	cpi	r24, 0x41	; 65
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <process_cc+0xb6>
			sweep_direction = SWEEP_UP;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	80 93 6b 05 	sts	0x056B, r24
    1ed2:	18 c0       	rjmp	.+48     	; 0x1f04 <process_cc+0xe6>
		else
			sweep_direction = SWEEP_DOWN;
    1ed4:	10 92 6b 05 	sts	0x056B, r1
    1ed8:	15 c0       	rjmp	.+42     	; 0x1f04 <process_cc+0xe6>
		break;

	case SWEEP_AMOUNT_CC:
		sweep_amount = current_midi_ccdata;
    1eda:	20 91 68 05 	lds	r18, 0x0568
    1ede:	20 93 70 05 	sts	0x0570, r18
		OCR1B = sweep_amount * 1024;
    1ee2:	92 2f       	mov	r25, r18
    1ee4:	99 0f       	add	r25, r25
    1ee6:	99 0f       	add	r25, r25
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	99 bd       	out	0x29, r25	; 41
    1eec:	88 bd       	out	0x28, r24	; 40
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <process_cc+0xe6>
		break;
	case SWEEP_LOOP_ENABLED_CC:
		if (current_midi_ccdata > 64)
    1ef0:	80 91 68 05 	lds	r24, 0x0568
    1ef4:	81 34       	cpi	r24, 0x41	; 65
    1ef6:	20 f0       	brcs	.+8      	; 0x1f00 <process_cc+0xe2>
			sweep_loop_enabled = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	80 93 73 05 	sts	0x0573, r24
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <process_cc+0xe6>
		else
			sweep_loop_enabled = 0;
    1f00:	10 92 73 05 	sts	0x0573, r1
		break;

	}
}
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <update_frequency>:

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1f0a:	20 91 61 05 	lds	r18, 0x0561
    1f0e:	30 91 62 05 	lds	r19, 0x0562
    1f12:	28 0f       	add	r18, r24
    1f14:	39 1f       	adc	r19, r25
    1f16:	3b bd       	out	0x2b, r19	; 43
    1f18:	2a bd       	out	0x2a, r18	; 42
}
    1f1a:	08 95       	ret

00001f1c <bend_pitch>:

void bend_pitch() {
	num_pbs = 0;
    1f1c:	10 92 6c 05 	sts	0x056C, r1

	if (current_midi_pb_h > 63) {
    1f20:	60 91 5b 05 	lds	r22, 0x055B
    1f24:	60 34       	cpi	r22, 0x40	; 64
    1f26:	80 f1       	brcs	.+96     	; 0x1f88 <bend_pitch+0x6c>
		distance
    1f28:	e0 91 5c 05 	lds	r30, 0x055C
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	df 01       	movw	r26, r30
    1f34:	a0 50       	subi	r26, 0x00	; 0
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	4d 91       	ld	r20, X+
    1f3a:	5c 91       	ld	r21, X
    1f3c:	ec 5f       	subi	r30, 0xFC	; 252
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	9a 01       	movw	r18, r20
    1f46:	28 1b       	sub	r18, r24
    1f48:	39 0b       	sbc	r19, r25
    1f4a:	86 2f       	mov	r24, r22
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	cf 97       	sbiw	r24, 0x3f	; 63
    1f50:	bc 01       	movw	r22, r24
    1f52:	26 9f       	mul	r18, r22
    1f54:	c0 01       	movw	r24, r0
    1f56:	27 9f       	mul	r18, r23
    1f58:	90 0d       	add	r25, r0
    1f5a:	36 9f       	mul	r19, r22
    1f5c:	90 0d       	add	r25, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	26 e0       	ldi	r18, 0x06	; 6
    1f62:	96 95       	lsr	r25
    1f64:	87 95       	ror	r24
    1f66:	2a 95       	dec	r18
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <bend_pitch+0x46>
    1f6a:	90 93 60 05 	sts	0x0560, r25
    1f6e:	80 93 5f 05 	sts	0x055F, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1f72:	20 91 61 05 	lds	r18, 0x0561
    1f76:	30 91 62 05 	lds	r19, 0x0562
    1f7a:	42 0f       	add	r20, r18
    1f7c:	53 1f       	adc	r21, r19
    1f7e:	48 1b       	sub	r20, r24
    1f80:	59 0b       	sbc	r21, r25
    1f82:	5b bd       	out	0x2b, r21	; 43
    1f84:	4a bd       	out	0x2a, r20	; 42
    1f86:	08 95       	ret
		distance
		= ((note_table[playing_midi_note]
		               - note_table[playing_midi_note + 2])
		               * (current_midi_pb_h - 63)) / 64;
		update_frequency(note_table[playing_midi_note] - distance);
	} else if ((current_midi_pb_h < 63) && (playing_midi_note > 1)) {
    1f88:	6f 33       	cpi	r22, 0x3F	; 63
    1f8a:	89 f1       	breq	.+98     	; 0x1fee <bend_pitch+0xd2>
    1f8c:	e0 91 5c 05 	lds	r30, 0x055C
    1f90:	e2 30       	cpi	r30, 0x02	; 2
    1f92:	68 f1       	brcs	.+90     	; 0x1fee <bend_pitch+0xd2>
		distance = ((note_table[playing_midi_note - 2]
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	df 01       	movw	r26, r30
    1f9c:	a0 50       	subi	r26, 0x00	; 0
    1f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa0:	4d 91       	ld	r20, X+
    1fa2:	5c 91       	ld	r21, X
    1fa4:	e4 50       	subi	r30, 0x04	; 4
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	20 81       	ld	r18, Z
    1faa:	31 81       	ldd	r19, Z+1	; 0x01
    1fac:	24 1b       	sub	r18, r20
    1fae:	35 0b       	sbc	r19, r21
    1fb0:	80 e4       	ldi	r24, 0x40	; 64
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	86 1b       	sub	r24, r22
    1fb6:	91 09       	sbc	r25, r1
    1fb8:	bc 01       	movw	r22, r24
    1fba:	26 9f       	mul	r18, r22
    1fbc:	c0 01       	movw	r24, r0
    1fbe:	27 9f       	mul	r18, r23
    1fc0:	90 0d       	add	r25, r0
    1fc2:	36 9f       	mul	r19, r22
    1fc4:	90 0d       	add	r25, r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	76 e0       	ldi	r23, 0x06	; 6
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	7a 95       	dec	r23
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <bend_pitch+0xae>
    1fd2:	90 93 60 05 	sts	0x0560, r25
    1fd6:	80 93 5f 05 	sts	0x055F, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
    1fda:	20 91 61 05 	lds	r18, 0x0561
    1fde:	30 91 62 05 	lds	r19, 0x0562
    1fe2:	42 0f       	add	r20, r18
    1fe4:	53 1f       	adc	r21, r19
    1fe6:	48 0f       	add	r20, r24
    1fe8:	59 1f       	adc	r21, r25
    1fea:	5b bd       	out	0x2b, r21	; 43
    1fec:	4a bd       	out	0x2a, r20	; 42
    1fee:	08 95       	ret

00001ff0 <check_byte_received>:

void check_byte_received() 
{
#if 1

	if( selfPlay ) {
    1ff0:	80 91 00 03 	lds	r24, 0x0300
    1ff4:	88 23       	and	r24, r24
    1ff6:	39 f1       	breq	.+78     	; 0x2046 <check_byte_received+0x56>
		if( counter == 0 ) {
    1ff8:	80 91 05 03 	lds	r24, 0x0305
    1ffc:	90 91 06 03 	lds	r25, 0x0306
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	e1 f4       	brne	.+56     	; 0x203c <check_byte_received+0x4c>
			byte_received = pgm_read_byte(&black[daftIndex]);
    2004:	80 91 47 05 	lds	r24, 0x0547
    2008:	90 91 48 05 	lds	r25, 0x0548
    200c:	fc 01       	movw	r30, r24
    200e:	ec 54       	subi	r30, 0x4C	; 76
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	e4 91       	lpm	r30, Z+
    2014:	e0 93 58 05 	sts	0x0558, r30
			daftIndex ++; 
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	90 93 48 05 	sts	0x0548, r25
    201e:	80 93 47 05 	sts	0x0547, r24
			if( daftIndex == sizeof( daft ) ) {
    2022:	86 58       	subi	r24, 0x86	; 134
    2024:	97 40       	sbci	r25, 0x07	; 7
    2026:	21 f4       	brne	.+8      	; 0x2030 <check_byte_received+0x40>
				daftIndex = 0;
    2028:	10 92 48 05 	sts	0x0548, r1
    202c:	10 92 47 05 	sts	0x0547, r1

			}
			byte_ready = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 52 05 	sts	0x0552, r24
			counter = 2000;
    2036:	80 ed       	ldi	r24, 0xD0	; 208
    2038:	97 e0       	ldi	r25, 0x07	; 7
    203a:	01 c0       	rjmp	.+2      	; 0x203e <check_byte_received+0x4e>

		} else {
			counter -- ;
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	90 93 06 03 	sts	0x0306, r25
    2042:	80 93 05 03 	sts	0x0305, r24
		}
		}
#endif

	//Is there a byte waiting in the buffer?
	if (byte_ready == 1) {
    2046:	30 91 52 05 	lds	r19, 0x0552
    204a:	31 30       	cpi	r19, 0x01	; 1
    204c:	09 f0       	breq	.+2      	; 0x2050 <check_byte_received+0x60>
    204e:	85 c0       	rjmp	.+266    	; 0x215a <check_byte_received+0x16a>
		//Is this a stupid byte like Clock or Active sensing?
		if (byte_received < 0xF0) {
    2050:	20 91 58 05 	lds	r18, 0x0558
    2054:	20 3f       	cpi	r18, 0xF0	; 240
    2056:	08 f0       	brcs	.+2      	; 0x205a <check_byte_received+0x6a>
    2058:	7e c0       	rjmp	.+252    	; 0x2156 <check_byte_received+0x166>
			//Is this a status byte? ...
			if (byte_received >= 0x80) {
    205a:	27 ff       	sbrs	r18, 7
    205c:	20 c0       	rjmp	.+64     	; 0x209e <check_byte_received+0xae>
				unsigned char temp_midi_channel = byte_received & 0x0F;
				//Is this for one of our channels?
				if ( 1 ) // (temp_midi_channel == midi_channel) 
				{
					current_midi_channel = temp_midi_channel;
    205e:	82 2f       	mov	r24, r18
    2060:	8f 70       	andi	r24, 0x0F	; 15
    2062:	80 93 5e 05 	sts	0x055E, r24

					//What kind of status byte is this?
					unsigned char status_type = (byte_received & 0xF0);
					switch (status_type) {
    2066:	82 2f       	mov	r24, r18
    2068:	80 7f       	andi	r24, 0xF0	; 240
    206a:	80 39       	cpi	r24, 0x90	; 144
    206c:	51 f0       	breq	.+20     	; 0x2082 <check_byte_received+0x92>
    206e:	81 39       	cpi	r24, 0x91	; 145
    2070:	18 f4       	brcc	.+6      	; 0x2078 <check_byte_received+0x88>
    2072:	80 38       	cpi	r24, 0x80	; 128
    2074:	89 f4       	brne	.+34     	; 0x2098 <check_byte_received+0xa8>
    2076:	08 c0       	rjmp	.+16     	; 0x2088 <check_byte_received+0x98>
    2078:	80 3b       	cpi	r24, 0xB0	; 176
    207a:	41 f0       	breq	.+16     	; 0x208c <check_byte_received+0x9c>
    207c:	80 3e       	cpi	r24, 0xE0	; 224
    207e:	61 f4       	brne	.+24     	; 0x2098 <check_byte_received+0xa8>
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <check_byte_received+0xa0>
					case (MIDI_STATUS_TYPE_NOTEON):
						current_midi_status = MIDI_STATUS_NOTEON;
    2082:	30 93 67 05 	sts	0x0567, r19
    2086:	67 c0       	rjmp	.+206    	; 0x2156 <check_byte_received+0x166>
					break;
					case (MIDI_STATUS_TYPE_NOTEOFF):
						current_midi_status = MIDI_STATUS_NOTEOFF;
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_CC):
						current_midi_status = MIDI_STATUS_CC;
    208c:	83 e0       	ldi	r24, 0x03	; 3
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_PB):
						current_midi_status = MIDI_STATUS_PB;
    2090:	84 e0       	ldi	r24, 0x04	; 4
    2092:	80 93 67 05 	sts	0x0567, r24
    2096:	5f c0       	rjmp	.+190    	; 0x2156 <check_byte_received+0x166>
					break;
					default:
						current_midi_status = MIDI_STATUS_NONE;
    2098:	10 92 67 05 	sts	0x0567, r1
    209c:	5c c0       	rjmp	.+184    	; 0x2156 <check_byte_received+0x166>
					current_midi_status = 0;
				}
			}
			// ... or is it a data byte?
			else {
				switch (current_midi_status) {
    209e:	90 91 67 05 	lds	r25, 0x0567
    20a2:	92 30       	cpi	r25, 0x02	; 2
    20a4:	29 f1       	breq	.+74     	; 0x20f0 <check_byte_received+0x100>
    20a6:	93 30       	cpi	r25, 0x03	; 3
    20a8:	20 f4       	brcc	.+8      	; 0x20b2 <check_byte_received+0xc2>
    20aa:	91 30       	cpi	r25, 0x01	; 1
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <check_byte_received+0xc0>
    20ae:	53 c0       	rjmp	.+166    	; 0x2156 <check_byte_received+0x166>
    20b0:	06 c0       	rjmp	.+12     	; 0x20be <check_byte_received+0xce>
    20b2:	93 30       	cpi	r25, 0x03	; 3
    20b4:	a1 f1       	breq	.+104    	; 0x211e <check_byte_received+0x12e>
    20b6:	94 30       	cpi	r25, 0x04	; 4
    20b8:	09 f0       	breq	.+2      	; 0x20bc <check_byte_received+0xcc>
    20ba:	4d c0       	rjmp	.+154    	; 0x2156 <check_byte_received+0x166>
    20bc:	3e c0       	rjmp	.+124    	; 0x213a <check_byte_received+0x14a>
				case (MIDI_STATUS_NOTEON):

					//Is this a velocity byte?
					if (num_bytes > 0) {
    20be:	80 91 53 05 	lds	r24, 0x0553
    20c2:	88 23       	and	r24, r24
    20c4:	81 f0       	breq	.+32     	; 0x20e6 <check_byte_received+0xf6>
    20c6:	90 91 55 05 	lds	r25, 0x0555

						//If the velocity sent was 0, then this is really a NOTE-OFF
						if (byte_received > 0) {
    20ca:	22 23       	and	r18, r18
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <check_byte_received+0xe8>
							//current_midi_velocity = byte_received;
							playing_midi_note = current_midi_note;
    20ce:	90 93 5c 05 	sts	0x055C, r25
							note_on();
    20d2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <note_on>
    20d6:	10 c0       	rjmp	.+32     	; 0x20f8 <check_byte_received+0x108>
						} else {
							if (current_midi_note == playing_midi_note) {
    20d8:	80 91 5c 05 	lds	r24, 0x055C
    20dc:	98 17       	cp	r25, r24
    20de:	61 f4       	brne	.+24     	; 0x20f8 <check_byte_received+0x108>
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
	note_on_gate = 0;
    20e0:	10 92 65 05 	sts	0x0565, r1
    20e4:	09 c0       	rjmp	.+18     	; 0x20f8 <check_byte_received+0x108>
						num_bytes = 0;
					}

				//Or is this a note data byte?
					else {
						current_midi_note = byte_received;
    20e6:	20 93 55 05 	sts	0x0555, r18
						num_bytes++;
    20ea:	90 93 53 05 	sts	0x0553, r25
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <check_byte_received+0x128>

				break;

				case (MIDI_STATUS_NOTEOFF):
					//Is this a velocity byte?
					if (num_bytes > 0) {
    20f0:	80 91 53 05 	lds	r24, 0x0553
    20f4:	88 23       	and	r24, r24
    20f6:	19 f0       	breq	.+6      	; 0x20fe <check_byte_received+0x10e>
						//Who cares? We aren't implementing aftertouch
						num_bytes = 0;
    20f8:	10 92 53 05 	sts	0x0553, r1
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <check_byte_received+0x128>
					} else {
						/* This is a note byte. Let's see if it's the same as the currently
						 * playing note. Only then will we note_off()
						 */

						if (byte_received == playing_midi_note) {
    20fe:	80 91 5c 05 	lds	r24, 0x055C
    2102:	28 17       	cp	r18, r24
    2104:	21 f4       	brne	.+8      	; 0x210e <check_byte_received+0x11e>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
    2106:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
    210a:	10 92 65 05 	sts	0x0565, r1
						 */

						if (byte_received == playing_midi_note) {
							note_off();
						}
						num_bytes++;
    210e:	80 91 53 05 	lds	r24, 0x0553
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	80 93 53 05 	sts	0x0553, r24
	}

}

void clear_byte_received() {
	byte_received = 0;
    2118:	10 92 58 05 	sts	0x0558, r1
    211c:	1c c0       	rjmp	.+56     	; 0x2156 <check_byte_received+0x166>

				break;

				case (MIDI_STATUS_CC):
					//Did we already get a CC Status byte?
					if (num_ccs > 0) {
    211e:	80 91 59 05 	lds	r24, 0x0559
    2122:	88 23       	and	r24, r24
    2124:	29 f0       	breq	.+10     	; 0x2130 <check_byte_received+0x140>
						current_midi_ccdata = byte_received;
    2126:	20 93 68 05 	sts	0x0568, r18
						process_cc();
    212a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <process_cc>
    212e:	13 c0       	rjmp	.+38     	; 0x2156 <check_byte_received+0x166>
					}
				//Or is this a new CC status byte?
					else {
						current_midi_cc = byte_received;
    2130:	20 93 6f 05 	sts	0x056F, r18
						num_ccs++;
    2134:	30 93 59 05 	sts	0x0559, r19
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <check_byte_received+0x166>
					}
				break;

				case (MIDI_STATUS_PB):
					//How many PB related bytes have we gotten?
					switch (num_pbs) {
    213a:	80 91 6c 05 	lds	r24, 0x056C
    213e:	88 23       	and	r24, r24
    2140:	19 f0       	breq	.+6      	; 0x2148 <check_byte_received+0x158>
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	41 f4       	brne	.+16     	; 0x2156 <check_byte_received+0x166>
    2146:	03 c0       	rjmp	.+6      	; 0x214e <check_byte_received+0x15e>
					case (0):
						//First byte is 7 LSB
						//Don't care about it for now
						//current_midi_pb_l = byte_received;

						num_pbs++;
    2148:	30 93 6c 05 	sts	0x056C, r19
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <check_byte_received+0x166>
					break;
					case (1):
						//Second byte has 7 MSB
						current_midi_pb_h = byte_received;
    214e:	20 93 5b 05 	sts	0x055B, r18
						//Combine to get 14 bytes 0 - 13
						//current_midi_pb = ((current_midi_pb_h << 7)|(current_midi_pb_l << 0));
						bend_pitch();
    2152:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <bend_pitch>
				break;
				}
			}

		}
		byte_ready = 0;
    2156:	10 92 52 05 	sts	0x0552, r1
    215a:	08 95       	ret

0000215c <clear_byte_received>:
	}

}

void clear_byte_received() {
	byte_received = 0;
    215c:	10 92 58 05 	sts	0x0558, r1
}
    2160:	08 95       	ret

00002162 <check_channel_set>:

void check_channel_set() {
	midi_channel = 0;
    2162:	10 92 6e 05 	sts	0x056E, r1
	//Get 4-bit (0-16) MIDI CHannel from PORTD b4-b7)
	//midi_channel |= (~PIND & 0xF0) >> 4;

}
    2166:	08 95       	ret

00002168 <pgm_read_byte1>:
#define OCTAVE_OFFSET (0)
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
    2168:	fc 01       	movw	r30, r24
	return *p;
}
    216a:	80 81       	ld	r24, Z
    216c:	08 95       	ret

0000216e <play>:

void play(const unsigned char *p)
{
    216e:	2f 92       	push	r2
    2170:	3f 92       	push	r3
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <play+0x26>
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	01 c0       	rjmp	.+2      	; 0x219e <play+0x30>
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {

	p++;					// ignore name
    219c:	cf 01       	movw	r24, r30
  
	
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {
    219e:	fc 01       	movw	r30, r24
    21a0:	81 91       	ld	r24, Z+
    21a2:	8a 33       	cpi	r24, 0x3A	; 58
    21a4:	d9 f7       	brne	.-10     	; 0x219c <play+0x2e>

	p++;					// ignore name
  }
  	p++;                     // skip ':'
    21a6:	fb 83       	std	Y+3, r31	; 0x03
    21a8:	ea 83       	std	Y+2, r30	; 0x02
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
    21aa:	80 81       	ld	r24, Z
    21ac:	84 36       	cpi	r24, 0x64	; 100
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <play+0x4a>
    21b0:	04 e0       	ldi	r16, 0x04	; 4
    21b2:	e0 2e       	mov	r14, r16
    21b4:	f1 2c       	mov	r15, r1
    21b6:	26 c0       	rjmp	.+76     	; 0x2204 <play+0x96>
    p++; p++;              // skip "d="
    21b8:	32 96       	adiw	r30, 0x02	; 2
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	11 c0       	rjmp	.+34     	; 0x21e2 <play+0x74>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + ((*p++) - '0');
    21c0:	c9 01       	movw	r24, r18
    21c2:	13 e0       	ldi	r17, 0x03	; 3
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	1a 95       	dec	r17
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <play+0x56>
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	82 0f       	add	r24, r18
    21d2:	93 1f       	adc	r25, r19
    21d4:	24 2f       	mov	r18, r20
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	20 53       	subi	r18, 0x30	; 48
    21da:	30 40       	sbci	r19, 0x00	; 0
    21dc:	28 0f       	add	r18, r24
    21de:	39 1f       	adc	r19, r25
    21e0:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    21e2:	40 81       	ld	r20, Z
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
    p++; p++;              // skip "d="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
    21e4:	40 33       	cpi	r20, 0x30	; 48
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <play+0x7e>
    21e8:	4a 33       	cpi	r20, 0x3A	; 58
    21ea:	50 f3       	brcs	.-44     	; 0x21c0 <play+0x52>
      num = (num * 10) + ((*p++) - '0');
    }
    if(num > 0) default_dur = num;
    21ec:	21 15       	cp	r18, r1
    21ee:	31 05       	cpc	r19, r1
    21f0:	21 f4       	brne	.+8      	; 0x21fa <play+0x8c>
    21f2:	a4 e0       	ldi	r26, 0x04	; 4
    21f4:	ea 2e       	mov	r14, r26
    21f6:	f1 2c       	mov	r15, r1
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <play+0x8e>
    21fa:	79 01       	movw	r14, r18
    p++;                   // skip comma
    21fc:	cf 01       	movw	r24, r30
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	9b 83       	std	Y+3, r25	; 0x03
    2202:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get default octave
  if(pgm_read_byte1(p) == 'o') {
    2204:	ea 81       	ldd	r30, Y+2	; 0x02
    2206:	fb 81       	ldd	r31, Y+3	; 0x03
    2208:	80 81       	ld	r24, Z
    220a:	8f 36       	cpi	r24, 0x6F	; 111
    220c:	19 f0       	breq	.+6      	; 0x2214 <play+0xa6>
    220e:	06 e0       	ldi	r16, 0x06	; 6
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	16 c0       	rjmp	.+44     	; 0x2240 <play+0xd2>
    p++; p++;              // skip "o="
    2214:	ea 81       	ldd	r30, Y+2	; 0x02
    2216:	fb 81       	ldd	r31, Y+3	; 0x03
    2218:	31 96       	adiw	r30, 0x01	; 1
    221a:	af 01       	movw	r20, r30
    221c:	4f 5f       	subi	r20, 0xFF	; 255
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    num = pgm_read_byte1(p) - '0';p++;
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 01       	movw	r18, r24
    2226:	20 53       	subi	r18, 0x30	; 48
    2228:	30 40       	sbci	r19, 0x00	; 0
    if(num >= 3 && num <=7) default_oct = num;
    222a:	c3 97       	sbiw	r24, 0x33	; 51
    222c:	05 97       	sbiw	r24, 0x05	; 5
    222e:	10 f4       	brcc	.+4      	; 0x2234 <play+0xc6>
    2230:	89 01       	movw	r16, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <play+0xca>
    2234:	06 e0       	ldi	r16, 0x06	; 6
    2236:	10 e0       	ldi	r17, 0x00	; 0
    p++;                   // skip comma
    2238:	ca 01       	movw	r24, r20
    223a:	02 96       	adiw	r24, 0x02	; 2
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get BPM
  if(pgm_read_byte1(p) == 'b') {
    2240:	ea 81       	ldd	r30, Y+2	; 0x02
    2242:	fb 81       	ldd	r31, Y+3	; 0x03
    2244:	80 81       	ld	r24, Z
    2246:	82 36       	cpi	r24, 0x62	; 98
    2248:	19 f0       	breq	.+6      	; 0x2250 <play+0xe2>
    224a:	2f e3       	ldi	r18, 0x3F	; 63
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	20 c0       	rjmp	.+64     	; 0x2290 <play+0x122>
    p++; p++;              // skip "b="
    2250:	ea 81       	ldd	r30, Y+2	; 0x02
    2252:	fb 81       	ldd	r31, Y+3	; 0x03
    2254:	32 96       	adiw	r30, 0x02	; 2
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	11 c0       	rjmp	.+34     	; 0x227e <play+0x110>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
    225c:	c9 01       	movw	r24, r18
    225e:	73 e0       	ldi	r23, 0x03	; 3
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	7a 95       	dec	r23
    2266:	e1 f7       	brne	.-8      	; 0x2260 <play+0xf2>
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	24 2f       	mov	r18, r20
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	20 53       	subi	r18, 0x30	; 48
    2276:	30 40       	sbci	r19, 0x00	; 0
    2278:	28 0f       	add	r18, r24
    227a:	39 1f       	adc	r19, r25
    227c:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    227e:	40 81       	ld	r20, Z

  // get BPM
  if(pgm_read_byte1(p) == 'b') {
    p++; p++;              // skip "b="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
    2280:	40 33       	cpi	r20, 0x30	; 48
    2282:	10 f0       	brcs	.+4      	; 0x2288 <play+0x11a>
    2284:	4a 33       	cpi	r20, 0x3A	; 58
    2286:	50 f3       	brcs	.-44     	; 0x225c <play+0xee>
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
    }
	
    bpm = num;
    p++;                   // skip colon
    2288:	cf 01       	movw	r24, r30
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	8a 83       	std	Y+2, r24	; 0x02
  }

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	60 e6       	ldi	r22, 0x60	; 96
    2296:	7a ee       	ldi	r23, 0xEA	; 234
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__divmodsi4>
    22a0:	39 01       	movw	r6, r18
    22a2:	4a 01       	movw	r8, r20
    22a4:	52 e0       	ldi	r21, 0x02	; 2
    22a6:	66 0c       	add	r6, r6
    22a8:	77 1c       	adc	r7, r7
    22aa:	88 1c       	adc	r8, r8
    22ac:	99 1c       	adc	r9, r9
    22ae:	5a 95       	dec	r21
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <play+0x138>
    }
    
    if( num ) { 
	  duration = wholenote / num;
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    22b2:	17 01       	movw	r2, r14
    22b4:	44 24       	eor	r4, r4
    22b6:	55 24       	eor	r5, r5
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
      scale = pgm_read_byte1(p) - '0';
      p++;
    } else {
      scale = default_oct;
    22b8:	09 83       	std	Y+1, r16	; 0x01
    22ba:	19 c1       	rjmp	.+562    	; 0x24ee <play+0x380>
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
      num = (num * 10) + ((*p++) - '0');
    22bc:	c9 01       	movw	r24, r18
    22be:	43 e0       	ldi	r20, 0x03	; 3
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	4a 95       	dec	r20
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <play+0x152>
    22c8:	22 0f       	add	r18, r18
    22ca:	33 1f       	adc	r19, r19
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	21 2f       	mov	r18, r17
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	20 53       	subi	r18, 0x30	; 48
    22d6:	30 40       	sbci	r19, 0x00	; 0
    22d8:	28 0f       	add	r18, r24
    22da:	39 1f       	adc	r19, r25
    22dc:	ea 81       	ldd	r30, Y+2	; 0x02
    22de:	fb 81       	ldd	r31, Y+3	; 0x03
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	fb 83       	std	Y+3, r31	; 0x03
    22e4:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    22e6:	ea 81       	ldd	r30, Y+2	; 0x02
    22e8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ea:	10 81       	ld	r17, Z
  while( pgm_read_byte1(p) ) {
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
    22ec:	10 33       	cpi	r17, 0x30	; 48
    22ee:	10 f0       	brcs	.+4      	; 0x22f4 <play+0x186>
    22f0:	1a 33       	cpi	r17, 0x3A	; 58
    22f2:	20 f3       	brcs	.-56     	; 0x22bc <play+0x14e>
      num = (num * 10) + ((*p++) - '0');
    }
    
    if( num ) { 
    22f4:	21 15       	cp	r18, r1
    22f6:	31 05       	cpc	r19, r1
    22f8:	29 f0       	breq	.+10     	; 0x2304 <play+0x196>
	  duration = wholenote / num;
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	c4 01       	movw	r24, r8
    2300:	b3 01       	movw	r22, r6
    2302:	04 c0       	rjmp	.+8      	; 0x230c <play+0x19e>
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    2304:	c4 01       	movw	r24, r8
    2306:	b3 01       	movw	r22, r6
    2308:	a2 01       	movw	r20, r4
    230a:	91 01       	movw	r18, r2
    230c:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodsi4>
    2310:	c9 01       	movw	r24, r18
    2312:	da 01       	movw	r26, r20
    2314:	ac 01       	movw	r20, r24
    2316:	bd 01       	movw	r22, r26
	}
	
    // get the note
    switch( pgm_read_byte1(p) ) {
    2318:	14 36       	cpi	r17, 0x64	; 100
    231a:	81 f0       	breq	.+32     	; 0x233c <play+0x1ce>
    231c:	15 36       	cpi	r17, 0x65	; 101
    231e:	38 f4       	brcc	.+14     	; 0x232e <play+0x1c0>
    2320:	12 36       	cpi	r17, 0x62	; 98
    2322:	61 f0       	breq	.+24     	; 0x233c <play+0x1ce>
    2324:	13 36       	cpi	r17, 0x63	; 99
    2326:	60 f4       	brcc	.+24     	; 0x2340 <play+0x1d2>
    2328:	11 36       	cpi	r17, 0x61	; 97
    232a:	a1 f4       	brne	.+40     	; 0x2354 <play+0x1e6>
    232c:	11 c0       	rjmp	.+34     	; 0x2350 <play+0x1e2>
    232e:	16 36       	cpi	r17, 0x66	; 102
    2330:	59 f0       	breq	.+22     	; 0x2348 <play+0x1da>
    2332:	16 36       	cpi	r17, 0x66	; 102
    2334:	38 f0       	brcs	.+14     	; 0x2344 <play+0x1d6>
    2336:	17 36       	cpi	r17, 0x67	; 103
    2338:	69 f4       	brne	.+26     	; 0x2354 <play+0x1e6>
    233a:	08 c0       	rjmp	.+16     	; 0x234c <play+0x1de>
    233c:	23 e0       	ldi	r18, 0x03	; 3
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <play+0x1e8>
    2340:	21 e0       	ldi	r18, 0x01	; 1
    2342:	09 c0       	rjmp	.+18     	; 0x2356 <play+0x1e8>
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <play+0x1e8>
      case 'd':
        note = 3;
        break;
      case 'e':
        note = 10;
        break;
    2348:	29 e0       	ldi	r18, 0x09	; 9
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <play+0x1e8>
      case 'f':
        note = 9;
        break;
    234c:	27 e0       	ldi	r18, 0x07	; 7
    234e:	03 c0       	rjmp	.+6      	; 0x2356 <play+0x1e8>
      case 'g':
        note = 7;
        break;
    2350:	25 e0       	ldi	r18, 0x05	; 5
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <play+0x1e8>
      case 'a':
        note = 5;
        break;
    2354:	20 e0       	ldi	r18, 0x00	; 0
      default:
        note = 0;
    }


    p++;
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02

    // get optional '#' sharp
    if(pgm_read_byte1(p) == '#') {
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	83 32       	cpi	r24, 0x23	; 35
    2366:	21 f4       	brne	.+8      	; 0x2370 <play+0x202>
      note++;
    2368:	2f 5f       	subi	r18, 0xFF	; 255
      p++;
    236a:	31 96       	adiw	r30, 0x01	; 1
    236c:	fb 83       	std	Y+3, r31	; 0x03
    236e:	ea 83       	std	Y+2, r30	; 0x02
    }

    // get optional '.' dotted note
    if(pgm_read_byte1(p) == '.') {
    2370:	ea 81       	ldd	r30, Y+2	; 0x02
    2372:	fb 81       	ldd	r31, Y+3	; 0x03
    2374:	80 81       	ld	r24, Z
    2376:	8e 32       	cpi	r24, 0x2E	; 46
    2378:	69 f4       	brne	.+26     	; 0x2394 <play+0x226>
      duration += duration/2;
    237a:	db 01       	movw	r26, r22
    237c:	ca 01       	movw	r24, r20
    237e:	b6 95       	lsr	r27
    2380:	a7 95       	ror	r26
    2382:	97 95       	ror	r25
    2384:	87 95       	ror	r24
    2386:	48 0f       	add	r20, r24
    2388:	59 1f       	adc	r21, r25
    238a:	6a 1f       	adc	r22, r26
    238c:	7b 1f       	adc	r23, r27
      p++;
    238e:	31 96       	adiw	r30, 0x01	; 1
    2390:	fb 83       	std	Y+3, r31	; 0x03
    2392:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	80 81       	ld	r24, Z
      duration += duration/2;
      p++;
    }
  
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
    239a:	80 33       	cpi	r24, 0x30	; 48
    239c:	40 f0       	brcs	.+16     	; 0x23ae <play+0x240>
    239e:	8a 33       	cpi	r24, 0x3A	; 58
    23a0:	30 f4       	brcc	.+12     	; 0x23ae <play+0x240>
      scale = pgm_read_byte1(p) - '0';
    23a2:	98 2f       	mov	r25, r24
    23a4:	90 53       	subi	r25, 0x30	; 48
      p++;
    23a6:	31 96       	adiw	r30, 0x01	; 1
    23a8:	fb 83       	std	Y+3, r31	; 0x03
    23aa:	ea 83       	std	Y+2, r30	; 0x02
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <play+0x242>
    } else {
      scale = default_oct;
    23ae:	99 81       	ldd	r25, Y+1	; 0x01
	 //note = 11;
	 //scale  = 3+4;

    scale += OCTAVE_OFFSET;

    if(pgm_read_byte1(p) == ',')
    23b0:	ea 81       	ldd	r30, Y+2	; 0x02
    23b2:	fb 81       	ldd	r31, Y+3	; 0x03
    23b4:	80 81       	ld	r24, Z
    23b6:	8c 32       	cpi	r24, 0x2C	; 44
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <play+0x252>
      p++;       // skip comma for next note (or we may be at the end)
    23ba:	31 96       	adiw	r30, 0x01	; 1
    23bc:	fb 83       	std	Y+3, r31	; 0x03
    23be:	ea 83       	std	Y+2, r30	; 0x02

	duration /= 2;
    23c0:	7a 01       	movw	r14, r20
    23c2:	8b 01       	movw	r16, r22
    23c4:	16 95       	lsr	r17
    23c6:	07 95       	ror	r16
    23c8:	f7 94       	ror	r15
    23ca:	e7 94       	ror	r14
    23cc:	f5 eb       	ldi	r31, 0xB5	; 181
    23ce:	ef 16       	cp	r14, r31
    23d0:	f1 04       	cpc	r15, r1
    23d2:	01 05       	cpc	r16, r1
    23d4:	11 05       	cpc	r17, r1
    23d6:	28 f0       	brcs	.+10     	; 0x23e2 <play+0x274>
    23d8:	54 eb       	ldi	r21, 0xB4	; 180
    23da:	e5 2e       	mov	r14, r21
    23dc:	f1 2c       	mov	r15, r1
    23de:	01 2d       	mov	r16, r1
    23e0:	11 2d       	mov	r17, r1
	if( duration > 180 ) duration = 180;


    if( note ) {
    23e2:	22 23       	and	r18, r18
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <play+0x27a>
    23e6:	40 c0       	rjmp	.+128    	; 0x2468 <play+0x2fa>

	  // play the note

	  	current_midi_note = (((scale - 4) * 12) + note);
    23e8:	20 53       	subi	r18, 0x30	; 48
    23ea:	3c e0       	ldi	r19, 0x0C	; 12
    23ec:	93 9f       	mul	r25, r19
    23ee:	c0 01       	movw	r24, r0
    23f0:	11 24       	eor	r1, r1
    23f2:	28 0f       	add	r18, r24
    23f4:	20 93 55 05 	sts	0x0555, r18

//		frequency = note_table[current_midi_note];

		note_on();
    23f8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <note_on>

	 	_delay_ms( duration );
    23fc:	c8 01       	movw	r24, r16
    23fe:	b7 01       	movw	r22, r14
    2400:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
    2404:	5b 01       	movw	r10, r22
    2406:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a e7       	ldi	r20, 0x7A	; 122
    240e:	55 e4       	ldi	r21, 0x45	; 69
    2410:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__mulsf3>
    2414:	7b 01       	movw	r14, r22
    2416:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	d4 f1       	brlt	.+116    	; 0x249c <play+0x32e>
		__ticks = 1;
	else if (__tmp > 65535)
    2428:	c8 01       	movw	r24, r16
    242a:	b7 01       	movw	r22, r14
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <play+0x2d0>
    243c:	51 c0       	rjmp	.+162    	; 0x24e0 <play+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	c6 01       	movw	r24, r12
    2440:	b5 01       	movw	r22, r10
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__mulsf3>
    244e:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixunssfsi>
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <play+0x2f2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2454:	80 e9       	ldi	r24, 0x90	; 144
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <play+0x2ea>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	61 50       	subi	r22, 0x01	; 1
    245e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	61 15       	cp	r22, r1
    2462:	71 05       	cpc	r23, r1
    2464:	b9 f7       	brne	.-18     	; 0x2454 <play+0x2e6>
    2466:	43 c0       	rjmp	.+134    	; 0x24ee <play+0x380>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
    2468:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
    246c:	10 92 65 05 	sts	0x0565, r1
//	 	note_off();
  
	} else {
	
	 	note_off();
	  _delay_ms( duration );
    2470:	c8 01       	movw	r24, r16
    2472:	b7 01       	movw	r22, r14
    2474:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__floatunsisf>
    2478:	5b 01       	movw	r10, r22
    247a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a e7       	ldi	r20, 0x7A	; 122
    2482:	55 e4       	ldi	r21, 0x45	; 69
    2484:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__mulsf3>
    2488:	7b 01       	movw	r14, r22
    248a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	1c f4       	brge	.+6      	; 0x24a2 <play+0x334>
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	23 c0       	rjmp	.+70     	; 0x24e8 <play+0x37a>
		__ticks = 1;
	else if (__tmp > 65535)
    24a2:	c8 01       	movw	r24, r16
    24a4:	b7 01       	movw	r22, r14
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	ac f4       	brge	.+42     	; 0x24e0 <play+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	c6 01       	movw	r24, r12
    24b8:	b5 01       	movw	r22, r10
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__mulsf3>
    24c6:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixunssfsi>
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <play+0x36a>
    24cc:	80 e9       	ldi	r24, 0x90	; 144
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <play+0x362>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	61 50       	subi	r22, 0x01	; 1
    24d6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	61 15       	cp	r22, r1
    24da:	71 05       	cpc	r23, r1
    24dc:	b9 f7       	brne	.-18     	; 0x24cc <play+0x35e>
    24de:	07 c0       	rjmp	.+14     	; 0x24ee <play+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	c8 01       	movw	r24, r16
    24e2:	b7 01       	movw	r22, r14
    24e4:	0e 94 11 14 	call	0x2822	; 0x2822 <__fixunssfsi>
    24e8:	cb 01       	movw	r24, r22
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <play+0x37c>

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)

  // begin note loop
  while( pgm_read_byte1(p) ) {
    24ee:	ea 81       	ldd	r30, Y+2	; 0x02
    24f0:	fb 81       	ldd	r31, Y+3	; 0x03
    24f2:	80 81       	ld	r24, Z
    24f4:	88 23       	and	r24, r24
    24f6:	19 f0       	breq	.+6      	; 0x24fe <play+0x390>
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	f4 ce       	rjmp	.-536    	; 0x22e6 <play+0x178>
	  _delay_ms( duration );
	  
    }
  }
	
}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	8f 90       	pop	r8
    251c:	7f 90       	pop	r7
    251e:	6f 90       	pop	r6
    2520:	5f 90       	pop	r5
    2522:	4f 90       	pop	r4
    2524:	3f 90       	pop	r3
    2526:	2f 90       	pop	r2
    2528:	08 95       	ret

0000252a <__vector_26>:
uint16_t accumulator = 0;  // large number holds phase
uint8_t indexi = 0;        // index for wave lookup (the upper 8 bits of the accumulator)

// timer 1 is audio interrupt timer
ISR(TIMER3_COMPA_vect) 
{
    252a:	1f 92       	push	r1
    252c:	0f 92       	push	r0
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	0f 92       	push	r0
    2532:	0b b6       	in	r0, 0x3b	; 59
    2534:	0f 92       	push	r0
    2536:	11 24       	eor	r1, r1
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	8f 93       	push	r24
    253e:	9f 93       	push	r25
    2540:	ef 93       	push	r30
    2542:	ff 93       	push	r31
  // calculate frequency mod
  accumulator = accumulator + frequency;  // add in pith, the higher the number, the faster it rolls over, the more cycles per second
    2544:	80 91 56 05 	lds	r24, 0x0556
    2548:	90 91 57 05 	lds	r25, 0x0557
    254c:	20 91 49 05 	lds	r18, 0x0549
    2550:	30 91 4a 05 	lds	r19, 0x054A
    2554:	82 0f       	add	r24, r18
    2556:	93 1f       	adc	r25, r19
    2558:	90 93 4a 05 	sts	0x054A, r25
    255c:	80 93 49 05 	sts	0x0549, r24
  indexi = accumulator >> 8;   // use top 8 bits as wavetable index
    2560:	90 93 4b 05 	sts	0x054B, r25

  PORTC = sine[indexi];    // get sample from wave table
    2564:	e7 e0       	ldi	r30, 0x07	; 7
    2566:	f3 e0       	ldi	r31, 0x03	; 3
    2568:	e9 0f       	add	r30, r25
    256a:	f1 1d       	adc	r31, r1
    256c:	80 81       	ld	r24, Z
    256e:	85 bb       	out	0x15, r24	; 21
}
    2570:	ff 91       	pop	r31
    2572:	ef 91       	pop	r30
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	3f 91       	pop	r19
    257a:	2f 91       	pop	r18
    257c:	0f 90       	pop	r0
    257e:	0b be       	out	0x3b, r0	; 59
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	0f 90       	pop	r0
    2586:	1f 90       	pop	r1
    2588:	18 95       	reti

0000258a <SetRC>:

// Write to LED Array - Takes in a Row and Column
// this routine is written to help understand how the process works, not fast.
void SetRC( unsigned char R, unsigned char C ) 
{	
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
	unsigned char b1,b2;
	unsigned char port_a, ddr_a;

	if ( C  > 4  ) C = 0;
    2592:	65 30       	cpi	r22, 0x05	; 5
    2594:	08 f0       	brcs	.+2      	; 0x2598 <SetRC+0xe>
    2596:	60 e0       	ldi	r22, 0x00	; 0
	if ( R  > 5  ) R = 0;
    2598:	86 30       	cpi	r24, 0x06	; 6
    259a:	08 f0       	brcs	.+2      	; 0x259e <SetRC+0x14>
    259c:	80 e0       	ldi	r24, 0x00	; 0

	// get current values, Can't cache PORTA/DDRA since the sound interrupt can change, 
	// should cache DDRD6/PORTD6 instead
	port_a = PORTA;
    259e:	2b b3       	in	r18, 0x1b	; 27
	ddr_a = DDRA;
    25a0:	3a b3       	in	r19, 0x1a	; 26

	//	read two values from array, we use pgm_read_byte because the data is in program memory space
	// its 4*2 because there are 4 leds in each column, and two bytes per led
	b1 = pgm_read_byte(&led30[ (R*(4*2))+(C*2)   ] ) ;
    25a2:	a8 2f       	mov	r26, r24
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	aa 0f       	add	r26, r26
    25a8:	bb 1f       	adc	r27, r27
    25aa:	aa 0f       	add	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	a6 0f       	add	r26, r22
    25b0:	b1 1d       	adc	r27, r1
    25b2:	aa 0f       	add	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	cd 01       	movw	r24, r26
    25b8:	84 57       	subi	r24, 0x74	; 116
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	fc 01       	movw	r30, r24
    25be:	44 91       	lpm	r20, Z+
	b2 = pgm_read_byte(&led30[((R*(4*2))+(C*2))+1] ) ;
    25c0:	a3 57       	subi	r26, 0x73	; 115
    25c2:	bf 4f       	sbci	r27, 0xFF	; 255
    25c4:	fd 01       	movw	r30, r26
    25c6:	54 91       	lpm	r21, Z+

	//	b1 = led30[ (R*(4*2))+(C*2)   ]  ;
	//	b2 = led30[((R*(4*2))+(C*2))+1];
	
	// if 10 == 11 then set to don't care (input ) tristate for PB0
	if( GET_BIT( b1,1 )==1 && GET_BIT( b1,0 )==1 ) {
    25c8:	84 2f       	mov	r24, r20
    25ca:	86 95       	lsr	r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	8c 01       	movw	r16, r24
    25d0:	01 70       	andi	r16, 0x01	; 1
    25d2:	10 70       	andi	r17, 0x00	; 0
    25d4:	80 ff       	sbrs	r24, 0
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <SetRC+0x58>
    25d8:	40 ff       	sbrs	r20, 0
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <SetRC+0x58>

		CLR_BIT(ddr_a,2 );
    25dc:	93 2f       	mov	r25, r19
    25de:	9b 7f       	andi	r25, 0xFB	; 251
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <SetRC+0x5c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,2 );
    25e2:	93 2f       	mov	r25, r19
    25e4:	94 60       	ori	r25, 0x04	; 4
	}

	// if 76 == 11 then set to don't care (input ) tristate  for PB1
	if( GET_BIT( b2,7 )==1 && GET_BIT( b2,6 )==1 ) {
    25e6:	57 ff       	sbrs	r21, 7
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <SetRC+0x74>
    25ea:	85 2f       	mov	r24, r21
    25ec:	82 95       	swap	r24
    25ee:	86 95       	lsr	r24
    25f0:	86 95       	lsr	r24
    25f2:	83 70       	andi	r24, 0x03	; 3
    25f4:	80 ff       	sbrs	r24, 0
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <SetRC+0x74>

		CLR_BIT(ddr_a,1 );
    25f8:	39 2f       	mov	r19, r25
    25fa:	3d 7f       	andi	r19, 0xFD	; 253
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <SetRC+0x78>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,1 );
    25fe:	39 2f       	mov	r19, r25
    2600:	32 60       	ori	r19, 0x02	; 2
	}

	// if 54 == 11 then set to don't care (input ) tristate for PB2
	if( GET_BIT( b2,5 )==1 && GET_BIT( b2,4 )==1 ) {
    2602:	85 2f       	mov	r24, r21
    2604:	82 95       	swap	r24
    2606:	86 95       	lsr	r24
    2608:	87 70       	andi	r24, 0x07	; 7
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	ec 01       	movw	r28, r24
    260e:	c1 70       	andi	r28, 0x01	; 1
    2610:	d0 70       	andi	r29, 0x00	; 0
    2612:	80 ff       	sbrs	r24, 0
    2614:	07 c0       	rjmp	.+14     	; 0x2624 <SetRC+0x9a>
    2616:	85 2f       	mov	r24, r21
    2618:	82 95       	swap	r24
    261a:	8f 70       	andi	r24, 0x0F	; 15
    261c:	80 ff       	sbrs	r24, 0
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <SetRC+0x9a>

		CLR_BIT(ddr_a,0 );
    2620:	3e 7f       	andi	r19, 0xFE	; 254
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <SetRC+0x9c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,0 );
    2624:	31 60       	ori	r19, 0x01	; 1
	}

	// if 32 == 11 then set to don't care (input ) tristate for PB3
	if( GET_BIT( b2,3 )==1 && GET_BIT( b2,2 )==1 ) {
    2626:	85 2f       	mov	r24, r21
    2628:	86 95       	lsr	r24
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	dc 01       	movw	r26, r24
    2632:	a1 70       	andi	r26, 0x01	; 1
    2634:	b0 70       	andi	r27, 0x00	; 0
    2636:	80 ff       	sbrs	r24, 0
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <SetRC+0xbe>
    263a:	85 2f       	mov	r24, r21
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	80 ff       	sbrs	r24, 0
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <SetRC+0xbe>

		CLR_BIT(ddr_a,4 );
    2644:	3f 7e       	andi	r19, 0xEF	; 239
    2646:	01 c0       	rjmp	.+2      	; 0x264a <SetRC+0xc0>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,4 );
    2648:	30 61       	ori	r19, 0x10	; 16
	}

	// if 10 == 11 then set to don't care (input ) tristate for PB4
	if( GET_BIT( b2,1 )==1 && GET_BIT( b2,0 )==1 ) {
    264a:	85 2f       	mov	r24, r21
    264c:	86 95       	lsr	r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	bc 01       	movw	r22, r24
    2652:	61 70       	andi	r22, 0x01	; 1
    2654:	70 70       	andi	r23, 0x00	; 0
    2656:	80 ff       	sbrs	r24, 0
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <SetRC+0xda>
    265a:	50 ff       	sbrs	r21, 0
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <SetRC+0xda>

		CLR_BIT(ddr_a,3 );
    265e:	93 2f       	mov	r25, r19
    2660:	97 7f       	andi	r25, 0xF7	; 247
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <SetRC+0xde>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,3 );
    2664:	93 2f       	mov	r25, r19
    2666:	98 60       	ori	r25, 0x08	; 8

	/// all of the DDR's are set


	// if 10 == 00 then set to low for PB0
	if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==0 ) {
    2668:	01 2b       	or	r16, r17
    266a:	29 f4       	brne	.+10     	; 0x2676 <SetRC+0xec>
    266c:	40 fd       	sbrc	r20, 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <SetRC+0xea>

		CLR_BIT(port_a,2); //set to off
    2670:	2b 7f       	andi	r18, 0xFB	; 251
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <SetRC+0xec>

	// if 32 == 01 then set to high for PB0
	} else if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,2 );
    2674:	24 60       	ori	r18, 0x04	; 4
	}

	// if 76 == 00 then set to low for PB1
	if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 )==0 ) {
    2676:	57 fd       	sbrc	r21, 7
    2678:	0a c0       	rjmp	.+20     	; 0x268e <SetRC+0x104>
    267a:	85 2f       	mov	r24, r21
    267c:	82 95       	swap	r24
    267e:	86 95       	lsr	r24
    2680:	86 95       	lsr	r24
    2682:	83 70       	andi	r24, 0x03	; 3
    2684:	80 fd       	sbrc	r24, 0
    2686:	02 c0       	rjmp	.+4      	; 0x268c <SetRC+0x102>

		CLR_BIT(port_a,1); //set to off
    2688:	2d 7f       	andi	r18, 0xFD	; 253
    268a:	01 c0       	rjmp	.+2      	; 0x268e <SetRC+0x104>

	// if 32 == 01 then set to high for PB1
	} else if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 ) ==1 ) { 

		// set to on
		SET_BIT(port_a ,1 );
    268c:	22 60       	ori	r18, 0x02	; 2
	}


	// if 54 == 00 then set to low for PB2
	if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==0 ) {
    268e:	cd 2b       	or	r28, r29
    2690:	41 f4       	brne	.+16     	; 0x26a2 <SetRC+0x118>
    2692:	85 2f       	mov	r24, r21
    2694:	82 95       	swap	r24
    2696:	8f 70       	andi	r24, 0x0F	; 15
    2698:	80 fd       	sbrc	r24, 0
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <SetRC+0x116>

		CLR_BIT(port_a,0); //set to off
    269c:	2e 7f       	andi	r18, 0xFE	; 254
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <SetRC+0x118>

	// if 32 == 01 then set to high for PB2
	} else if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==1 ) { 

		// set to on
		SET_BIT(port_a ,0 );
    26a0:	21 60       	ori	r18, 0x01	; 1
	}

	// if 32 == 00 then set to low for PB3
	if( GET_BIT( b2,3 )==0 && GET_BIT( b2,2 )==0 ) {
    26a2:	ab 2b       	or	r26, r27
    26a4:	41 f4       	brne	.+16     	; 0x26b6 <SetRC+0x12c>
    26a6:	85 2f       	mov	r24, r21
    26a8:	86 95       	lsr	r24
    26aa:	86 95       	lsr	r24
    26ac:	80 fd       	sbrc	r24, 0
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <SetRC+0x12a>

		CLR_BIT(port_a,4); //set to off
    26b0:	2f 7e       	andi	r18, 0xEF	; 239
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <SetRC+0x12c>

	// if 32 == 01 then set to high for PB3
	} else if( GET_BIT( b2,3 ) ==0 && GET_BIT( b2,2 )==1 ) { 

		// set to on
		SET_BIT(port_a ,4 );
    26b4:	20 61       	ori	r18, 0x10	; 16
	}

	// if 10 == 00 then set to low for PB4
	if( GET_BIT( b2,1 )==0 && GET_BIT( b2,0 )==0 ) {
    26b6:	67 2b       	or	r22, r23
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <SetRC+0x13a>
    26ba:	50 fd       	sbrc	r21, 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <SetRC+0x138>

		CLR_BIT(port_a,3); //set to off
    26be:	27 7f       	andi	r18, 0xF7	; 247
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <SetRC+0x13a>

	// if 32 == 01 then set to high for PB4
	} else if( GET_BIT( b2,1)==0 && GET_BIT( b2,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,3 );
    26c2:	28 60       	ori	r18, 0x08	; 8
	}

	//set all at once.
	PORTA = port_a;
    26c4:	2b bb       	out	0x1b, r18	; 27
	DDRA = ddr_a;
    26c6:	9a bb       	out	0x1a, r25	; 26
}
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <scrollLEDS>:

void scrollLEDS(void)
{
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
	static int c = 0;
	static int r = 0;

	static unsigned short count = 0;

	count ++ ;
    26da:	80 91 4c 05 	lds	r24, 0x054C
    26de:	90 91 4d 05 	lds	r25, 0x054D
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	90 93 4d 05 	sts	0x054D, r25
    26e8:	80 93 4c 05 	sts	0x054C, r24

	if ( count < 800  ) return;
    26ec:	80 52       	subi	r24, 0x20	; 32
    26ee:	93 40       	sbci	r25, 0x03	; 3
    26f0:	60 f1       	brcs	.+88     	; 0x274a <scrollLEDS+0x78>

	count = 0;
    26f2:	10 92 4d 05 	sts	0x054D, r1
    26f6:	10 92 4c 05 	sts	0x054C, r1

	SetRC(r,c);
    26fa:	00 91 4e 05 	lds	r16, 0x054E
    26fe:	10 91 4f 05 	lds	r17, 0x054F
    2702:	c0 91 50 05 	lds	r28, 0x0550
    2706:	d0 91 51 05 	lds	r29, 0x0551
    270a:	80 2f       	mov	r24, r16
    270c:	6c 2f       	mov	r22, r28
    270e:	0e 94 c5 12 	call	0x258a	; 0x258a <SetRC>

	r++ ;
    2712:	0f 5f       	subi	r16, 0xFF	; 255
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	10 93 4f 05 	sts	0x054F, r17
    271a:	00 93 4e 05 	sts	0x054E, r16

	if ( r == 5 )  {
    271e:	05 30       	cpi	r16, 0x05	; 5
    2720:	11 05       	cpc	r17, r1
    2722:	49 f4       	brne	.+18     	; 0x2736 <scrollLEDS+0x64>
		r = 0;
    2724:	10 92 4f 05 	sts	0x054F, r1
    2728:	10 92 4e 05 	sts	0x054E, r1
		c++ ;
    272c:	21 96       	adiw	r28, 0x01	; 1
    272e:	d0 93 51 05 	sts	0x0551, r29
    2732:	c0 93 50 05 	sts	0x0550, r28
	}

	if ( c == 4 ) { 
    2736:	80 91 50 05 	lds	r24, 0x0550
    273a:	90 91 51 05 	lds	r25, 0x0551
    273e:	04 97       	sbiw	r24, 0x04	; 4
    2740:	21 f4       	brne	.+8      	; 0x274a <scrollLEDS+0x78>
		c = 0;
    2742:	10 92 51 05 	sts	0x0551, r1
    2746:	10 92 50 05 	sts	0x0550, r1
	}
	 
}
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	08 95       	ret

00002754 <main>:
}

int main(void) 
{
	/* Disable interrupts at first */
	cli();
    2754:	f8 94       	cli

	/* Setup I/O Pins */
	init_io();
    2756:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <init_io>


	/* Setup Timers */
	init_timers();
    275a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <init_timers>
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
    275e:	80 e9       	ldi	r24, 0x90	; 144
    2760:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
    2762:	86 e0       	ldi	r24, 0x06	; 6
    2764:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    2768:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    276c:	8f e1       	ldi	r24, 0x1F	; 31
    276e:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
    2770:	80 e8       	ldi	r24, 0x80	; 128
    2772:	8b b9       	out	0x0b, r24	; 11

	/* Enable USART and Pin Interrupts */
	init_interrupts();


	PORTB = 0xFF;
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	88 bb       	out	0x18, r24	; 24

	OCR1A = 500;
    2778:	84 ef       	ldi	r24, 0xF4	; 244
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	9b bd       	out	0x2b, r25	; 43
    277e:	8a bd       	out	0x2a, r24	; 42
}

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
    2780:	86 b1       	in	r24, 0x06	; 6
    2782:	87 60       	ori	r24, 0x07	; 7
    2784:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
    2786:	37 9a       	sbi	0x06, 7	; 6

	/*
		Pitch bend needs to start at 64 (middle value) or pitch will start out
		two half steps too low (0 = max bend downward)
	 */
	current_midi_pb_l = current_midi_pb_h = 64;
    2788:	80 e4       	ldi	r24, 0x40	; 64
    278a:	80 93 5b 05 	sts	0x055B, r24
    278e:	80 93 5a 05 	sts	0x055A, r24

	num_bytes = 0;
    2792:	10 92 53 05 	sts	0x0553, r1
	num_ccs = 0;
    2796:	10 92 59 05 	sts	0x0559, r1
	num_pbs = 0;
    279a:	10 92 6c 05 	sts	0x056C, r1
	byte_ready = 0;
    279e:	10 92 52 05 	sts	0x0552, r1
	midi_channel = 0;
    27a2:	10 92 6e 05 	sts	0x056E, r1
	master_volume = 127;
    27a6:	8f e7       	ldi	r24, 0x7F	; 127
    27a8:	80 93 54 05 	sts	0x0554, r24

	amplitude = 0;
    27ac:	10 92 5d 05 	sts	0x055D, r1
	fine_pitch_bend = 0;
    27b0:	10 92 62 05 	sts	0x0562, r1
    27b4:	10 92 61 05 	sts	0x0561, r1
	note_on_gate = 0;
    27b8:	10 92 65 05 	sts	0x0565, r1

	sweep_enabled = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	80 93 6d 05 	sts	0x056D, r24
	sweep_direction = SWEEP_UP;
    27c2:	80 93 6b 05 	sts	0x056B, r24
	sweep_amount = 0;
    27c6:	10 92 70 05 	sts	0x0570, r1
	sweep_loop_enabled = 1;
    27ca:	80 93 73 05 	sts	0x0573, r24
	fake_16_timer = 0;
    27ce:	10 92 64 05 	sts	0x0564, r1
    27d2:	10 92 63 05 	sts	0x0563, r1

	/* Finally, enable global interrupts */
	sei();
    27d6:	78 94       	sei

	//play(song[1]);

  	adctimer = 0;
    27d8:	10 92 10 05 	sts	0x0510, r1
	/*Main Loop*/
	while (1) {

	    uint8_t adcchan = 0;

	    adctimer++;
    27dc:	80 91 10 05 	lds	r24, 0x0510
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	80 93 10 05 	sts	0x0510, r24
	    adctimer &= (NUM_ADC_SAMPLES-1);
    27e6:	80 91 10 05 	lds	r24, 0x0510
    27ea:	8f 71       	andi	r24, 0x1F	; 31
    27ec:	80 93 10 05 	sts	0x0510, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {

			ADMUX = _BV(REFS0) | adcchan;
    27f2:	89 2f       	mov	r24, r25
    27f4:	80 64       	ori	r24, 0x40	; 64
    27f6:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= _BV(ADSC);
    27f8:	36 9a       	sbi	0x06, 6	; 6

	    adctimer++;
	    adctimer &= (NUM_ADC_SAMPLES-1);

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {
    27fa:	9f 5f       	subi	r25, 0xFF	; 255
    27fc:	98 30       	cpi	r25, 0x08	; 8
    27fe:	c9 f7       	brne	.-14     	; 0x27f2 <main+0x9e>
//			read_adc(knobs+adcchan);


	    }

		check_byte_received();
    2800:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <check_byte_received>


	    // update values after we've read averaged values from all knobs
	    if ( adctimer == 0 ) {
    2804:	80 91 10 05 	lds	r24, 0x0510
    2808:	88 23       	and	r24, r24
    280a:	41 f4       	brne	.+16     	; 0x281c <main+0xc8>

			fine_pitch_bend = knobs[PITCH_KNOB].val;	
    280c:	80 91 11 05 	lds	r24, 0x0511
    2810:	90 91 12 05 	lds	r25, 0x0512
    2814:	90 93 62 05 	sts	0x0562, r25
    2818:	80 93 61 05 	sts	0x0561, r24

		}
	
	
		scrollLEDS();
    281c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <scrollLEDS>
    2820:	dd cf       	rjmp	.-70     	; 0x27dc <main+0x88>

00002822 <__fixunssfsi>:
    2822:	ef 92       	push	r14
    2824:	ff 92       	push	r15
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	7b 01       	movw	r14, r22
    282c:	8c 01       	movw	r16, r24
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	5f e4       	ldi	r21, 0x4F	; 79
    2836:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__gesf2>
    283a:	88 23       	and	r24, r24
    283c:	8c f0       	brlt	.+34     	; 0x2860 <__fixunssfsi+0x3e>
    283e:	c8 01       	movw	r24, r16
    2840:	b7 01       	movw	r22, r14
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	5f e4       	ldi	r21, 0x4F	; 79
    284a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__subsf3>
    284e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixsfsi>
    2852:	9b 01       	movw	r18, r22
    2854:	ac 01       	movw	r20, r24
    2856:	20 50       	subi	r18, 0x00	; 0
    2858:	30 40       	sbci	r19, 0x00	; 0
    285a:	40 40       	sbci	r20, 0x00	; 0
    285c:	50 48       	sbci	r21, 0x80	; 128
    285e:	06 c0       	rjmp	.+12     	; 0x286c <__fixunssfsi+0x4a>
    2860:	c8 01       	movw	r24, r16
    2862:	b7 01       	movw	r22, r14
    2864:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixsfsi>
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	b9 01       	movw	r22, r18
    286e:	ca 01       	movw	r24, r20
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	08 95       	ret

0000287a <_fpadd_parts>:
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e3 e4       	ldi	r30, 0x43	; 67
    2880:	f4 e1       	ldi	r31, 0x14	; 20
    2882:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__prologue_saves__>
    2886:	dc 01       	movw	r26, r24
    2888:	2b 01       	movw	r4, r22
    288a:	fa 01       	movw	r30, r20
    288c:	9c 91       	ld	r25, X
    288e:	92 30       	cpi	r25, 0x02	; 2
    2890:	08 f4       	brcc	.+2      	; 0x2894 <_fpadd_parts+0x1a>
    2892:	39 c1       	rjmp	.+626    	; 0x2b06 <_fpadd_parts+0x28c>
    2894:	eb 01       	movw	r28, r22
    2896:	88 81       	ld	r24, Y
    2898:	82 30       	cpi	r24, 0x02	; 2
    289a:	08 f4       	brcc	.+2      	; 0x289e <_fpadd_parts+0x24>
    289c:	33 c1       	rjmp	.+614    	; 0x2b04 <_fpadd_parts+0x28a>
    289e:	94 30       	cpi	r25, 0x04	; 4
    28a0:	69 f4       	brne	.+26     	; 0x28bc <_fpadd_parts+0x42>
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <_fpadd_parts+0x2e>
    28a6:	2f c1       	rjmp	.+606    	; 0x2b06 <_fpadd_parts+0x28c>
    28a8:	11 96       	adiw	r26, 0x01	; 1
    28aa:	9c 91       	ld	r25, X
    28ac:	11 97       	sbiw	r26, 0x01	; 1
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	98 17       	cp	r25, r24
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <_fpadd_parts+0x3c>
    28b4:	28 c1       	rjmp	.+592    	; 0x2b06 <_fpadd_parts+0x28c>
    28b6:	a7 e0       	ldi	r26, 0x07	; 7
    28b8:	b4 e0       	ldi	r27, 0x04	; 4
    28ba:	25 c1       	rjmp	.+586    	; 0x2b06 <_fpadd_parts+0x28c>
    28bc:	84 30       	cpi	r24, 0x04	; 4
    28be:	09 f4       	brne	.+2      	; 0x28c2 <_fpadd_parts+0x48>
    28c0:	21 c1       	rjmp	.+578    	; 0x2b04 <_fpadd_parts+0x28a>
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	a9 f4       	brne	.+42     	; 0x28f0 <_fpadd_parts+0x76>
    28c6:	92 30       	cpi	r25, 0x02	; 2
    28c8:	09 f0       	breq	.+2      	; 0x28cc <_fpadd_parts+0x52>
    28ca:	1d c1       	rjmp	.+570    	; 0x2b06 <_fpadd_parts+0x28c>
    28cc:	9a 01       	movw	r18, r20
    28ce:	ad 01       	movw	r20, r26
    28d0:	88 e0       	ldi	r24, 0x08	; 8
    28d2:	ea 01       	movw	r28, r20
    28d4:	09 90       	ld	r0, Y+
    28d6:	ae 01       	movw	r20, r28
    28d8:	e9 01       	movw	r28, r18
    28da:	09 92       	st	Y+, r0
    28dc:	9e 01       	movw	r18, r28
    28de:	81 50       	subi	r24, 0x01	; 1
    28e0:	c1 f7       	brne	.-16     	; 0x28d2 <_fpadd_parts+0x58>
    28e2:	e2 01       	movw	r28, r4
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	9c 91       	ld	r25, X
    28ea:	89 23       	and	r24, r25
    28ec:	81 83       	std	Z+1, r24	; 0x01
    28ee:	08 c1       	rjmp	.+528    	; 0x2b00 <_fpadd_parts+0x286>
    28f0:	92 30       	cpi	r25, 0x02	; 2
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <_fpadd_parts+0x7c>
    28f4:	07 c1       	rjmp	.+526    	; 0x2b04 <_fpadd_parts+0x28a>
    28f6:	12 96       	adiw	r26, 0x02	; 2
    28f8:	2d 90       	ld	r2, X+
    28fa:	3c 90       	ld	r3, X
    28fc:	13 97       	sbiw	r26, 0x03	; 3
    28fe:	eb 01       	movw	r28, r22
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	14 96       	adiw	r26, 0x04	; 4
    2906:	ad 90       	ld	r10, X+
    2908:	bd 90       	ld	r11, X+
    290a:	cd 90       	ld	r12, X+
    290c:	dc 90       	ld	r13, X
    290e:	17 97       	sbiw	r26, 0x07	; 7
    2910:	ec 80       	ldd	r14, Y+4	; 0x04
    2912:	fd 80       	ldd	r15, Y+5	; 0x05
    2914:	0e 81       	ldd	r16, Y+6	; 0x06
    2916:	1f 81       	ldd	r17, Y+7	; 0x07
    2918:	91 01       	movw	r18, r2
    291a:	28 1b       	sub	r18, r24
    291c:	39 0b       	sbc	r19, r25
    291e:	b9 01       	movw	r22, r18
    2920:	37 ff       	sbrs	r19, 7
    2922:	04 c0       	rjmp	.+8      	; 0x292c <_fpadd_parts+0xb2>
    2924:	66 27       	eor	r22, r22
    2926:	77 27       	eor	r23, r23
    2928:	62 1b       	sub	r22, r18
    292a:	73 0b       	sbc	r23, r19
    292c:	60 32       	cpi	r22, 0x20	; 32
    292e:	71 05       	cpc	r23, r1
    2930:	0c f0       	brlt	.+2      	; 0x2934 <_fpadd_parts+0xba>
    2932:	61 c0       	rjmp	.+194    	; 0x29f6 <_fpadd_parts+0x17c>
    2934:	12 16       	cp	r1, r18
    2936:	13 06       	cpc	r1, r19
    2938:	6c f5       	brge	.+90     	; 0x2994 <_fpadd_parts+0x11a>
    293a:	37 01       	movw	r6, r14
    293c:	48 01       	movw	r8, r16
    293e:	06 2e       	mov	r0, r22
    2940:	04 c0       	rjmp	.+8      	; 0x294a <_fpadd_parts+0xd0>
    2942:	96 94       	lsr	r9
    2944:	87 94       	ror	r8
    2946:	77 94       	ror	r7
    2948:	67 94       	ror	r6
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <_fpadd_parts+0xc8>
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <_fpadd_parts+0xe6>
    2958:	22 0f       	add	r18, r18
    295a:	33 1f       	adc	r19, r19
    295c:	44 1f       	adc	r20, r20
    295e:	55 1f       	adc	r21, r21
    2960:	6a 95       	dec	r22
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <_fpadd_parts+0xde>
    2964:	21 50       	subi	r18, 0x01	; 1
    2966:	30 40       	sbci	r19, 0x00	; 0
    2968:	40 40       	sbci	r20, 0x00	; 0
    296a:	50 40       	sbci	r21, 0x00	; 0
    296c:	2e 21       	and	r18, r14
    296e:	3f 21       	and	r19, r15
    2970:	40 23       	and	r20, r16
    2972:	51 23       	and	r21, r17
    2974:	21 15       	cp	r18, r1
    2976:	31 05       	cpc	r19, r1
    2978:	41 05       	cpc	r20, r1
    297a:	51 05       	cpc	r21, r1
    297c:	21 f0       	breq	.+8      	; 0x2986 <_fpadd_parts+0x10c>
    297e:	21 e0       	ldi	r18, 0x01	; 1
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	79 01       	movw	r14, r18
    2988:	8a 01       	movw	r16, r20
    298a:	e6 28       	or	r14, r6
    298c:	f7 28       	or	r15, r7
    298e:	08 29       	or	r16, r8
    2990:	19 29       	or	r17, r9
    2992:	3c c0       	rjmp	.+120    	; 0x2a0c <_fpadd_parts+0x192>
    2994:	23 2b       	or	r18, r19
    2996:	d1 f1       	breq	.+116    	; 0x2a0c <_fpadd_parts+0x192>
    2998:	26 0e       	add	r2, r22
    299a:	37 1e       	adc	r3, r23
    299c:	35 01       	movw	r6, r10
    299e:	46 01       	movw	r8, r12
    29a0:	06 2e       	mov	r0, r22
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <_fpadd_parts+0x132>
    29a4:	96 94       	lsr	r9
    29a6:	87 94       	ror	r8
    29a8:	77 94       	ror	r7
    29aa:	67 94       	ror	r6
    29ac:	0a 94       	dec	r0
    29ae:	d2 f7       	brpl	.-12     	; 0x29a4 <_fpadd_parts+0x12a>
    29b0:	21 e0       	ldi	r18, 0x01	; 1
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	04 c0       	rjmp	.+8      	; 0x29c2 <_fpadd_parts+0x148>
    29ba:	22 0f       	add	r18, r18
    29bc:	33 1f       	adc	r19, r19
    29be:	44 1f       	adc	r20, r20
    29c0:	55 1f       	adc	r21, r21
    29c2:	6a 95       	dec	r22
    29c4:	d2 f7       	brpl	.-12     	; 0x29ba <_fpadd_parts+0x140>
    29c6:	21 50       	subi	r18, 0x01	; 1
    29c8:	30 40       	sbci	r19, 0x00	; 0
    29ca:	40 40       	sbci	r20, 0x00	; 0
    29cc:	50 40       	sbci	r21, 0x00	; 0
    29ce:	2a 21       	and	r18, r10
    29d0:	3b 21       	and	r19, r11
    29d2:	4c 21       	and	r20, r12
    29d4:	5d 21       	and	r21, r13
    29d6:	21 15       	cp	r18, r1
    29d8:	31 05       	cpc	r19, r1
    29da:	41 05       	cpc	r20, r1
    29dc:	51 05       	cpc	r21, r1
    29de:	21 f0       	breq	.+8      	; 0x29e8 <_fpadd_parts+0x16e>
    29e0:	21 e0       	ldi	r18, 0x01	; 1
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	59 01       	movw	r10, r18
    29ea:	6a 01       	movw	r12, r20
    29ec:	a6 28       	or	r10, r6
    29ee:	b7 28       	or	r11, r7
    29f0:	c8 28       	or	r12, r8
    29f2:	d9 28       	or	r13, r9
    29f4:	0b c0       	rjmp	.+22     	; 0x2a0c <_fpadd_parts+0x192>
    29f6:	82 15       	cp	r24, r2
    29f8:	93 05       	cpc	r25, r3
    29fa:	2c f0       	brlt	.+10     	; 0x2a06 <_fpadd_parts+0x18c>
    29fc:	1c 01       	movw	r2, r24
    29fe:	aa 24       	eor	r10, r10
    2a00:	bb 24       	eor	r11, r11
    2a02:	65 01       	movw	r12, r10
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <_fpadd_parts+0x192>
    2a06:	ee 24       	eor	r14, r14
    2a08:	ff 24       	eor	r15, r15
    2a0a:	87 01       	movw	r16, r14
    2a0c:	11 96       	adiw	r26, 0x01	; 1
    2a0e:	9c 91       	ld	r25, X
    2a10:	d2 01       	movw	r26, r4
    2a12:	11 96       	adiw	r26, 0x01	; 1
    2a14:	8c 91       	ld	r24, X
    2a16:	98 17       	cp	r25, r24
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <_fpadd_parts+0x1a2>
    2a1a:	45 c0       	rjmp	.+138    	; 0x2aa6 <_fpadd_parts+0x22c>
    2a1c:	99 23       	and	r25, r25
    2a1e:	39 f0       	breq	.+14     	; 0x2a2e <_fpadd_parts+0x1b4>
    2a20:	a8 01       	movw	r20, r16
    2a22:	97 01       	movw	r18, r14
    2a24:	2a 19       	sub	r18, r10
    2a26:	3b 09       	sbc	r19, r11
    2a28:	4c 09       	sbc	r20, r12
    2a2a:	5d 09       	sbc	r21, r13
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <_fpadd_parts+0x1c0>
    2a2e:	a6 01       	movw	r20, r12
    2a30:	95 01       	movw	r18, r10
    2a32:	2e 19       	sub	r18, r14
    2a34:	3f 09       	sbc	r19, r15
    2a36:	40 0b       	sbc	r20, r16
    2a38:	51 0b       	sbc	r21, r17
    2a3a:	57 fd       	sbrc	r21, 7
    2a3c:	08 c0       	rjmp	.+16     	; 0x2a4e <_fpadd_parts+0x1d4>
    2a3e:	11 82       	std	Z+1, r1	; 0x01
    2a40:	33 82       	std	Z+3, r3	; 0x03
    2a42:	22 82       	std	Z+2, r2	; 0x02
    2a44:	24 83       	std	Z+4, r18	; 0x04
    2a46:	35 83       	std	Z+5, r19	; 0x05
    2a48:	46 83       	std	Z+6, r20	; 0x06
    2a4a:	57 83       	std	Z+7, r21	; 0x07
    2a4c:	1d c0       	rjmp	.+58     	; 0x2a88 <_fpadd_parts+0x20e>
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	81 83       	std	Z+1, r24	; 0x01
    2a52:	33 82       	std	Z+3, r3	; 0x03
    2a54:	22 82       	std	Z+2, r2	; 0x02
    2a56:	88 27       	eor	r24, r24
    2a58:	99 27       	eor	r25, r25
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	82 1b       	sub	r24, r18
    2a5e:	93 0b       	sbc	r25, r19
    2a60:	a4 0b       	sbc	r26, r20
    2a62:	b5 0b       	sbc	r27, r21
    2a64:	84 83       	std	Z+4, r24	; 0x04
    2a66:	95 83       	std	Z+5, r25	; 0x05
    2a68:	a6 83       	std	Z+6, r26	; 0x06
    2a6a:	b7 83       	std	Z+7, r27	; 0x07
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <_fpadd_parts+0x20e>
    2a6e:	22 0f       	add	r18, r18
    2a70:	33 1f       	adc	r19, r19
    2a72:	44 1f       	adc	r20, r20
    2a74:	55 1f       	adc	r21, r21
    2a76:	24 83       	std	Z+4, r18	; 0x04
    2a78:	35 83       	std	Z+5, r19	; 0x05
    2a7a:	46 83       	std	Z+6, r20	; 0x06
    2a7c:	57 83       	std	Z+7, r21	; 0x07
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	93 83       	std	Z+3, r25	; 0x03
    2a86:	82 83       	std	Z+2, r24	; 0x02
    2a88:	24 81       	ldd	r18, Z+4	; 0x04
    2a8a:	35 81       	ldd	r19, Z+5	; 0x05
    2a8c:	46 81       	ldd	r20, Z+6	; 0x06
    2a8e:	57 81       	ldd	r21, Z+7	; 0x07
    2a90:	da 01       	movw	r26, r20
    2a92:	c9 01       	movw	r24, r18
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	a1 09       	sbc	r26, r1
    2a98:	b1 09       	sbc	r27, r1
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	af 4f       	sbci	r26, 0xFF	; 255
    2aa0:	bf 43       	sbci	r27, 0x3F	; 63
    2aa2:	28 f3       	brcs	.-54     	; 0x2a6e <_fpadd_parts+0x1f4>
    2aa4:	0b c0       	rjmp	.+22     	; 0x2abc <_fpadd_parts+0x242>
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	33 82       	std	Z+3, r3	; 0x03
    2aaa:	22 82       	std	Z+2, r2	; 0x02
    2aac:	ea 0c       	add	r14, r10
    2aae:	fb 1c       	adc	r15, r11
    2ab0:	0c 1d       	adc	r16, r12
    2ab2:	1d 1d       	adc	r17, r13
    2ab4:	e4 82       	std	Z+4, r14	; 0x04
    2ab6:	f5 82       	std	Z+5, r15	; 0x05
    2ab8:	06 83       	std	Z+6, r16	; 0x06
    2aba:	17 83       	std	Z+7, r17	; 0x07
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	80 83       	st	Z, r24
    2ac0:	24 81       	ldd	r18, Z+4	; 0x04
    2ac2:	35 81       	ldd	r19, Z+5	; 0x05
    2ac4:	46 81       	ldd	r20, Z+6	; 0x06
    2ac6:	57 81       	ldd	r21, Z+7	; 0x07
    2ac8:	57 ff       	sbrs	r21, 7
    2aca:	1a c0       	rjmp	.+52     	; 0x2b00 <_fpadd_parts+0x286>
    2acc:	c9 01       	movw	r24, r18
    2ace:	aa 27       	eor	r26, r26
    2ad0:	97 fd       	sbrc	r25, 7
    2ad2:	a0 95       	com	r26
    2ad4:	ba 2f       	mov	r27, r26
    2ad6:	81 70       	andi	r24, 0x01	; 1
    2ad8:	90 70       	andi	r25, 0x00	; 0
    2ada:	a0 70       	andi	r26, 0x00	; 0
    2adc:	b0 70       	andi	r27, 0x00	; 0
    2ade:	56 95       	lsr	r21
    2ae0:	47 95       	ror	r20
    2ae2:	37 95       	ror	r19
    2ae4:	27 95       	ror	r18
    2ae6:	82 2b       	or	r24, r18
    2ae8:	93 2b       	or	r25, r19
    2aea:	a4 2b       	or	r26, r20
    2aec:	b5 2b       	or	r27, r21
    2aee:	84 83       	std	Z+4, r24	; 0x04
    2af0:	95 83       	std	Z+5, r25	; 0x05
    2af2:	a6 83       	std	Z+6, r26	; 0x06
    2af4:	b7 83       	std	Z+7, r27	; 0x07
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	93 83       	std	Z+3, r25	; 0x03
    2afe:	82 83       	std	Z+2, r24	; 0x02
    2b00:	df 01       	movw	r26, r30
    2b02:	01 c0       	rjmp	.+2      	; 0x2b06 <_fpadd_parts+0x28c>
    2b04:	d2 01       	movw	r26, r4
    2b06:	cd 01       	movw	r24, r26
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	e2 e1       	ldi	r30, 0x12	; 18
    2b0e:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__epilogue_restores__>

00002b12 <__subsf3>:
    2b12:	a0 e2       	ldi	r26, 0x20	; 32
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ef e8       	ldi	r30, 0x8F	; 143
    2b18:	f5 e1       	ldi	r31, 0x15	; 21
    2b1a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x18>
    2b1e:	69 83       	std	Y+1, r22	; 0x01
    2b20:	7a 83       	std	Y+2, r23	; 0x02
    2b22:	8b 83       	std	Y+3, r24	; 0x03
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	2d 83       	std	Y+5, r18	; 0x05
    2b28:	3e 83       	std	Y+6, r19	; 0x06
    2b2a:	4f 83       	std	Y+7, r20	; 0x07
    2b2c:	58 87       	std	Y+8, r21	; 0x08
    2b2e:	e9 e0       	ldi	r30, 0x09	; 9
    2b30:	ee 2e       	mov	r14, r30
    2b32:	f1 2c       	mov	r15, r1
    2b34:	ec 0e       	add	r14, r28
    2b36:	fd 1e       	adc	r15, r29
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	b7 01       	movw	r22, r14
    2b3e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2b42:	8e 01       	movw	r16, r28
    2b44:	0f 5e       	subi	r16, 0xEF	; 239
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	ce 01       	movw	r24, r28
    2b4a:	05 96       	adiw	r24, 0x05	; 5
    2b4c:	b8 01       	movw	r22, r16
    2b4e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2b52:	8a 89       	ldd	r24, Y+18	; 0x12
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	89 27       	eor	r24, r25
    2b58:	8a 8b       	std	Y+18, r24	; 0x12
    2b5a:	c7 01       	movw	r24, r14
    2b5c:	b8 01       	movw	r22, r16
    2b5e:	ae 01       	movw	r20, r28
    2b60:	47 5e       	subi	r20, 0xE7	; 231
    2b62:	5f 4f       	sbci	r21, 0xFF	; 255
    2b64:	0e 94 3d 14 	call	0x287a	; 0x287a <_fpadd_parts>
    2b68:	0e 94 8d 18 	call	0x311a	; 0x311a <__pack_f>
    2b6c:	a0 96       	adiw	r28, 0x20	; 32
    2b6e:	e6 e0       	ldi	r30, 0x06	; 6
    2b70:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x18>

00002b74 <__addsf3>:
    2b74:	a0 e2       	ldi	r26, 0x20	; 32
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e0 ec       	ldi	r30, 0xC0	; 192
    2b7a:	f5 e1       	ldi	r31, 0x15	; 21
    2b7c:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x18>
    2b80:	69 83       	std	Y+1, r22	; 0x01
    2b82:	7a 83       	std	Y+2, r23	; 0x02
    2b84:	8b 83       	std	Y+3, r24	; 0x03
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	2d 83       	std	Y+5, r18	; 0x05
    2b8a:	3e 83       	std	Y+6, r19	; 0x06
    2b8c:	4f 83       	std	Y+7, r20	; 0x07
    2b8e:	58 87       	std	Y+8, r21	; 0x08
    2b90:	f9 e0       	ldi	r31, 0x09	; 9
    2b92:	ef 2e       	mov	r14, r31
    2b94:	f1 2c       	mov	r15, r1
    2b96:	ec 0e       	add	r14, r28
    2b98:	fd 1e       	adc	r15, r29
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	01 96       	adiw	r24, 0x01	; 1
    2b9e:	b7 01       	movw	r22, r14
    2ba0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	0f 5e       	subi	r16, 0xEF	; 239
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	ce 01       	movw	r24, r28
    2bac:	05 96       	adiw	r24, 0x05	; 5
    2bae:	b8 01       	movw	r22, r16
    2bb0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2bb4:	c7 01       	movw	r24, r14
    2bb6:	b8 01       	movw	r22, r16
    2bb8:	ae 01       	movw	r20, r28
    2bba:	47 5e       	subi	r20, 0xE7	; 231
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	0e 94 3d 14 	call	0x287a	; 0x287a <_fpadd_parts>
    2bc2:	0e 94 8d 18 	call	0x311a	; 0x311a <__pack_f>
    2bc6:	a0 96       	adiw	r28, 0x20	; 32
    2bc8:	e6 e0       	ldi	r30, 0x06	; 6
    2bca:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x18>

00002bce <__mulsf3>:
    2bce:	a0 e2       	ldi	r26, 0x20	; 32
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ed ee       	ldi	r30, 0xED	; 237
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__prologue_saves__>
    2bda:	69 83       	std	Y+1, r22	; 0x01
    2bdc:	7a 83       	std	Y+2, r23	; 0x02
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	2d 83       	std	Y+5, r18	; 0x05
    2be4:	3e 83       	std	Y+6, r19	; 0x06
    2be6:	4f 83       	std	Y+7, r20	; 0x07
    2be8:	58 87       	std	Y+8, r21	; 0x08
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	be 01       	movw	r22, r28
    2bf0:	67 5f       	subi	r22, 0xF7	; 247
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	05 96       	adiw	r24, 0x05	; 5
    2bfc:	be 01       	movw	r22, r28
    2bfe:	6f 5e       	subi	r22, 0xEF	; 239
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
    2c02:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2c06:	99 85       	ldd	r25, Y+9	; 0x09
    2c08:	92 30       	cpi	r25, 0x02	; 2
    2c0a:	88 f0       	brcs	.+34     	; 0x2c2e <__mulsf3+0x60>
    2c0c:	89 89       	ldd	r24, Y+17	; 0x11
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	c8 f0       	brcs	.+50     	; 0x2c44 <__mulsf3+0x76>
    2c12:	94 30       	cpi	r25, 0x04	; 4
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <__mulsf3+0x4e>
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	51 f4       	brne	.+20     	; 0x2c2e <__mulsf3+0x60>
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <__mulsf3+0x56>
    2c1c:	84 30       	cpi	r24, 0x04	; 4
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <__mulsf3+0x5c>
    2c20:	92 30       	cpi	r25, 0x02	; 2
    2c22:	81 f4       	brne	.+32     	; 0x2c44 <__mulsf3+0x76>
    2c24:	87 e0       	ldi	r24, 0x07	; 7
    2c26:	94 e0       	ldi	r25, 0x04	; 4
    2c28:	c6 c0       	rjmp	.+396    	; 0x2db6 <__mulsf3+0x1e8>
    2c2a:	92 30       	cpi	r25, 0x02	; 2
    2c2c:	49 f4       	brne	.+18     	; 0x2c40 <__mulsf3+0x72>
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	8a 89       	ldd	r24, Y+18	; 0x12
    2c34:	98 13       	cpse	r25, r24
    2c36:	21 e0       	ldi	r18, 0x01	; 1
    2c38:	2a 87       	std	Y+10, r18	; 0x0a
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	09 96       	adiw	r24, 0x09	; 9
    2c3e:	bb c0       	rjmp	.+374    	; 0x2db6 <__mulsf3+0x1e8>
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	49 f4       	brne	.+18     	; 0x2c56 <__mulsf3+0x88>
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	8a 89       	ldd	r24, Y+18	; 0x12
    2c4a:	98 13       	cpse	r25, r24
    2c4c:	21 e0       	ldi	r18, 0x01	; 1
    2c4e:	2a 8b       	std	Y+18, r18	; 0x12
    2c50:	ce 01       	movw	r24, r28
    2c52:	41 96       	adiw	r24, 0x11	; 17
    2c54:	b0 c0       	rjmp	.+352    	; 0x2db6 <__mulsf3+0x1e8>
    2c56:	2d 84       	ldd	r2, Y+13	; 0x0d
    2c58:	3e 84       	ldd	r3, Y+14	; 0x0e
    2c5a:	4f 84       	ldd	r4, Y+15	; 0x0f
    2c5c:	58 88       	ldd	r5, Y+16	; 0x10
    2c5e:	6d 88       	ldd	r6, Y+21	; 0x15
    2c60:	7e 88       	ldd	r7, Y+22	; 0x16
    2c62:	8f 88       	ldd	r8, Y+23	; 0x17
    2c64:	98 8c       	ldd	r9, Y+24	; 0x18
    2c66:	ee 24       	eor	r14, r14
    2c68:	ff 24       	eor	r15, r15
    2c6a:	87 01       	movw	r16, r14
    2c6c:	aa 24       	eor	r10, r10
    2c6e:	bb 24       	eor	r11, r11
    2c70:	65 01       	movw	r12, r10
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	e0 e0       	ldi	r30, 0x00	; 0
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	c1 01       	movw	r24, r2
    2c80:	81 70       	andi	r24, 0x01	; 1
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	89 2b       	or	r24, r25
    2c86:	e9 f0       	breq	.+58     	; 0x2cc2 <__mulsf3+0xf4>
    2c88:	e6 0c       	add	r14, r6
    2c8a:	f7 1c       	adc	r15, r7
    2c8c:	08 1d       	adc	r16, r8
    2c8e:	19 1d       	adc	r17, r9
    2c90:	9a 01       	movw	r18, r20
    2c92:	ab 01       	movw	r20, r22
    2c94:	2a 0d       	add	r18, r10
    2c96:	3b 1d       	adc	r19, r11
    2c98:	4c 1d       	adc	r20, r12
    2c9a:	5d 1d       	adc	r21, r13
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e0       	ldi	r26, 0x00	; 0
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e6 14       	cp	r14, r6
    2ca6:	f7 04       	cpc	r15, r7
    2ca8:	08 05       	cpc	r16, r8
    2caa:	19 05       	cpc	r17, r9
    2cac:	20 f4       	brcc	.+8      	; 0x2cb6 <__mulsf3+0xe8>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a0 e0       	ldi	r26, 0x00	; 0
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	ba 01       	movw	r22, r20
    2cb8:	a9 01       	movw	r20, r18
    2cba:	48 0f       	add	r20, r24
    2cbc:	59 1f       	adc	r21, r25
    2cbe:	6a 1f       	adc	r22, r26
    2cc0:	7b 1f       	adc	r23, r27
    2cc2:	aa 0c       	add	r10, r10
    2cc4:	bb 1c       	adc	r11, r11
    2cc6:	cc 1c       	adc	r12, r12
    2cc8:	dd 1c       	adc	r13, r13
    2cca:	97 fe       	sbrs	r9, 7
    2ccc:	08 c0       	rjmp	.+16     	; 0x2cde <__mulsf3+0x110>
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a0 e0       	ldi	r26, 0x00	; 0
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	a8 2a       	or	r10, r24
    2cd8:	b9 2a       	or	r11, r25
    2cda:	ca 2a       	or	r12, r26
    2cdc:	db 2a       	or	r13, r27
    2cde:	31 96       	adiw	r30, 0x01	; 1
    2ce0:	e0 32       	cpi	r30, 0x20	; 32
    2ce2:	f1 05       	cpc	r31, r1
    2ce4:	49 f0       	breq	.+18     	; 0x2cf8 <__mulsf3+0x12a>
    2ce6:	66 0c       	add	r6, r6
    2ce8:	77 1c       	adc	r7, r7
    2cea:	88 1c       	adc	r8, r8
    2cec:	99 1c       	adc	r9, r9
    2cee:	56 94       	lsr	r5
    2cf0:	47 94       	ror	r4
    2cf2:	37 94       	ror	r3
    2cf4:	27 94       	ror	r2
    2cf6:	c3 cf       	rjmp	.-122    	; 0x2c7e <__mulsf3+0xb0>
    2cf8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cfa:	ea 89       	ldd	r30, Y+18	; 0x12
    2cfc:	2b 89       	ldd	r18, Y+19	; 0x13
    2cfe:	3c 89       	ldd	r19, Y+20	; 0x14
    2d00:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d02:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d04:	28 0f       	add	r18, r24
    2d06:	39 1f       	adc	r19, r25
    2d08:	2e 5f       	subi	r18, 0xFE	; 254
    2d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0c:	17 c0       	rjmp	.+46     	; 0x2d3c <__mulsf3+0x16e>
    2d0e:	ca 01       	movw	r24, r20
    2d10:	81 70       	andi	r24, 0x01	; 1
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	89 2b       	or	r24, r25
    2d16:	61 f0       	breq	.+24     	; 0x2d30 <__mulsf3+0x162>
    2d18:	16 95       	lsr	r17
    2d1a:	07 95       	ror	r16
    2d1c:	f7 94       	ror	r15
    2d1e:	e7 94       	ror	r14
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e8       	ldi	r27, 0x80	; 128
    2d28:	e8 2a       	or	r14, r24
    2d2a:	f9 2a       	or	r15, r25
    2d2c:	0a 2b       	or	r16, r26
    2d2e:	1b 2b       	or	r17, r27
    2d30:	76 95       	lsr	r23
    2d32:	67 95       	ror	r22
    2d34:	57 95       	ror	r21
    2d36:	47 95       	ror	r20
    2d38:	2f 5f       	subi	r18, 0xFF	; 255
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	77 fd       	sbrc	r23, 7
    2d3e:	e7 cf       	rjmp	.-50     	; 0x2d0e <__mulsf3+0x140>
    2d40:	0c c0       	rjmp	.+24     	; 0x2d5a <__mulsf3+0x18c>
    2d42:	44 0f       	add	r20, r20
    2d44:	55 1f       	adc	r21, r21
    2d46:	66 1f       	adc	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	17 fd       	sbrc	r17, 7
    2d4c:	41 60       	ori	r20, 0x01	; 1
    2d4e:	ee 0c       	add	r14, r14
    2d50:	ff 1c       	adc	r15, r15
    2d52:	00 1f       	adc	r16, r16
    2d54:	11 1f       	adc	r17, r17
    2d56:	21 50       	subi	r18, 0x01	; 1
    2d58:	30 40       	sbci	r19, 0x00	; 0
    2d5a:	40 30       	cpi	r20, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	59 07       	cpc	r21, r25
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	69 07       	cpc	r22, r25
    2d64:	90 e4       	ldi	r25, 0x40	; 64
    2d66:	79 07       	cpc	r23, r25
    2d68:	60 f3       	brcs	.-40     	; 0x2d42 <__mulsf3+0x174>
    2d6a:	2b 8f       	std	Y+27, r18	; 0x1b
    2d6c:	3c 8f       	std	Y+28, r19	; 0x1c
    2d6e:	db 01       	movw	r26, r22
    2d70:	ca 01       	movw	r24, r20
    2d72:	8f 77       	andi	r24, 0x7F	; 127
    2d74:	90 70       	andi	r25, 0x00	; 0
    2d76:	a0 70       	andi	r26, 0x00	; 0
    2d78:	b0 70       	andi	r27, 0x00	; 0
    2d7a:	80 34       	cpi	r24, 0x40	; 64
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	a1 05       	cpc	r26, r1
    2d80:	b1 05       	cpc	r27, r1
    2d82:	61 f4       	brne	.+24     	; 0x2d9c <__mulsf3+0x1ce>
    2d84:	47 fd       	sbrc	r20, 7
    2d86:	0a c0       	rjmp	.+20     	; 0x2d9c <__mulsf3+0x1ce>
    2d88:	e1 14       	cp	r14, r1
    2d8a:	f1 04       	cpc	r15, r1
    2d8c:	01 05       	cpc	r16, r1
    2d8e:	11 05       	cpc	r17, r1
    2d90:	29 f0       	breq	.+10     	; 0x2d9c <__mulsf3+0x1ce>
    2d92:	40 5c       	subi	r20, 0xC0	; 192
    2d94:	5f 4f       	sbci	r21, 0xFF	; 255
    2d96:	6f 4f       	sbci	r22, 0xFF	; 255
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	40 78       	andi	r20, 0x80	; 128
    2d9c:	1a 8e       	std	Y+26, r1	; 0x1a
    2d9e:	fe 17       	cp	r31, r30
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <__mulsf3+0x1d8>
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	8a 8f       	std	Y+26, r24	; 0x1a
    2da6:	4d 8f       	std	Y+29, r20	; 0x1d
    2da8:	5e 8f       	std	Y+30, r21	; 0x1e
    2daa:	6f 8f       	std	Y+31, r22	; 0x1f
    2dac:	78 a3       	std	Y+32, r23	; 0x20
    2dae:	83 e0       	ldi	r24, 0x03	; 3
    2db0:	89 8f       	std	Y+25, r24	; 0x19
    2db2:	ce 01       	movw	r24, r28
    2db4:	49 96       	adiw	r24, 0x19	; 25
    2db6:	0e 94 8d 18 	call	0x311a	; 0x311a <__pack_f>
    2dba:	a0 96       	adiw	r28, 0x20	; 32
    2dbc:	e2 e1       	ldi	r30, 0x12	; 18
    2dbe:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__epilogue_restores__>

00002dc2 <__gtsf2>:
    2dc2:	a8 e1       	ldi	r26, 0x18	; 24
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e7 ee       	ldi	r30, 0xE7	; 231
    2dc8:	f6 e1       	ldi	r31, 0x16	; 22
    2dca:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x18>
    2dce:	69 83       	std	Y+1, r22	; 0x01
    2dd0:	7a 83       	std	Y+2, r23	; 0x02
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	2d 83       	std	Y+5, r18	; 0x05
    2dd8:	3e 83       	std	Y+6, r19	; 0x06
    2dda:	4f 83       	std	Y+7, r20	; 0x07
    2ddc:	58 87       	std	Y+8, r21	; 0x08
    2dde:	89 e0       	ldi	r24, 0x09	; 9
    2de0:	e8 2e       	mov	r14, r24
    2de2:	f1 2c       	mov	r15, r1
    2de4:	ec 0e       	add	r14, r28
    2de6:	fd 1e       	adc	r15, r29
    2de8:	ce 01       	movw	r24, r28
    2dea:	01 96       	adiw	r24, 0x01	; 1
    2dec:	b7 01       	movw	r22, r14
    2dee:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2df2:	8e 01       	movw	r16, r28
    2df4:	0f 5e       	subi	r16, 0xEF	; 239
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	ce 01       	movw	r24, r28
    2dfa:	05 96       	adiw	r24, 0x05	; 5
    2dfc:	b8 01       	movw	r22, r16
    2dfe:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2e02:	89 85       	ldd	r24, Y+9	; 0x09
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	40 f0       	brcs	.+16     	; 0x2e18 <__gtsf2+0x56>
    2e08:	89 89       	ldd	r24, Y+17	; 0x11
    2e0a:	82 30       	cpi	r24, 0x02	; 2
    2e0c:	28 f0       	brcs	.+10     	; 0x2e18 <__gtsf2+0x56>
    2e0e:	c7 01       	movw	r24, r14
    2e10:	b8 01       	movw	r22, r16
    2e12:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__fpcmp_parts_f>
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <__gtsf2+0x58>
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	68 96       	adiw	r28, 0x18	; 24
    2e1c:	e6 e0       	ldi	r30, 0x06	; 6
    2e1e:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x18>

00002e22 <__gesf2>:
    2e22:	a8 e1       	ldi	r26, 0x18	; 24
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e7 e1       	ldi	r30, 0x17	; 23
    2e28:	f7 e1       	ldi	r31, 0x17	; 23
    2e2a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x18>
    2e2e:	69 83       	std	Y+1, r22	; 0x01
    2e30:	7a 83       	std	Y+2, r23	; 0x02
    2e32:	8b 83       	std	Y+3, r24	; 0x03
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	2d 83       	std	Y+5, r18	; 0x05
    2e38:	3e 83       	std	Y+6, r19	; 0x06
    2e3a:	4f 83       	std	Y+7, r20	; 0x07
    2e3c:	58 87       	std	Y+8, r21	; 0x08
    2e3e:	89 e0       	ldi	r24, 0x09	; 9
    2e40:	e8 2e       	mov	r14, r24
    2e42:	f1 2c       	mov	r15, r1
    2e44:	ec 0e       	add	r14, r28
    2e46:	fd 1e       	adc	r15, r29
    2e48:	ce 01       	movw	r24, r28
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	b7 01       	movw	r22, r14
    2e4e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2e52:	8e 01       	movw	r16, r28
    2e54:	0f 5e       	subi	r16, 0xEF	; 239
    2e56:	1f 4f       	sbci	r17, 0xFF	; 255
    2e58:	ce 01       	movw	r24, r28
    2e5a:	05 96       	adiw	r24, 0x05	; 5
    2e5c:	b8 01       	movw	r22, r16
    2e5e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	82 30       	cpi	r24, 0x02	; 2
    2e66:	40 f0       	brcs	.+16     	; 0x2e78 <__gesf2+0x56>
    2e68:	89 89       	ldd	r24, Y+17	; 0x11
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	28 f0       	brcs	.+10     	; 0x2e78 <__gesf2+0x56>
    2e6e:	c7 01       	movw	r24, r14
    2e70:	b8 01       	movw	r22, r16
    2e72:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__fpcmp_parts_f>
    2e76:	01 c0       	rjmp	.+2      	; 0x2e7a <__gesf2+0x58>
    2e78:	8f ef       	ldi	r24, 0xFF	; 255
    2e7a:	68 96       	adiw	r28, 0x18	; 24
    2e7c:	e6 e0       	ldi	r30, 0x06	; 6
    2e7e:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x18>

00002e82 <__ltsf2>:
    2e82:	a8 e1       	ldi	r26, 0x18	; 24
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e7 e4       	ldi	r30, 0x47	; 71
    2e88:	f7 e1       	ldi	r31, 0x17	; 23
    2e8a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x18>
    2e8e:	69 83       	std	Y+1, r22	; 0x01
    2e90:	7a 83       	std	Y+2, r23	; 0x02
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    2e94:	9c 83       	std	Y+4, r25	; 0x04
    2e96:	2d 83       	std	Y+5, r18	; 0x05
    2e98:	3e 83       	std	Y+6, r19	; 0x06
    2e9a:	4f 83       	std	Y+7, r20	; 0x07
    2e9c:	58 87       	std	Y+8, r21	; 0x08
    2e9e:	89 e0       	ldi	r24, 0x09	; 9
    2ea0:	e8 2e       	mov	r14, r24
    2ea2:	f1 2c       	mov	r15, r1
    2ea4:	ec 0e       	add	r14, r28
    2ea6:	fd 1e       	adc	r15, r29
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	b7 01       	movw	r22, r14
    2eae:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	0f 5e       	subi	r16, 0xEF	; 239
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	ce 01       	movw	r24, r28
    2eba:	05 96       	adiw	r24, 0x05	; 5
    2ebc:	b8 01       	movw	r22, r16
    2ebe:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	40 f0       	brcs	.+16     	; 0x2ed8 <__ltsf2+0x56>
    2ec8:	89 89       	ldd	r24, Y+17	; 0x11
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	28 f0       	brcs	.+10     	; 0x2ed8 <__ltsf2+0x56>
    2ece:	c7 01       	movw	r24, r14
    2ed0:	b8 01       	movw	r22, r16
    2ed2:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__fpcmp_parts_f>
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <__ltsf2+0x58>
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	68 96       	adiw	r28, 0x18	; 24
    2edc:	e6 e0       	ldi	r30, 0x06	; 6
    2ede:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x18>

00002ee2 <__fixsfsi>:
    2ee2:	ac e0       	ldi	r26, 0x0C	; 12
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e7 e7       	ldi	r30, 0x77	; 119
    2ee8:	f7 e1       	ldi	r31, 0x17	; 23
    2eea:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__prologue_saves__+0x20>
    2eee:	69 83       	std	Y+1, r22	; 0x01
    2ef0:	7a 83       	std	Y+2, r23	; 0x02
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
    2ef4:	9c 83       	std	Y+4, r25	; 0x04
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	be 01       	movw	r22, r28
    2efc:	6b 5f       	subi	r22, 0xFB	; 251
    2efe:	7f 4f       	sbci	r23, 0xFF	; 255
    2f00:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__unpack_f>
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	82 30       	cpi	r24, 0x02	; 2
    2f08:	61 f1       	breq	.+88     	; 0x2f62 <__fixsfsi+0x80>
    2f0a:	82 30       	cpi	r24, 0x02	; 2
    2f0c:	50 f1       	brcs	.+84     	; 0x2f62 <__fixsfsi+0x80>
    2f0e:	84 30       	cpi	r24, 0x04	; 4
    2f10:	21 f4       	brne	.+8      	; 0x2f1a <__fixsfsi+0x38>
    2f12:	8e 81       	ldd	r24, Y+6	; 0x06
    2f14:	88 23       	and	r24, r24
    2f16:	51 f1       	breq	.+84     	; 0x2f6c <__fixsfsi+0x8a>
    2f18:	2e c0       	rjmp	.+92     	; 0x2f76 <__fixsfsi+0x94>
    2f1a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f1c:	38 85       	ldd	r19, Y+8	; 0x08
    2f1e:	37 fd       	sbrc	r19, 7
    2f20:	20 c0       	rjmp	.+64     	; 0x2f62 <__fixsfsi+0x80>
    2f22:	6e 81       	ldd	r22, Y+6	; 0x06
    2f24:	2f 31       	cpi	r18, 0x1F	; 31
    2f26:	31 05       	cpc	r19, r1
    2f28:	1c f0       	brlt	.+6      	; 0x2f30 <__fixsfsi+0x4e>
    2f2a:	66 23       	and	r22, r22
    2f2c:	f9 f0       	breq	.+62     	; 0x2f6c <__fixsfsi+0x8a>
    2f2e:	23 c0       	rjmp	.+70     	; 0x2f76 <__fixsfsi+0x94>
    2f30:	8e e1       	ldi	r24, 0x1E	; 30
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	82 1b       	sub	r24, r18
    2f36:	93 0b       	sbc	r25, r19
    2f38:	29 85       	ldd	r18, Y+9	; 0x09
    2f3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <__fixsfsi+0x68>
    2f42:	56 95       	lsr	r21
    2f44:	47 95       	ror	r20
    2f46:	37 95       	ror	r19
    2f48:	27 95       	ror	r18
    2f4a:	8a 95       	dec	r24
    2f4c:	d2 f7       	brpl	.-12     	; 0x2f42 <__fixsfsi+0x60>
    2f4e:	66 23       	and	r22, r22
    2f50:	b1 f0       	breq	.+44     	; 0x2f7e <__fixsfsi+0x9c>
    2f52:	50 95       	com	r21
    2f54:	40 95       	com	r20
    2f56:	30 95       	com	r19
    2f58:	21 95       	neg	r18
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f60:	0e c0       	rjmp	.+28     	; 0x2f7e <__fixsfsi+0x9c>
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	09 c0       	rjmp	.+18     	; 0x2f7e <__fixsfsi+0x9c>
    2f6c:	2f ef       	ldi	r18, 0xFF	; 255
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f ef       	ldi	r20, 0xFF	; 255
    2f72:	5f e7       	ldi	r21, 0x7F	; 127
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <__fixsfsi+0x9c>
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e8       	ldi	r21, 0x80	; 128
    2f7e:	b9 01       	movw	r22, r18
    2f80:	ca 01       	movw	r24, r20
    2f82:	2c 96       	adiw	r28, 0x0c	; 12
    2f84:	e2 e0       	ldi	r30, 0x02	; 2
    2f86:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__epilogue_restores__+0x20>

00002f8a <__floatunsisf>:
    2f8a:	a8 e0       	ldi	r26, 0x08	; 8
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	eb ec       	ldi	r30, 0xCB	; 203
    2f90:	f7 e1       	ldi	r31, 0x17	; 23
    2f92:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__prologue_saves__+0x10>
    2f96:	7b 01       	movw	r14, r22
    2f98:	8c 01       	movw	r16, r24
    2f9a:	61 15       	cp	r22, r1
    2f9c:	71 05       	cpc	r23, r1
    2f9e:	81 05       	cpc	r24, r1
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	19 f4       	brne	.+6      	; 0x2faa <__floatunsisf+0x20>
    2fa4:	82 e0       	ldi	r24, 0x02	; 2
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	60 c0       	rjmp	.+192    	; 0x306a <__floatunsisf+0xe0>
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	8e e1       	ldi	r24, 0x1E	; 30
    2fb0:	c8 2e       	mov	r12, r24
    2fb2:	d1 2c       	mov	r13, r1
    2fb4:	dc 82       	std	Y+4, r13	; 0x04
    2fb6:	cb 82       	std	Y+3, r12	; 0x03
    2fb8:	ed 82       	std	Y+5, r14	; 0x05
    2fba:	fe 82       	std	Y+6, r15	; 0x06
    2fbc:	0f 83       	std	Y+7, r16	; 0x07
    2fbe:	18 87       	std	Y+8, r17	; 0x08
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	b7 01       	movw	r22, r14
    2fc4:	0e 94 3e 18 	call	0x307c	; 0x307c <__clzsi2>
    2fc8:	fc 01       	movw	r30, r24
    2fca:	31 97       	sbiw	r30, 0x01	; 1
    2fcc:	f7 ff       	sbrs	r31, 7
    2fce:	3b c0       	rjmp	.+118    	; 0x3046 <__floatunsisf+0xbc>
    2fd0:	22 27       	eor	r18, r18
    2fd2:	33 27       	eor	r19, r19
    2fd4:	2e 1b       	sub	r18, r30
    2fd6:	3f 0b       	sbc	r19, r31
    2fd8:	57 01       	movw	r10, r14
    2fda:	68 01       	movw	r12, r16
    2fdc:	02 2e       	mov	r0, r18
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <__floatunsisf+0x5e>
    2fe0:	d6 94       	lsr	r13
    2fe2:	c7 94       	ror	r12
    2fe4:	b7 94       	ror	r11
    2fe6:	a7 94       	ror	r10
    2fe8:	0a 94       	dec	r0
    2fea:	d2 f7       	brpl	.-12     	; 0x2fe0 <__floatunsisf+0x56>
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	a0 e0       	ldi	r26, 0x00	; 0
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <__floatunsisf+0x7c>
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	aa 1f       	adc	r26, r26
    3004:	bb 1f       	adc	r27, r27
    3006:	2a 95       	dec	r18
    3008:	d2 f7       	brpl	.-12     	; 0x2ffe <__floatunsisf+0x74>
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	a1 09       	sbc	r26, r1
    300e:	b1 09       	sbc	r27, r1
    3010:	8e 21       	and	r24, r14
    3012:	9f 21       	and	r25, r15
    3014:	a0 23       	and	r26, r16
    3016:	b1 23       	and	r27, r17
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	a1 05       	cpc	r26, r1
    301c:	b1 05       	cpc	r27, r1
    301e:	21 f0       	breq	.+8      	; 0x3028 <__floatunsisf+0x9e>
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	4a 29       	or	r20, r10
    302a:	5b 29       	or	r21, r11
    302c:	6c 29       	or	r22, r12
    302e:	7d 29       	or	r23, r13
    3030:	4d 83       	std	Y+5, r20	; 0x05
    3032:	5e 83       	std	Y+6, r21	; 0x06
    3034:	6f 83       	std	Y+7, r22	; 0x07
    3036:	78 87       	std	Y+8, r23	; 0x08
    3038:	8e e1       	ldi	r24, 0x1E	; 30
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	8e 1b       	sub	r24, r30
    303e:	9f 0b       	sbc	r25, r31
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
    3044:	12 c0       	rjmp	.+36     	; 0x306a <__floatunsisf+0xe0>
    3046:	30 97       	sbiw	r30, 0x00	; 0
    3048:	81 f0       	breq	.+32     	; 0x306a <__floatunsisf+0xe0>
    304a:	0e 2e       	mov	r0, r30
    304c:	04 c0       	rjmp	.+8      	; 0x3056 <__floatunsisf+0xcc>
    304e:	ee 0c       	add	r14, r14
    3050:	ff 1c       	adc	r15, r15
    3052:	00 1f       	adc	r16, r16
    3054:	11 1f       	adc	r17, r17
    3056:	0a 94       	dec	r0
    3058:	d2 f7       	brpl	.-12     	; 0x304e <__floatunsisf+0xc4>
    305a:	ed 82       	std	Y+5, r14	; 0x05
    305c:	fe 82       	std	Y+6, r15	; 0x06
    305e:	0f 83       	std	Y+7, r16	; 0x07
    3060:	18 87       	std	Y+8, r17	; 0x08
    3062:	ce 1a       	sub	r12, r30
    3064:	df 0a       	sbc	r13, r31
    3066:	dc 82       	std	Y+4, r13	; 0x04
    3068:	cb 82       	std	Y+3, r12	; 0x03
    306a:	1a 82       	std	Y+2, r1	; 0x02
    306c:	ce 01       	movw	r24, r28
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	0e 94 8d 18 	call	0x311a	; 0x311a <__pack_f>
    3074:	28 96       	adiw	r28, 0x08	; 8
    3076:	ea e0       	ldi	r30, 0x0A	; 10
    3078:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <__epilogue_restores__+0x10>

0000307c <__clzsi2>:
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	7b 01       	movw	r14, r22
    3086:	8c 01       	movw	r16, r24
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	e8 16       	cp	r14, r24
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	f8 06       	cpc	r15, r24
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	08 07       	cpc	r16, r24
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	18 07       	cpc	r17, r24
    3098:	88 f4       	brcc	.+34     	; 0x30bc <__clzsi2+0x40>
    309a:	8f ef       	ldi	r24, 0xFF	; 255
    309c:	e8 16       	cp	r14, r24
    309e:	f1 04       	cpc	r15, r1
    30a0:	01 05       	cpc	r16, r1
    30a2:	11 05       	cpc	r17, r1
    30a4:	31 f0       	breq	.+12     	; 0x30b2 <__clzsi2+0x36>
    30a6:	28 f0       	brcs	.+10     	; 0x30b2 <__clzsi2+0x36>
    30a8:	88 e0       	ldi	r24, 0x08	; 8
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a0 e0       	ldi	r26, 0x00	; 0
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	17 c0       	rjmp	.+46     	; 0x30e0 <__clzsi2+0x64>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	12 c0       	rjmp	.+36     	; 0x30e0 <__clzsi2+0x64>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	e8 16       	cp	r14, r24
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	f8 06       	cpc	r15, r24
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	08 07       	cpc	r16, r24
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	18 07       	cpc	r17, r24
    30cc:	28 f0       	brcs	.+10     	; 0x30d8 <__clzsi2+0x5c>
    30ce:	88 e1       	ldi	r24, 0x18	; 24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	04 c0       	rjmp	.+8      	; 0x30e0 <__clzsi2+0x64>
    30d8:	80 e1       	ldi	r24, 0x10	; 16
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	20 e2       	ldi	r18, 0x20	; 32
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	28 1b       	sub	r18, r24
    30ea:	39 0b       	sbc	r19, r25
    30ec:	4a 0b       	sbc	r20, r26
    30ee:	5b 0b       	sbc	r21, r27
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <__clzsi2+0x7e>
    30f2:	16 95       	lsr	r17
    30f4:	07 95       	ror	r16
    30f6:	f7 94       	ror	r15
    30f8:	e7 94       	ror	r14
    30fa:	8a 95       	dec	r24
    30fc:	d2 f7       	brpl	.-12     	; 0x30f2 <__clzsi2+0x76>
    30fe:	f7 01       	movw	r30, r14
    3100:	e1 5f       	subi	r30, 0xF1	; 241
    3102:	fb 4f       	sbci	r31, 0xFB	; 251
    3104:	80 81       	ld	r24, Z
    3106:	28 1b       	sub	r18, r24
    3108:	31 09       	sbc	r19, r1
    310a:	41 09       	sbc	r20, r1
    310c:	51 09       	sbc	r21, r1
    310e:	c9 01       	movw	r24, r18
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	08 95       	ret

0000311a <__pack_f>:
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	fc 01       	movw	r30, r24
    3126:	e4 80       	ldd	r14, Z+4	; 0x04
    3128:	f5 80       	ldd	r15, Z+5	; 0x05
    312a:	06 81       	ldd	r16, Z+6	; 0x06
    312c:	17 81       	ldd	r17, Z+7	; 0x07
    312e:	d1 80       	ldd	r13, Z+1	; 0x01
    3130:	80 81       	ld	r24, Z
    3132:	82 30       	cpi	r24, 0x02	; 2
    3134:	48 f4       	brcc	.+18     	; 0x3148 <__pack_f+0x2e>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e1       	ldi	r26, 0x10	; 16
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e8 2a       	or	r14, r24
    3140:	f9 2a       	or	r15, r25
    3142:	0a 2b       	or	r16, r26
    3144:	1b 2b       	or	r17, r27
    3146:	a5 c0       	rjmp	.+330    	; 0x3292 <__pack_f+0x178>
    3148:	84 30       	cpi	r24, 0x04	; 4
    314a:	09 f4       	brne	.+2      	; 0x314e <__pack_f+0x34>
    314c:	9f c0       	rjmp	.+318    	; 0x328c <__pack_f+0x172>
    314e:	82 30       	cpi	r24, 0x02	; 2
    3150:	21 f4       	brne	.+8      	; 0x315a <__pack_f+0x40>
    3152:	ee 24       	eor	r14, r14
    3154:	ff 24       	eor	r15, r15
    3156:	87 01       	movw	r16, r14
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <__pack_f+0x4a>
    315a:	e1 14       	cp	r14, r1
    315c:	f1 04       	cpc	r15, r1
    315e:	01 05       	cpc	r16, r1
    3160:	11 05       	cpc	r17, r1
    3162:	19 f4       	brne	.+6      	; 0x316a <__pack_f+0x50>
    3164:	e0 e0       	ldi	r30, 0x00	; 0
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	96 c0       	rjmp	.+300    	; 0x3296 <__pack_f+0x17c>
    316a:	62 81       	ldd	r22, Z+2	; 0x02
    316c:	73 81       	ldd	r23, Z+3	; 0x03
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	62 38       	cpi	r22, 0x82	; 130
    3172:	79 07       	cpc	r23, r25
    3174:	0c f0       	brlt	.+2      	; 0x3178 <__pack_f+0x5e>
    3176:	5b c0       	rjmp	.+182    	; 0x322e <__pack_f+0x114>
    3178:	22 e8       	ldi	r18, 0x82	; 130
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	26 1b       	sub	r18, r22
    317e:	37 0b       	sbc	r19, r23
    3180:	2a 31       	cpi	r18, 0x1A	; 26
    3182:	31 05       	cpc	r19, r1
    3184:	2c f0       	brlt	.+10     	; 0x3190 <__pack_f+0x76>
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	2a c0       	rjmp	.+84     	; 0x31e4 <__pack_f+0xca>
    3190:	b8 01       	movw	r22, r16
    3192:	a7 01       	movw	r20, r14
    3194:	02 2e       	mov	r0, r18
    3196:	04 c0       	rjmp	.+8      	; 0x31a0 <__pack_f+0x86>
    3198:	76 95       	lsr	r23
    319a:	67 95       	ror	r22
    319c:	57 95       	ror	r21
    319e:	47 95       	ror	r20
    31a0:	0a 94       	dec	r0
    31a2:	d2 f7       	brpl	.-12     	; 0x3198 <__pack_f+0x7e>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	a0 e0       	ldi	r26, 0x00	; 0
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	04 c0       	rjmp	.+8      	; 0x31b6 <__pack_f+0x9c>
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	aa 1f       	adc	r26, r26
    31b4:	bb 1f       	adc	r27, r27
    31b6:	2a 95       	dec	r18
    31b8:	d2 f7       	brpl	.-12     	; 0x31ae <__pack_f+0x94>
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	a1 09       	sbc	r26, r1
    31be:	b1 09       	sbc	r27, r1
    31c0:	8e 21       	and	r24, r14
    31c2:	9f 21       	and	r25, r15
    31c4:	a0 23       	and	r26, r16
    31c6:	b1 23       	and	r27, r17
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	a1 05       	cpc	r26, r1
    31cc:	b1 05       	cpc	r27, r1
    31ce:	21 f0       	breq	.+8      	; 0x31d8 <__pack_f+0xbe>
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e0       	ldi	r26, 0x00	; 0
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	9a 01       	movw	r18, r20
    31da:	ab 01       	movw	r20, r22
    31dc:	28 2b       	or	r18, r24
    31de:	39 2b       	or	r19, r25
    31e0:	4a 2b       	or	r20, r26
    31e2:	5b 2b       	or	r21, r27
    31e4:	da 01       	movw	r26, r20
    31e6:	c9 01       	movw	r24, r18
    31e8:	8f 77       	andi	r24, 0x7F	; 127
    31ea:	90 70       	andi	r25, 0x00	; 0
    31ec:	a0 70       	andi	r26, 0x00	; 0
    31ee:	b0 70       	andi	r27, 0x00	; 0
    31f0:	80 34       	cpi	r24, 0x40	; 64
    31f2:	91 05       	cpc	r25, r1
    31f4:	a1 05       	cpc	r26, r1
    31f6:	b1 05       	cpc	r27, r1
    31f8:	39 f4       	brne	.+14     	; 0x3208 <__pack_f+0xee>
    31fa:	27 ff       	sbrs	r18, 7
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <__pack_f+0xf6>
    31fe:	20 5c       	subi	r18, 0xC0	; 192
    3200:	3f 4f       	sbci	r19, 0xFF	; 255
    3202:	4f 4f       	sbci	r20, 0xFF	; 255
    3204:	5f 4f       	sbci	r21, 0xFF	; 255
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <__pack_f+0xf6>
    3208:	21 5c       	subi	r18, 0xC1	; 193
    320a:	3f 4f       	sbci	r19, 0xFF	; 255
    320c:	4f 4f       	sbci	r20, 0xFF	; 255
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	e0 e0       	ldi	r30, 0x00	; 0
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	20 30       	cpi	r18, 0x00	; 0
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	3a 07       	cpc	r19, r26
    321a:	a0 e0       	ldi	r26, 0x00	; 0
    321c:	4a 07       	cpc	r20, r26
    321e:	a0 e4       	ldi	r26, 0x40	; 64
    3220:	5a 07       	cpc	r21, r26
    3222:	10 f0       	brcs	.+4      	; 0x3228 <__pack_f+0x10e>
    3224:	e1 e0       	ldi	r30, 0x01	; 1
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	79 01       	movw	r14, r18
    322a:	8a 01       	movw	r16, r20
    322c:	27 c0       	rjmp	.+78     	; 0x327c <__pack_f+0x162>
    322e:	60 38       	cpi	r22, 0x80	; 128
    3230:	71 05       	cpc	r23, r1
    3232:	64 f5       	brge	.+88     	; 0x328c <__pack_f+0x172>
    3234:	fb 01       	movw	r30, r22
    3236:	e1 58       	subi	r30, 0x81	; 129
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	d8 01       	movw	r26, r16
    323c:	c7 01       	movw	r24, r14
    323e:	8f 77       	andi	r24, 0x7F	; 127
    3240:	90 70       	andi	r25, 0x00	; 0
    3242:	a0 70       	andi	r26, 0x00	; 0
    3244:	b0 70       	andi	r27, 0x00	; 0
    3246:	80 34       	cpi	r24, 0x40	; 64
    3248:	91 05       	cpc	r25, r1
    324a:	a1 05       	cpc	r26, r1
    324c:	b1 05       	cpc	r27, r1
    324e:	39 f4       	brne	.+14     	; 0x325e <__pack_f+0x144>
    3250:	e7 fe       	sbrs	r14, 7
    3252:	0d c0       	rjmp	.+26     	; 0x326e <__pack_f+0x154>
    3254:	80 e4       	ldi	r24, 0x40	; 64
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a0 e0       	ldi	r26, 0x00	; 0
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	04 c0       	rjmp	.+8      	; 0x3266 <__pack_f+0x14c>
    325e:	8f e3       	ldi	r24, 0x3F	; 63
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	a0 e0       	ldi	r26, 0x00	; 0
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e8 0e       	add	r14, r24
    3268:	f9 1e       	adc	r15, r25
    326a:	0a 1f       	adc	r16, r26
    326c:	1b 1f       	adc	r17, r27
    326e:	17 ff       	sbrs	r17, 7
    3270:	05 c0       	rjmp	.+10     	; 0x327c <__pack_f+0x162>
    3272:	16 95       	lsr	r17
    3274:	07 95       	ror	r16
    3276:	f7 94       	ror	r15
    3278:	e7 94       	ror	r14
    327a:	31 96       	adiw	r30, 0x01	; 1
    327c:	87 e0       	ldi	r24, 0x07	; 7
    327e:	16 95       	lsr	r17
    3280:	07 95       	ror	r16
    3282:	f7 94       	ror	r15
    3284:	e7 94       	ror	r14
    3286:	8a 95       	dec	r24
    3288:	d1 f7       	brne	.-12     	; 0x327e <__pack_f+0x164>
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <__pack_f+0x17c>
    328c:	ee 24       	eor	r14, r14
    328e:	ff 24       	eor	r15, r15
    3290:	87 01       	movw	r16, r14
    3292:	ef ef       	ldi	r30, 0xFF	; 255
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	6e 2f       	mov	r22, r30
    3298:	67 95       	ror	r22
    329a:	66 27       	eor	r22, r22
    329c:	67 95       	ror	r22
    329e:	90 2f       	mov	r25, r16
    32a0:	9f 77       	andi	r25, 0x7F	; 127
    32a2:	d7 94       	ror	r13
    32a4:	dd 24       	eor	r13, r13
    32a6:	d7 94       	ror	r13
    32a8:	8e 2f       	mov	r24, r30
    32aa:	86 95       	lsr	r24
    32ac:	49 2f       	mov	r20, r25
    32ae:	46 2b       	or	r20, r22
    32b0:	58 2f       	mov	r21, r24
    32b2:	5d 29       	or	r21, r13
    32b4:	b7 01       	movw	r22, r14
    32b6:	ca 01       	movw	r24, r20
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	08 95       	ret

000032c4 <__unpack_f>:
    32c4:	fc 01       	movw	r30, r24
    32c6:	db 01       	movw	r26, r22
    32c8:	40 81       	ld	r20, Z
    32ca:	51 81       	ldd	r21, Z+1	; 0x01
    32cc:	22 81       	ldd	r18, Z+2	; 0x02
    32ce:	62 2f       	mov	r22, r18
    32d0:	6f 77       	andi	r22, 0x7F	; 127
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	22 1f       	adc	r18, r18
    32d6:	22 27       	eor	r18, r18
    32d8:	22 1f       	adc	r18, r18
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	89 2f       	mov	r24, r25
    32de:	88 0f       	add	r24, r24
    32e0:	82 2b       	or	r24, r18
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	99 1f       	adc	r25, r25
    32e8:	99 27       	eor	r25, r25
    32ea:	99 1f       	adc	r25, r25
    32ec:	11 96       	adiw	r26, 0x01	; 1
    32ee:	9c 93       	st	X, r25
    32f0:	11 97       	sbiw	r26, 0x01	; 1
    32f2:	21 15       	cp	r18, r1
    32f4:	31 05       	cpc	r19, r1
    32f6:	a9 f5       	brne	.+106    	; 0x3362 <__unpack_f+0x9e>
    32f8:	41 15       	cp	r20, r1
    32fa:	51 05       	cpc	r21, r1
    32fc:	61 05       	cpc	r22, r1
    32fe:	71 05       	cpc	r23, r1
    3300:	11 f4       	brne	.+4      	; 0x3306 <__unpack_f+0x42>
    3302:	82 e0       	ldi	r24, 0x02	; 2
    3304:	37 c0       	rjmp	.+110    	; 0x3374 <__unpack_f+0xb0>
    3306:	82 e8       	ldi	r24, 0x82	; 130
    3308:	9f ef       	ldi	r25, 0xFF	; 255
    330a:	13 96       	adiw	r26, 0x03	; 3
    330c:	9c 93       	st	X, r25
    330e:	8e 93       	st	-X, r24
    3310:	12 97       	sbiw	r26, 0x02	; 2
    3312:	9a 01       	movw	r18, r20
    3314:	ab 01       	movw	r20, r22
    3316:	67 e0       	ldi	r22, 0x07	; 7
    3318:	22 0f       	add	r18, r18
    331a:	33 1f       	adc	r19, r19
    331c:	44 1f       	adc	r20, r20
    331e:	55 1f       	adc	r21, r21
    3320:	6a 95       	dec	r22
    3322:	d1 f7       	brne	.-12     	; 0x3318 <__unpack_f+0x54>
    3324:	83 e0       	ldi	r24, 0x03	; 3
    3326:	8c 93       	st	X, r24
    3328:	0d c0       	rjmp	.+26     	; 0x3344 <__unpack_f+0x80>
    332a:	22 0f       	add	r18, r18
    332c:	33 1f       	adc	r19, r19
    332e:	44 1f       	adc	r20, r20
    3330:	55 1f       	adc	r21, r21
    3332:	12 96       	adiw	r26, 0x02	; 2
    3334:	8d 91       	ld	r24, X+
    3336:	9c 91       	ld	r25, X
    3338:	13 97       	sbiw	r26, 0x03	; 3
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	13 96       	adiw	r26, 0x03	; 3
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
    3342:	12 97       	sbiw	r26, 0x02	; 2
    3344:	20 30       	cpi	r18, 0x00	; 0
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	38 07       	cpc	r19, r24
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	48 07       	cpc	r20, r24
    334e:	80 e4       	ldi	r24, 0x40	; 64
    3350:	58 07       	cpc	r21, r24
    3352:	58 f3       	brcs	.-42     	; 0x332a <__unpack_f+0x66>
    3354:	14 96       	adiw	r26, 0x04	; 4
    3356:	2d 93       	st	X+, r18
    3358:	3d 93       	st	X+, r19
    335a:	4d 93       	st	X+, r20
    335c:	5c 93       	st	X, r21
    335e:	17 97       	sbiw	r26, 0x07	; 7
    3360:	08 95       	ret
    3362:	2f 3f       	cpi	r18, 0xFF	; 255
    3364:	31 05       	cpc	r19, r1
    3366:	79 f4       	brne	.+30     	; 0x3386 <__unpack_f+0xc2>
    3368:	41 15       	cp	r20, r1
    336a:	51 05       	cpc	r21, r1
    336c:	61 05       	cpc	r22, r1
    336e:	71 05       	cpc	r23, r1
    3370:	19 f4       	brne	.+6      	; 0x3378 <__unpack_f+0xb4>
    3372:	84 e0       	ldi	r24, 0x04	; 4
    3374:	8c 93       	st	X, r24
    3376:	08 95       	ret
    3378:	64 ff       	sbrs	r22, 4
    337a:	03 c0       	rjmp	.+6      	; 0x3382 <__unpack_f+0xbe>
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	8c 93       	st	X, r24
    3380:	12 c0       	rjmp	.+36     	; 0x33a6 <__unpack_f+0xe2>
    3382:	1c 92       	st	X, r1
    3384:	10 c0       	rjmp	.+32     	; 0x33a6 <__unpack_f+0xe2>
    3386:	2f 57       	subi	r18, 0x7F	; 127
    3388:	30 40       	sbci	r19, 0x00	; 0
    338a:	13 96       	adiw	r26, 0x03	; 3
    338c:	3c 93       	st	X, r19
    338e:	2e 93       	st	-X, r18
    3390:	12 97       	sbiw	r26, 0x02	; 2
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	8c 93       	st	X, r24
    3396:	87 e0       	ldi	r24, 0x07	; 7
    3398:	44 0f       	add	r20, r20
    339a:	55 1f       	adc	r21, r21
    339c:	66 1f       	adc	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	8a 95       	dec	r24
    33a2:	d1 f7       	brne	.-12     	; 0x3398 <__unpack_f+0xd4>
    33a4:	70 64       	ori	r23, 0x40	; 64
    33a6:	14 96       	adiw	r26, 0x04	; 4
    33a8:	4d 93       	st	X+, r20
    33aa:	5d 93       	st	X+, r21
    33ac:	6d 93       	st	X+, r22
    33ae:	7c 93       	st	X, r23
    33b0:	17 97       	sbiw	r26, 0x07	; 7
    33b2:	08 95       	ret

000033b4 <__fpcmp_parts_f>:
    33b4:	1f 93       	push	r17
    33b6:	dc 01       	movw	r26, r24
    33b8:	fb 01       	movw	r30, r22
    33ba:	9c 91       	ld	r25, X
    33bc:	92 30       	cpi	r25, 0x02	; 2
    33be:	08 f4       	brcc	.+2      	; 0x33c2 <__fpcmp_parts_f+0xe>
    33c0:	47 c0       	rjmp	.+142    	; 0x3450 <__fpcmp_parts_f+0x9c>
    33c2:	80 81       	ld	r24, Z
    33c4:	82 30       	cpi	r24, 0x02	; 2
    33c6:	08 f4       	brcc	.+2      	; 0x33ca <__fpcmp_parts_f+0x16>
    33c8:	43 c0       	rjmp	.+134    	; 0x3450 <__fpcmp_parts_f+0x9c>
    33ca:	94 30       	cpi	r25, 0x04	; 4
    33cc:	51 f4       	brne	.+20     	; 0x33e2 <__fpcmp_parts_f+0x2e>
    33ce:	11 96       	adiw	r26, 0x01	; 1
    33d0:	1c 91       	ld	r17, X
    33d2:	84 30       	cpi	r24, 0x04	; 4
    33d4:	99 f5       	brne	.+102    	; 0x343c <__fpcmp_parts_f+0x88>
    33d6:	81 81       	ldd	r24, Z+1	; 0x01
    33d8:	68 2f       	mov	r22, r24
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	61 1b       	sub	r22, r17
    33de:	71 09       	sbc	r23, r1
    33e0:	3f c0       	rjmp	.+126    	; 0x3460 <__fpcmp_parts_f+0xac>
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	21 f0       	breq	.+8      	; 0x33ee <__fpcmp_parts_f+0x3a>
    33e6:	92 30       	cpi	r25, 0x02	; 2
    33e8:	31 f4       	brne	.+12     	; 0x33f6 <__fpcmp_parts_f+0x42>
    33ea:	82 30       	cpi	r24, 0x02	; 2
    33ec:	b9 f1       	breq	.+110    	; 0x345c <__fpcmp_parts_f+0xa8>
    33ee:	81 81       	ldd	r24, Z+1	; 0x01
    33f0:	88 23       	and	r24, r24
    33f2:	89 f1       	breq	.+98     	; 0x3456 <__fpcmp_parts_f+0xa2>
    33f4:	2d c0       	rjmp	.+90     	; 0x3450 <__fpcmp_parts_f+0x9c>
    33f6:	11 96       	adiw	r26, 0x01	; 1
    33f8:	1c 91       	ld	r17, X
    33fa:	11 97       	sbiw	r26, 0x01	; 1
    33fc:	82 30       	cpi	r24, 0x02	; 2
    33fe:	f1 f0       	breq	.+60     	; 0x343c <__fpcmp_parts_f+0x88>
    3400:	81 81       	ldd	r24, Z+1	; 0x01
    3402:	18 17       	cp	r17, r24
    3404:	d9 f4       	brne	.+54     	; 0x343c <__fpcmp_parts_f+0x88>
    3406:	12 96       	adiw	r26, 0x02	; 2
    3408:	2d 91       	ld	r18, X+
    340a:	3c 91       	ld	r19, X
    340c:	13 97       	sbiw	r26, 0x03	; 3
    340e:	82 81       	ldd	r24, Z+2	; 0x02
    3410:	93 81       	ldd	r25, Z+3	; 0x03
    3412:	82 17       	cp	r24, r18
    3414:	93 07       	cpc	r25, r19
    3416:	94 f0       	brlt	.+36     	; 0x343c <__fpcmp_parts_f+0x88>
    3418:	28 17       	cp	r18, r24
    341a:	39 07       	cpc	r19, r25
    341c:	bc f0       	brlt	.+46     	; 0x344c <__fpcmp_parts_f+0x98>
    341e:	14 96       	adiw	r26, 0x04	; 4
    3420:	8d 91       	ld	r24, X+
    3422:	9d 91       	ld	r25, X+
    3424:	0d 90       	ld	r0, X+
    3426:	bc 91       	ld	r27, X
    3428:	a0 2d       	mov	r26, r0
    342a:	24 81       	ldd	r18, Z+4	; 0x04
    342c:	35 81       	ldd	r19, Z+5	; 0x05
    342e:	46 81       	ldd	r20, Z+6	; 0x06
    3430:	57 81       	ldd	r21, Z+7	; 0x07
    3432:	28 17       	cp	r18, r24
    3434:	39 07       	cpc	r19, r25
    3436:	4a 07       	cpc	r20, r26
    3438:	5b 07       	cpc	r21, r27
    343a:	18 f4       	brcc	.+6      	; 0x3442 <__fpcmp_parts_f+0x8e>
    343c:	11 23       	and	r17, r17
    343e:	41 f0       	breq	.+16     	; 0x3450 <__fpcmp_parts_f+0x9c>
    3440:	0a c0       	rjmp	.+20     	; 0x3456 <__fpcmp_parts_f+0xa2>
    3442:	82 17       	cp	r24, r18
    3444:	93 07       	cpc	r25, r19
    3446:	a4 07       	cpc	r26, r20
    3448:	b5 07       	cpc	r27, r21
    344a:	40 f4       	brcc	.+16     	; 0x345c <__fpcmp_parts_f+0xa8>
    344c:	11 23       	and	r17, r17
    344e:	19 f0       	breq	.+6      	; 0x3456 <__fpcmp_parts_f+0xa2>
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	05 c0       	rjmp	.+10     	; 0x3460 <__fpcmp_parts_f+0xac>
    3456:	6f ef       	ldi	r22, 0xFF	; 255
    3458:	7f ef       	ldi	r23, 0xFF	; 255
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <__fpcmp_parts_f+0xac>
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	cb 01       	movw	r24, r22
    3462:	1f 91       	pop	r17
    3464:	08 95       	ret

00003466 <__udivmodhi4>:
    3466:	aa 1b       	sub	r26, r26
    3468:	bb 1b       	sub	r27, r27
    346a:	51 e1       	ldi	r21, 0x11	; 17
    346c:	07 c0       	rjmp	.+14     	; 0x347c <__udivmodhi4_ep>

0000346e <__udivmodhi4_loop>:
    346e:	aa 1f       	adc	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	a6 17       	cp	r26, r22
    3474:	b7 07       	cpc	r27, r23
    3476:	10 f0       	brcs	.+4      	; 0x347c <__udivmodhi4_ep>
    3478:	a6 1b       	sub	r26, r22
    347a:	b7 0b       	sbc	r27, r23

0000347c <__udivmodhi4_ep>:
    347c:	88 1f       	adc	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	5a 95       	dec	r21
    3482:	a9 f7       	brne	.-22     	; 0x346e <__udivmodhi4_loop>
    3484:	80 95       	com	r24
    3486:	90 95       	com	r25
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	08 95       	ret

0000348e <__udivmodsi4>:
    348e:	a1 e2       	ldi	r26, 0x21	; 33
    3490:	1a 2e       	mov	r1, r26
    3492:	aa 1b       	sub	r26, r26
    3494:	bb 1b       	sub	r27, r27
    3496:	fd 01       	movw	r30, r26
    3498:	0d c0       	rjmp	.+26     	; 0x34b4 <__udivmodsi4_ep>

0000349a <__udivmodsi4_loop>:
    349a:	aa 1f       	adc	r26, r26
    349c:	bb 1f       	adc	r27, r27
    349e:	ee 1f       	adc	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	a2 17       	cp	r26, r18
    34a4:	b3 07       	cpc	r27, r19
    34a6:	e4 07       	cpc	r30, r20
    34a8:	f5 07       	cpc	r31, r21
    34aa:	20 f0       	brcs	.+8      	; 0x34b4 <__udivmodsi4_ep>
    34ac:	a2 1b       	sub	r26, r18
    34ae:	b3 0b       	sbc	r27, r19
    34b0:	e4 0b       	sbc	r30, r20
    34b2:	f5 0b       	sbc	r31, r21

000034b4 <__udivmodsi4_ep>:
    34b4:	66 1f       	adc	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	1a 94       	dec	r1
    34be:	69 f7       	brne	.-38     	; 0x349a <__udivmodsi4_loop>
    34c0:	60 95       	com	r22
    34c2:	70 95       	com	r23
    34c4:	80 95       	com	r24
    34c6:	90 95       	com	r25
    34c8:	9b 01       	movw	r18, r22
    34ca:	ac 01       	movw	r20, r24
    34cc:	bd 01       	movw	r22, r26
    34ce:	cf 01       	movw	r24, r30
    34d0:	08 95       	ret

000034d2 <__divmodsi4>:
    34d2:	97 fb       	bst	r25, 7
    34d4:	09 2e       	mov	r0, r25
    34d6:	05 26       	eor	r0, r21
    34d8:	0e d0       	rcall	.+28     	; 0x34f6 <__divmodsi4_neg1>
    34da:	57 fd       	sbrc	r21, 7
    34dc:	04 d0       	rcall	.+8      	; 0x34e6 <__divmodsi4_neg2>
    34de:	d7 df       	rcall	.-82     	; 0x348e <__udivmodsi4>
    34e0:	0a d0       	rcall	.+20     	; 0x34f6 <__divmodsi4_neg1>
    34e2:	00 1c       	adc	r0, r0
    34e4:	38 f4       	brcc	.+14     	; 0x34f4 <__divmodsi4_exit>

000034e6 <__divmodsi4_neg2>:
    34e6:	50 95       	com	r21
    34e8:	40 95       	com	r20
    34ea:	30 95       	com	r19
    34ec:	21 95       	neg	r18
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	4f 4f       	sbci	r20, 0xFF	; 255
    34f2:	5f 4f       	sbci	r21, 0xFF	; 255

000034f4 <__divmodsi4_exit>:
    34f4:	08 95       	ret

000034f6 <__divmodsi4_neg1>:
    34f6:	f6 f7       	brtc	.-4      	; 0x34f4 <__divmodsi4_exit>
    34f8:	90 95       	com	r25
    34fa:	80 95       	com	r24
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	8f 4f       	sbci	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__prologue_saves__>:
    3508:	2f 92       	push	r2
    350a:	3f 92       	push	r3
    350c:	4f 92       	push	r4
    350e:	5f 92       	push	r5
    3510:	6f 92       	push	r6
    3512:	7f 92       	push	r7
    3514:	8f 92       	push	r8
    3516:	9f 92       	push	r9
    3518:	af 92       	push	r10
    351a:	bf 92       	push	r11
    351c:	cf 92       	push	r12
    351e:	df 92       	push	r13
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	ca 1b       	sub	r28, r26
    3532:	db 0b       	sbc	r29, r27
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	09 94       	ijmp

00003540 <__epilogue_restores__>:
    3540:	2a 88       	ldd	r2, Y+18	; 0x12
    3542:	39 88       	ldd	r3, Y+17	; 0x11
    3544:	48 88       	ldd	r4, Y+16	; 0x10
    3546:	5f 84       	ldd	r5, Y+15	; 0x0f
    3548:	6e 84       	ldd	r6, Y+14	; 0x0e
    354a:	7d 84       	ldd	r7, Y+13	; 0x0d
    354c:	8c 84       	ldd	r8, Y+12	; 0x0c
    354e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3550:	aa 84       	ldd	r10, Y+10	; 0x0a
    3552:	b9 84       	ldd	r11, Y+9	; 0x09
    3554:	c8 84       	ldd	r12, Y+8	; 0x08
    3556:	df 80       	ldd	r13, Y+7	; 0x07
    3558:	ee 80       	ldd	r14, Y+6	; 0x06
    355a:	fd 80       	ldd	r15, Y+5	; 0x05
    355c:	0c 81       	ldd	r16, Y+4	; 0x04
    355e:	1b 81       	ldd	r17, Y+3	; 0x03
    3560:	aa 81       	ldd	r26, Y+2	; 0x02
    3562:	b9 81       	ldd	r27, Y+1	; 0x01
    3564:	ce 0f       	add	r28, r30
    3566:	d1 1d       	adc	r29, r1
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	ed 01       	movw	r28, r26
    3574:	08 95       	ret

00003576 <_exit>:
    3576:	f8 94       	cli

00003578 <__stop_program>:
    3578:	ff cf       	rjmp	.-2      	; 0x3578 <__stop_program>
