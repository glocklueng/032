
4bit_layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  00002296  0000232a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800510  00800510  0000273a  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000603  00000000  00000000  000028da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bd7  00000000  00000000  00002edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b5  00000000  00000000  00005ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bf0  00000000  00000000  00006f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00008b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e0  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e17  00000000  00000000  0000966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__ctors_end>
       4:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
       8:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
       c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      10:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      14:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      18:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      1c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      20:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      24:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      28:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      2c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      30:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_12>
      34:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      38:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_14>
      3c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      40:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      44:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      48:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_18>
      4c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      50:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      54:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      58:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      5c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      60:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      64:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      68:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_26>
      6c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      70:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      74:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      78:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      7c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      80:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      84:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>
      88:	0c 94 3c 04 	jmp	0x878	; 0x878 <__bad_interrupt>

0000008c <daft>:
      8c:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
      9c:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
      ac:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
      bc:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
      cc:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
      dc:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
      ec:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
      fc:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     10c:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     11c:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
     12c:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     13c:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     14c:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     15c:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     16c:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     17c:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     18c:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     19c:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     1ac:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     1bc:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     1cc:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     1dc:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     1ec:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     1fc:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     20c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     21c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     22c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     23c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     24c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     25c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     26c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     27c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     28c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     29c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     2ac:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     2bc:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     2cc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     2dc:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     2ec:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     2fc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     30c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     31c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     32c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     33c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     34c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     35c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     36c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     37c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     38c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     39c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     3ac:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     3bc:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     3cc:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     3dc:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     3ec:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     3fc:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     40c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     41c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     42c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     43c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     44c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     45c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     46c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     47c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     48c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     49c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     4ac:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     4bc:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     4cc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     4dc:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     4ec:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     4fc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     50c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     51c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     52c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     53c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     54c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     55c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     56c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     57c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     58c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     59c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     5ac:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     5bc:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     5cc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     5dc:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     5ec:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     5fc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     60c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     61c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     62c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     63c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     64c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     65c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     66c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     67c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     68c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     69c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     6ac:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     6bc:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     6cc:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     6dc:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     6ec:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     6fc:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     70c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     71c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     72c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     73c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     74c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     75c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     76c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     77c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     78c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     79c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     7ac:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     7bc:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     7cc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     7dc:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     7ec:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     7fc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     80c:	90 4a 7f 80 4a 00                                   .J..J.

00000812 <led30>:
     812:	00 7f 03 1f 03 c7 03 f1 01 3f 03 4f 03 d3 03 f4     .........?.O....
     822:	00 f7 00 df 03 37 03 cd 01 f3 01 cf 03 73 03 dc     .....7.......s..
     832:	01 fc 00 fd 03 7c 03 3d                             .....|.=

0000083a <__ctors_end>:
     83a:	11 24       	eor	r1, r1
     83c:	1f be       	out	0x3f, r1	; 63
     83e:	cf ef       	ldi	r28, 0xFF	; 255
     840:	d0 e1       	ldi	r29, 0x10	; 16
     842:	de bf       	out	0x3e, r29	; 62
     844:	cd bf       	out	0x3d, r28	; 61

00000846 <__do_copy_data>:
     846:	15 e0       	ldi	r17, 0x05	; 5
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	e6 e9       	ldi	r30, 0x96	; 150
     84e:	f2 e2       	ldi	r31, 0x22	; 34
     850:	00 e0       	ldi	r16, 0x00	; 0
     852:	0b bf       	out	0x3b, r16	; 59
     854:	02 c0       	rjmp	.+4      	; 0x85a <__do_copy_data+0x14>
     856:	07 90       	elpm	r0, Z+
     858:	0d 92       	st	X+, r0
     85a:	a0 31       	cpi	r26, 0x10	; 16
     85c:	b1 07       	cpc	r27, r17
     85e:	d9 f7       	brne	.-10     	; 0x856 <__do_copy_data+0x10>

00000860 <__do_clear_bss>:
     860:	15 e0       	ldi	r17, 0x05	; 5
     862:	a0 e1       	ldi	r26, 0x10	; 16
     864:	b5 e0       	ldi	r27, 0x05	; 5
     866:	01 c0       	rjmp	.+2      	; 0x86a <.do_clear_bss_start>

00000868 <.do_clear_bss_loop>:
     868:	1d 92       	st	X+, r1

0000086a <.do_clear_bss_start>:
     86a:	a4 37       	cpi	r26, 0x74	; 116
     86c:	b1 07       	cpc	r27, r17
     86e:	e1 f7       	brne	.-8      	; 0x868 <.do_clear_bss_loop>
     870:	0e 94 38 0a 	call	0x1470	; 0x1470 <main>
     874:	0c 94 49 11 	jmp	0x2292	; 0x2292 <_exit>

00000878 <__bad_interrupt>:
     878:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000087c <read_adc>:
};


// sample an ADC channel
void read_adc(knob_t *k)
{
     87c:	fc 01       	movw	r30, r24

	uint16_t val = ADCL;
     87e:	34 b1       	in	r19, 0x04	; 4
	val += (ADCH << 8);
     880:	25 b1       	in	r18, 0x05	; 5
	// accumulate value
	k->accum += val;
     882:	92 2f       	mov	r25, r18
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	83 0f       	add	r24, r19
     888:	91 1d       	adc	r25, r1
     88a:	9c 01       	movw	r18, r24
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	93 81       	ldd	r25, Z+3	; 0x03
     894:	a4 81       	ldd	r26, Z+4	; 0x04
     896:	b5 81       	ldd	r27, Z+5	; 0x05
     898:	28 0f       	add	r18, r24
     89a:	39 1f       	adc	r19, r25
     89c:	4a 1f       	adc	r20, r26
     89e:	5b 1f       	adc	r21, r27
     8a0:	22 83       	std	Z+2, r18	; 0x02
     8a2:	33 83       	std	Z+3, r19	; 0x03
     8a4:	44 83       	std	Z+4, r20	; 0x04
     8a6:	55 83       	std	Z+5, r21	; 0x05

	// take average when timer overflows
	if (adctimer == 0)
     8a8:	80 91 10 05 	lds	r24, 0x0510
     8ac:	88 23       	and	r24, r24
     8ae:	69 f4       	brne	.+26     	; 0x8ca <read_adc+0x4e>
	{
		k->val = k->accum / NUM_ADC_SAMPLES;
     8b0:	85 e0       	ldi	r24, 0x05	; 5
     8b2:	56 95       	lsr	r21
     8b4:	47 95       	ror	r20
     8b6:	37 95       	ror	r19
     8b8:	27 95       	ror	r18
     8ba:	8a 95       	dec	r24
     8bc:	d1 f7       	brne	.-12     	; 0x8b2 <read_adc+0x36>
     8be:	31 83       	std	Z+1, r19	; 0x01
     8c0:	20 83       	st	Z, r18
		k->accum = 0;
     8c2:	12 82       	std	Z+2, r1	; 0x02
     8c4:	13 82       	std	Z+3, r1	; 0x03
     8c6:	14 82       	std	Z+4, r1	; 0x04
     8c8:	15 82       	std	Z+5, r1	; 0x05
     8ca:	08 95       	ret

000008cc <init_interrupts>:
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
     8cc:	80 e9       	ldi	r24, 0x90	; 144
     8ce:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
     8d0:	86 e0       	ldi	r24, 0x06	; 6
     8d2:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     8d6:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     8da:	8f e1       	ldi	r24, 0x1F	; 31
     8dc:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	8b b9       	out	0x0b, r24	; 11
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);

	/* Enable USART Receive interrupt */
	enable_USART_interrupts();

}
     8e2:	08 95       	ret

000008e4 <init_io>:

void init_io( void )
{
	//b0 - b3 of PORT C is output
	DDRC = 0xFF;
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	84 bb       	out	0x14, r24	; 20

	// for led
	DDRE = 0xff;
     8e8:	82 b9       	out	0x02, r24	; 2

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
     8ea:	81 b3       	in	r24, 0x11	; 17
     8ec:	8f 70       	andi	r24, 0x0F	; 15
     8ee:	81 bb       	out	0x11, r24	; 17

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
     8f0:	82 b3       	in	r24, 0x12	; 18
     8f2:	80 6f       	ori	r24, 0xF0	; 240
     8f4:	82 bb       	out	0x12, r24	; 18
}
     8f6:	08 95       	ret

000008f8 <init_timers>:
void init_timers( void )
{

	//8-bit timer 0 for decay, sweep, vibrato effects?
	//Enable Overflow interrupts for Timer 0
	TIMSK = 0b00000001;
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	97 bf       	out	0x37, r25	; 55

	//Normal counter operation
	TCCR1A = 0b00000000;
     8fc:	1f bc       	out	0x2f, r1	; 47

	//Divide by 1024 prescalar
	TCCR1B = 0b00000101;
     8fe:	85 e0       	ldi	r24, 0x05	; 5
     900:	8e bd       	out	0x2e, r24	; 46

	//Start terminal count at zero
	TCNT0 = 0x00;
     902:	12 be       	out	0x32, r1	; 50

	//16-bit timer 1 for main frequency generation
	TIMSK |= _BV(TOIE1) | _BV( OCIE1A ) ;
     904:	87 b7       	in	r24, 0x37	; 55
     906:	84 61       	ori	r24, 0x14	; 20
     908:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0b00100000; // Enable A and B compare interrupts

	TCCR1A = 0b00000001;
     90a:	9f bd       	out	0x2f, r25	; 47

	// Prescaler 1, Fast PWM
	TCCR1B = 0b00010001;
     90c:	81 e1       	ldi	r24, 0x11	; 17
     90e:	8e bd       	out	0x2e, r24	; 46

	//Start count at zero now
	TCNT1H = 0;
     910:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
     912:	1c bc       	out	0x2c, r1	; 44
}
     914:	08 95       	ret

00000916 <init_adc>:

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
     916:	86 b1       	in	r24, 0x06	; 6
     918:	87 60       	ori	r24, 0x07	; 7
     91a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
     91c:	37 9a       	sbi	0x06, 7	; 6
}
     91e:	08 95       	ret

00000920 <__vector_18>:
	return 0;
}
unsigned short daftIndex = 0;

/* USART Received byte interrupt (get MIDI byte)*/
ISR(USART0_RX_vect) {
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
	byte_received = UDR0;
     92e:	8c b1       	in	r24, 0x0c	; 12
     930:	80 93 58 05 	sts	0x0558, r24
	byte_ready = 1;
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	90 93 52 05 	sts	0x0552, r25
	PORTE ^=0x1;
     93a:	83 b1       	in	r24, 0x03	; 3
     93c:	89 27       	eor	r24, r25
     93e:	83 b9       	out	0x03, r24	; 3
}
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	2f 93       	push	r18
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25

	PORTE ^=0x1;
     95e:	83 b1       	in	r24, 0x03	; 3
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	89 27       	eor	r24, r25
     964:	83 b9       	out	0x03, r24	; 3

	if(note_on_gate == 1) {
     966:	80 91 65 05 	lds	r24, 0x0565
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	01 f5       	brne	.+64     	; 0x9ae <__vector_12+0x60>
		fivebit_counter ++;
     96e:	80 91 66 05 	lds	r24, 0x0566
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 93 66 05 	sts	0x0566, r24

		//Reset counter if 'overflowed'
		if(fivebit_counter> 31) fivebit_counter = 0;
     978:	80 32       	cpi	r24, 0x20	; 32
     97a:	10 f0       	brcs	.+4      	; 0x980 <__vector_12+0x32>
     97c:	10 92 66 05 	sts	0x0566, r1

		//Each amplitude b0-3 is XNORed with b4 to create output
		unsigned char strobe = (fivebit_counter & 0b00010000) >> 4;
     980:	20 91 66 05 	lds	r18, 0x0566
		if(strobe == 1) {
     984:	82 2f       	mov	r24, r18
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	80 71       	andi	r24, 0x10	; 16
     98a:	90 70       	andi	r25, 0x00	; 0
     98c:	68 94       	set
     98e:	13 f8       	bld	r1, 3
     990:	95 95       	asr	r25
     992:	87 95       	ror	r24
     994:	16 94       	lsr	r1
     996:	e1 f7       	brne	.-8      	; 0x990 <__vector_12+0x42>
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__vector_12+0x54>
			amplitude = ~(fivebit_counter ^ 0b00001111);
     99c:	80 ef       	ldi	r24, 0xF0	; 240
     99e:	28 27       	eor	r18, r24
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <__vector_12+0x56>
		} else {
			amplitude = ~(fivebit_counter ^ 0b00000000);
     9a2:	20 95       	com	r18
     9a4:	20 93 5d 05 	sts	0x055D, r18
		}
		//amplitude &= 0b11111111;
		//amplitude |= (strobe << 4);
		
		PORTC = amplitude;
     9a8:	80 91 5d 05 	lds	r24, 0x055D
     9ac:	85 bb       	out	0x15, r24	; 21
	}

}
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_14>:

ISR(TIMER1_OVF_vect) 
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31

	/* Sweep */
	if((sweep_enabled == 1) && (sweep_amount> 0) && (note_on_gate == 1)) {
     9e4:	80 91 6d 05 	lds	r24, 0x056D
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	09 f0       	breq	.+2      	; 0x9ee <__vector_14+0x30>
     9ec:	6c c0       	rjmp	.+216    	; 0xac6 <__vector_14+0x108>
     9ee:	20 91 70 05 	lds	r18, 0x0570
     9f2:	22 23       	and	r18, r18
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <__vector_14+0x3a>
     9f6:	67 c0       	rjmp	.+206    	; 0xac6 <__vector_14+0x108>
     9f8:	80 91 65 05 	lds	r24, 0x0565
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__vector_14+0x44>
     a00:	62 c0       	rjmp	.+196    	; 0xac6 <__vector_14+0x108>
		fake_16_timer ++;
     a02:	80 91 63 05 	lds	r24, 0x0563
     a06:	90 91 64 05 	lds	r25, 0x0564
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	90 93 64 05 	sts	0x0564, r25
     a10:	80 93 63 05 	sts	0x0563, r24
		if(fake_16_timer >= 2) {
     a14:	02 97       	sbiw	r24, 0x02	; 2
     a16:	08 f4       	brcc	.+2      	; 0xa1a <__vector_14+0x5c>
     a18:	56 c0       	rjmp	.+172    	; 0xac6 <__vector_14+0x108>

			unsigned int sweep_mod = sweep_amount * note_table[playing_midi_note] / (8 * playing_midi_note);
     a1a:	60 91 5c 05 	lds	r22, 0x055C
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	66 0f       	add	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	fb 01       	movw	r30, r22
     a26:	e0 50       	subi	r30, 0x00	; 0
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	01 90       	ld	r0, Z+
     a2c:	f0 81       	ld	r31, Z
     a2e:	e0 2d       	mov	r30, r0
     a30:	82 2f       	mov	r24, r18
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	66 0f       	add	r22, r22
     a36:	77 1f       	adc	r23, r23
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	9c 01       	movw	r18, r24
     a3e:	e2 9f       	mul	r30, r18
     a40:	c0 01       	movw	r24, r0
     a42:	e3 9f       	mul	r30, r19
     a44:	90 0d       	add	r25, r0
     a46:	f2 9f       	mul	r31, r18
     a48:	90 0d       	add	r25, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	0e 94 c1 10 	call	0x2182	; 0x2182 <__udivmodhi4>
     a50:	9b 01       	movw	r18, r22

			//Sweep down mode
			if(sweep_direction == SWEEP_DOWN) {
     a52:	80 91 6b 05 	lds	r24, 0x056B
     a56:	40 91 56 05 	lds	r20, 0x0556
     a5a:	50 91 57 05 	lds	r21, 0x0557
     a5e:	88 23       	and	r24, r24
     a60:	59 f4       	brne	.+22     	; 0xa78 <__vector_14+0xba>
				if(frequency < MAXIMUM_FREQ) {
     a62:	8a e4       	ldi	r24, 0x4A	; 74
     a64:	48 33       	cpi	r20, 0x38	; 56
     a66:	58 07       	cpc	r21, r24
     a68:	98 f4       	brcc	.+38     	; 0xa90 <__vector_14+0xd2>
					frequency += sweep_mod;
     a6a:	24 0f       	add	r18, r20
     a6c:	35 1f       	adc	r19, r21
     a6e:	30 93 57 05 	sts	0x0557, r19
     a72:	20 93 56 05 	sts	0x0556, r18
     a76:	17 c0       	rjmp	.+46     	; 0xaa6 <__vector_14+0xe8>
				}
			}
			//Sweep up mode
			else
			{
				if(frequency> MINIMUM_FREQ+sweep_mod) {
     a78:	cb 01       	movw	r24, r22
     a7a:	cc 96       	adiw	r24, 0x3c	; 60
     a7c:	84 17       	cp	r24, r20
     a7e:	95 07       	cpc	r25, r21
     a80:	38 f4       	brcc	.+14     	; 0xa90 <__vector_14+0xd2>
					frequency -= sweep_mod;
     a82:	46 1b       	sub	r20, r22
     a84:	57 0b       	sbc	r21, r23
     a86:	50 93 57 05 	sts	0x0557, r21
     a8a:	40 93 56 05 	sts	0x0556, r20
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <__vector_14+0xe8>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
     a90:	80 91 73 05 	lds	r24, 0x0573
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	29 f4       	brne	.+10     	; 0xaa2 <__vector_14+0xe4>
						frequency = note_table[playing_midi_note];
     a98:	f0 93 57 05 	sts	0x0557, r31
     a9c:	e0 93 56 05 	sts	0x0556, r30
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__vector_14+0xe8>
					}
					else {
						amplitude = 0;
     aa2:	10 92 5d 05 	sts	0x055D, r1
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     aa6:	80 91 61 05 	lds	r24, 0x0561
     aaa:	90 91 62 05 	lds	r25, 0x0562
     aae:	20 91 56 05 	lds	r18, 0x0556
     ab2:	30 91 57 05 	lds	r19, 0x0557
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	9b bd       	out	0x2b, r25	; 43
     abc:	8a bd       	out	0x2a, r24	; 42
					}
				}
			}

			update_frequency(frequency);
			fake_16_timer = 0;
     abe:	10 92 64 05 	sts	0x0564, r1
     ac2:	10 92 63 05 	sts	0x0563, r1
		}

	}

}
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0b be       	out	0x3b, r0	; 59
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <enable_USART_interrupts>:
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	8b b9       	out	0x0b, r24	; 11
}
     af0:	08 95       	ret

00000af2 <disable_USART_interrupts>:

void disable_USART_interrupts() {
	UCSR0A = (0 << RXCIE0);
     af2:	1b b8       	out	0x0b, r1	; 11
}
     af4:	08 95       	ret

00000af6 <note_on>:

void note_on() {
	num_bytes = 0;
     af6:	10 92 53 05 	sts	0x0553, r1
	//Reset main timer1
	TCNT1 = 0;
     afa:	1d bc       	out	0x2d, r1	; 45
     afc:	1c bc       	out	0x2c, r1	; 44
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
     afe:	e0 91 55 05 	lds	r30, 0x0555
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	e0 50       	subi	r30, 0x00	; 0
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	90 93 57 05 	sts	0x0557, r25
     b14:	80 93 56 05 	sts	0x0556, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     b18:	20 91 61 05 	lds	r18, 0x0561
     b1c:	30 91 62 05 	lds	r19, 0x0562
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	9b bd       	out	0x2b, r25	; 43
     b26:	8a bd       	out	0x2a, r24	; 42
	//Reset main timer1
	TCNT1 = 0;
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
	update_frequency(frequency);
	note_on_gate = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 65 05 	sts	0x0565, r24
}
     b2e:	08 95       	ret

00000b30 <note_off>:

void note_off() {
	num_bytes = 0;
     b30:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
     b34:	10 92 65 05 	sts	0x0565, r1
}
     b38:	08 95       	ret

00000b3a <process_cc>:

void process_cc() {
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
	num_ccs = 0;
     b3e:	10 92 59 05 	sts	0x0559, r1

	switch (current_midi_cc) {
     b42:	80 91 6f 05 	lds	r24, 0x056F
     b46:	8c 30       	cpi	r24, 0x0C	; 12
     b48:	09 f4       	brne	.+2      	; 0xb4c <process_cc+0x12>
     b4a:	3f c0       	rjmp	.+126    	; 0xbca <process_cc+0x90>
     b4c:	8d 30       	cpi	r24, 0x0D	; 13
     b4e:	30 f4       	brcc	.+12     	; 0xb5c <process_cc+0x22>
     b50:	87 30       	cpi	r24, 0x07	; 7
     b52:	69 f0       	breq	.+26     	; 0xb6e <process_cc+0x34>
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	09 f0       	breq	.+2      	; 0xb5a <process_cc+0x20>
     b58:	63 c0       	rjmp	.+198    	; 0xc20 <process_cc+0xe6>
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <process_cc+0x3e>
     b5c:	8e 30       	cpi	r24, 0x0E	; 14
     b5e:	09 f4       	brne	.+2      	; 0xb62 <process_cc+0x28>
     b60:	4a c0       	rjmp	.+148    	; 0xbf6 <process_cc+0xbc>
     b62:	8e 30       	cpi	r24, 0x0E	; 14
     b64:	e8 f1       	brcs	.+122    	; 0xbe0 <process_cc+0xa6>
     b66:	8f 30       	cpi	r24, 0x0F	; 15
     b68:	09 f0       	breq	.+2      	; 0xb6c <process_cc+0x32>
     b6a:	5a c0       	rjmp	.+180    	; 0xc20 <process_cc+0xe6>
     b6c:	4f c0       	rjmp	.+158    	; 0xc0c <process_cc+0xd2>

	case MASTER_VOLUME_CC:
		master_volume = current_midi_ccdata;
     b6e:	80 91 68 05 	lds	r24, 0x0568
     b72:	80 93 54 05 	sts	0x0554, r24
     b76:	54 c0       	rjmp	.+168    	; 0xc20 <process_cc+0xe6>
		break;
	case FINE_PITCH_CC:
		fine_pitch_bend = ((note_table[playing_midi_note - 1]
     b78:	e0 91 5c 05 	lds	r30, 0x055C
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	df 01       	movw	r26, r30
     b84:	a0 50       	subi	r26, 0x00	; 0
     b86:	bf 4f       	sbci	r27, 0xFF	; 255
     b88:	0d 91       	ld	r16, X+
     b8a:	1c 91       	ld	r17, X
     b8c:	e2 50       	subi	r30, 0x02	; 2
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	20 81       	ld	r18, Z
     b92:	31 81       	ldd	r19, Z+1	; 0x01
     b94:	20 1b       	sub	r18, r16
     b96:	31 0b       	sbc	r19, r17
     b98:	80 91 68 05 	lds	r24, 0x0568
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	ac 01       	movw	r20, r24
     ba0:	24 9f       	mul	r18, r20
     ba2:	c0 01       	movw	r24, r0
     ba4:	25 9f       	mul	r18, r21
     ba6:	90 0d       	add	r25, r0
     ba8:	34 9f       	mul	r19, r20
     baa:	90 0d       	add	r25, r0
     bac:	11 24       	eor	r1, r1
     bae:	60 ec       	ldi	r22, 0xC0	; 192
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	0e 94 c1 10 	call	0x2182	; 0x2182 <__udivmodhi4>
     bb6:	cb 01       	movw	r24, r22
     bb8:	70 93 62 05 	sts	0x0562, r23
     bbc:	60 93 61 05 	sts	0x0561, r22
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     bc0:	80 0f       	add	r24, r16
     bc2:	91 1f       	adc	r25, r17
     bc4:	9b bd       	out	0x2b, r25	; 43
     bc6:	8a bd       	out	0x2a, r24	; 42
     bc8:	2b c0       	rjmp	.+86     	; 0xc20 <process_cc+0xe6>
		                               - note_table[playing_midi_note]) * current_midi_ccdata) / 192;
		update_frequency(note_table[playing_midi_note]);
		break;

	case SWEEP_ENABLED_CC:
		if (current_midi_ccdata > 64)
     bca:	80 91 68 05 	lds	r24, 0x0568
     bce:	81 34       	cpi	r24, 0x41	; 65
     bd0:	20 f0       	brcs	.+8      	; 0xbda <process_cc+0xa0>
			sweep_enabled = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 6d 05 	sts	0x056D, r24
     bd8:	23 c0       	rjmp	.+70     	; 0xc20 <process_cc+0xe6>
		else
			sweep_enabled = 0;
     bda:	10 92 6d 05 	sts	0x056D, r1
     bde:	20 c0       	rjmp	.+64     	; 0xc20 <process_cc+0xe6>
		break;

	case SWEEP_DIRECTION_CC:
		if (current_midi_ccdata > 64)
     be0:	80 91 68 05 	lds	r24, 0x0568
     be4:	81 34       	cpi	r24, 0x41	; 65
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <process_cc+0xb6>
			sweep_direction = SWEEP_UP;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 6b 05 	sts	0x056B, r24
     bee:	18 c0       	rjmp	.+48     	; 0xc20 <process_cc+0xe6>
		else
			sweep_direction = SWEEP_DOWN;
     bf0:	10 92 6b 05 	sts	0x056B, r1
     bf4:	15 c0       	rjmp	.+42     	; 0xc20 <process_cc+0xe6>
		break;

	case SWEEP_AMOUNT_CC:
		sweep_amount = current_midi_ccdata;
     bf6:	20 91 68 05 	lds	r18, 0x0568
     bfa:	20 93 70 05 	sts	0x0570, r18
		OCR1B = sweep_amount * 1024;
     bfe:	92 2f       	mov	r25, r18
     c00:	99 0f       	add	r25, r25
     c02:	99 0f       	add	r25, r25
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	99 bd       	out	0x29, r25	; 41
     c08:	88 bd       	out	0x28, r24	; 40
     c0a:	0a c0       	rjmp	.+20     	; 0xc20 <process_cc+0xe6>
		break;
	case SWEEP_LOOP_ENABLED_CC:
		if (current_midi_ccdata > 64)
     c0c:	80 91 68 05 	lds	r24, 0x0568
     c10:	81 34       	cpi	r24, 0x41	; 65
     c12:	20 f0       	brcs	.+8      	; 0xc1c <process_cc+0xe2>
			sweep_loop_enabled = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 73 05 	sts	0x0573, r24
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <process_cc+0xe6>
		else
			sweep_loop_enabled = 0;
     c1c:	10 92 73 05 	sts	0x0573, r1
		break;

	}
}
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <update_frequency>:

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     c26:	20 91 61 05 	lds	r18, 0x0561
     c2a:	30 91 62 05 	lds	r19, 0x0562
     c2e:	28 0f       	add	r18, r24
     c30:	39 1f       	adc	r19, r25
     c32:	3b bd       	out	0x2b, r19	; 43
     c34:	2a bd       	out	0x2a, r18	; 42
}
     c36:	08 95       	ret

00000c38 <bend_pitch>:

void bend_pitch() {
	num_pbs = 0;
     c38:	10 92 6c 05 	sts	0x056C, r1

	if (current_midi_pb_h > 63) {
     c3c:	60 91 5b 05 	lds	r22, 0x055B
     c40:	60 34       	cpi	r22, 0x40	; 64
     c42:	80 f1       	brcs	.+96     	; 0xca4 <bend_pitch+0x6c>
		distance
     c44:	e0 91 5c 05 	lds	r30, 0x055C
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	df 01       	movw	r26, r30
     c50:	a0 50       	subi	r26, 0x00	; 0
     c52:	bf 4f       	sbci	r27, 0xFF	; 255
     c54:	4d 91       	ld	r20, X+
     c56:	5c 91       	ld	r21, X
     c58:	ec 5f       	subi	r30, 0xFC	; 252
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	9a 01       	movw	r18, r20
     c62:	28 1b       	sub	r18, r24
     c64:	39 0b       	sbc	r19, r25
     c66:	86 2f       	mov	r24, r22
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	cf 97       	sbiw	r24, 0x3f	; 63
     c6c:	bc 01       	movw	r22, r24
     c6e:	26 9f       	mul	r18, r22
     c70:	c0 01       	movw	r24, r0
     c72:	27 9f       	mul	r18, r23
     c74:	90 0d       	add	r25, r0
     c76:	36 9f       	mul	r19, r22
     c78:	90 0d       	add	r25, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	26 e0       	ldi	r18, 0x06	; 6
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	2a 95       	dec	r18
     c84:	e1 f7       	brne	.-8      	; 0xc7e <bend_pitch+0x46>
     c86:	90 93 60 05 	sts	0x0560, r25
     c8a:	80 93 5f 05 	sts	0x055F, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     c8e:	20 91 61 05 	lds	r18, 0x0561
     c92:	30 91 62 05 	lds	r19, 0x0562
     c96:	42 0f       	add	r20, r18
     c98:	53 1f       	adc	r21, r19
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	5b bd       	out	0x2b, r21	; 43
     ca0:	4a bd       	out	0x2a, r20	; 42
     ca2:	08 95       	ret
		distance
		= ((note_table[playing_midi_note]
		               - note_table[playing_midi_note + 2])
		               * (current_midi_pb_h - 63)) / 64;
		update_frequency(note_table[playing_midi_note] - distance);
	} else if ((current_midi_pb_h < 63) && (playing_midi_note > 1)) {
     ca4:	6f 33       	cpi	r22, 0x3F	; 63
     ca6:	89 f1       	breq	.+98     	; 0xd0a <bend_pitch+0xd2>
     ca8:	e0 91 5c 05 	lds	r30, 0x055C
     cac:	e2 30       	cpi	r30, 0x02	; 2
     cae:	68 f1       	brcs	.+90     	; 0xd0a <bend_pitch+0xd2>
		distance = ((note_table[playing_midi_note - 2]
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	df 01       	movw	r26, r30
     cb8:	a0 50       	subi	r26, 0x00	; 0
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	4d 91       	ld	r20, X+
     cbe:	5c 91       	ld	r21, X
     cc0:	e4 50       	subi	r30, 0x04	; 4
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	20 81       	ld	r18, Z
     cc6:	31 81       	ldd	r19, Z+1	; 0x01
     cc8:	24 1b       	sub	r18, r20
     cca:	35 0b       	sbc	r19, r21
     ccc:	80 e4       	ldi	r24, 0x40	; 64
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	86 1b       	sub	r24, r22
     cd2:	91 09       	sbc	r25, r1
     cd4:	bc 01       	movw	r22, r24
     cd6:	26 9f       	mul	r18, r22
     cd8:	c0 01       	movw	r24, r0
     cda:	27 9f       	mul	r18, r23
     cdc:	90 0d       	add	r25, r0
     cde:	36 9f       	mul	r19, r22
     ce0:	90 0d       	add	r25, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	76 e0       	ldi	r23, 0x06	; 6
     ce6:	96 95       	lsr	r25
     ce8:	87 95       	ror	r24
     cea:	7a 95       	dec	r23
     cec:	e1 f7       	brne	.-8      	; 0xce6 <bend_pitch+0xae>
     cee:	90 93 60 05 	sts	0x0560, r25
     cf2:	80 93 5f 05 	sts	0x055F, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     cf6:	20 91 61 05 	lds	r18, 0x0561
     cfa:	30 91 62 05 	lds	r19, 0x0562
     cfe:	42 0f       	add	r20, r18
     d00:	53 1f       	adc	r21, r19
     d02:	48 0f       	add	r20, r24
     d04:	59 1f       	adc	r21, r25
     d06:	5b bd       	out	0x2b, r21	; 43
     d08:	4a bd       	out	0x2a, r20	; 42
     d0a:	08 95       	ret

00000d0c <check_byte_received>:

void check_byte_received() 
{
#if 1

	if( selfPlay ) {
     d0c:	80 91 00 03 	lds	r24, 0x0300
     d10:	88 23       	and	r24, r24
     d12:	39 f1       	breq	.+78     	; 0xd62 <check_byte_received+0x56>
		if( counter == 0 ) {
     d14:	80 91 05 03 	lds	r24, 0x0305
     d18:	90 91 06 03 	lds	r25, 0x0306
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	e1 f4       	brne	.+56     	; 0xd58 <check_byte_received+0x4c>
			byte_received = pgm_read_byte(&daft[daftIndex]);
     d20:	80 91 47 05 	lds	r24, 0x0547
     d24:	90 91 48 05 	lds	r25, 0x0548
     d28:	fc 01       	movw	r30, r24
     d2a:	e4 57       	subi	r30, 0x74	; 116
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	e4 91       	lpm	r30, Z+
     d30:	e0 93 58 05 	sts	0x0558, r30
			daftIndex ++; 
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	90 93 48 05 	sts	0x0548, r25
     d3a:	80 93 47 05 	sts	0x0547, r24
			if( daftIndex == sizeof( daft ) ) {
     d3e:	86 58       	subi	r24, 0x86	; 134
     d40:	97 40       	sbci	r25, 0x07	; 7
     d42:	21 f4       	brne	.+8      	; 0xd4c <check_byte_received+0x40>
				daftIndex = 0;
     d44:	10 92 48 05 	sts	0x0548, r1
     d48:	10 92 47 05 	sts	0x0547, r1

			}
			byte_ready = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 52 05 	sts	0x0552, r24
			counter = 2000;
     d52:	80 ed       	ldi	r24, 0xD0	; 208
     d54:	97 e0       	ldi	r25, 0x07	; 7
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <check_byte_received+0x4e>

		} else {
			counter -- ;
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	90 93 06 03 	sts	0x0306, r25
     d5e:	80 93 05 03 	sts	0x0305, r24
		}
		}
#endif

	//Is there a byte waiting in the buffer?
	if (byte_ready == 1) {
     d62:	30 91 52 05 	lds	r19, 0x0552
     d66:	31 30       	cpi	r19, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <check_byte_received+0x60>
     d6a:	85 c0       	rjmp	.+266    	; 0xe76 <check_byte_received+0x16a>
		//Is this a stupid byte like Clock or Active sensing?
		if (byte_received < 0xF0) {
     d6c:	20 91 58 05 	lds	r18, 0x0558
     d70:	20 3f       	cpi	r18, 0xF0	; 240
     d72:	08 f0       	brcs	.+2      	; 0xd76 <check_byte_received+0x6a>
     d74:	7e c0       	rjmp	.+252    	; 0xe72 <check_byte_received+0x166>
			//Is this a status byte? ...
			if (byte_received >= 0x80) {
     d76:	27 ff       	sbrs	r18, 7
     d78:	20 c0       	rjmp	.+64     	; 0xdba <check_byte_received+0xae>
				unsigned char temp_midi_channel = byte_received & 0x0F;
				//Is this for one of our channels?
				if ( 1 ) // (temp_midi_channel == midi_channel) 
				{
					current_midi_channel = temp_midi_channel;
     d7a:	82 2f       	mov	r24, r18
     d7c:	8f 70       	andi	r24, 0x0F	; 15
     d7e:	80 93 5e 05 	sts	0x055E, r24

					//What kind of status byte is this?
					unsigned char status_type = (byte_received & 0xF0);
					switch (status_type) {
     d82:	82 2f       	mov	r24, r18
     d84:	80 7f       	andi	r24, 0xF0	; 240
     d86:	80 39       	cpi	r24, 0x90	; 144
     d88:	51 f0       	breq	.+20     	; 0xd9e <check_byte_received+0x92>
     d8a:	81 39       	cpi	r24, 0x91	; 145
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <check_byte_received+0x88>
     d8e:	80 38       	cpi	r24, 0x80	; 128
     d90:	89 f4       	brne	.+34     	; 0xdb4 <check_byte_received+0xa8>
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <check_byte_received+0x98>
     d94:	80 3b       	cpi	r24, 0xB0	; 176
     d96:	41 f0       	breq	.+16     	; 0xda8 <check_byte_received+0x9c>
     d98:	80 3e       	cpi	r24, 0xE0	; 224
     d9a:	61 f4       	brne	.+24     	; 0xdb4 <check_byte_received+0xa8>
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <check_byte_received+0xa0>
					case (MIDI_STATUS_TYPE_NOTEON):
						current_midi_status = MIDI_STATUS_NOTEON;
     d9e:	30 93 67 05 	sts	0x0567, r19
     da2:	67 c0       	rjmp	.+206    	; 0xe72 <check_byte_received+0x166>
					break;
					case (MIDI_STATUS_TYPE_NOTEOFF):
						current_midi_status = MIDI_STATUS_NOTEOFF;
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	03 c0       	rjmp	.+6      	; 0xdae <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_CC):
						current_midi_status = MIDI_STATUS_CC;
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	01 c0       	rjmp	.+2      	; 0xdae <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_PB):
						current_midi_status = MIDI_STATUS_PB;
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	80 93 67 05 	sts	0x0567, r24
     db2:	5f c0       	rjmp	.+190    	; 0xe72 <check_byte_received+0x166>
					break;
					default:
						current_midi_status = MIDI_STATUS_NONE;
     db4:	10 92 67 05 	sts	0x0567, r1
     db8:	5c c0       	rjmp	.+184    	; 0xe72 <check_byte_received+0x166>
					current_midi_status = 0;
				}
			}
			// ... or is it a data byte?
			else {
				switch (current_midi_status) {
     dba:	90 91 67 05 	lds	r25, 0x0567
     dbe:	92 30       	cpi	r25, 0x02	; 2
     dc0:	29 f1       	breq	.+74     	; 0xe0c <check_byte_received+0x100>
     dc2:	93 30       	cpi	r25, 0x03	; 3
     dc4:	20 f4       	brcc	.+8      	; 0xdce <check_byte_received+0xc2>
     dc6:	91 30       	cpi	r25, 0x01	; 1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <check_byte_received+0xc0>
     dca:	53 c0       	rjmp	.+166    	; 0xe72 <check_byte_received+0x166>
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <check_byte_received+0xce>
     dce:	93 30       	cpi	r25, 0x03	; 3
     dd0:	a1 f1       	breq	.+104    	; 0xe3a <check_byte_received+0x12e>
     dd2:	94 30       	cpi	r25, 0x04	; 4
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <check_byte_received+0xcc>
     dd6:	4d c0       	rjmp	.+154    	; 0xe72 <check_byte_received+0x166>
     dd8:	3e c0       	rjmp	.+124    	; 0xe56 <check_byte_received+0x14a>
				case (MIDI_STATUS_NOTEON):

					//Is this a velocity byte?
					if (num_bytes > 0) {
     dda:	80 91 53 05 	lds	r24, 0x0553
     dde:	88 23       	and	r24, r24
     de0:	81 f0       	breq	.+32     	; 0xe02 <check_byte_received+0xf6>
     de2:	90 91 55 05 	lds	r25, 0x0555

						//If the velocity sent was 0, then this is really a NOTE-OFF
						if (byte_received > 0) {
     de6:	22 23       	and	r18, r18
     de8:	29 f0       	breq	.+10     	; 0xdf4 <check_byte_received+0xe8>
							//current_midi_velocity = byte_received;
							playing_midi_note = current_midi_note;
     dea:	90 93 5c 05 	sts	0x055C, r25
							note_on();
     dee:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <note_on>
     df2:	10 c0       	rjmp	.+32     	; 0xe14 <check_byte_received+0x108>
						} else {
							if (current_midi_note == playing_midi_note) {
     df4:	80 91 5c 05 	lds	r24, 0x055C
     df8:	98 17       	cp	r25, r24
     dfa:	61 f4       	brne	.+24     	; 0xe14 <check_byte_received+0x108>
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
	note_on_gate = 0;
     dfc:	10 92 65 05 	sts	0x0565, r1
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <check_byte_received+0x108>
						num_bytes = 0;
					}

				//Or is this a note data byte?
					else {
						current_midi_note = byte_received;
     e02:	20 93 55 05 	sts	0x0555, r18
						num_bytes++;
     e06:	90 93 53 05 	sts	0x0553, r25
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <check_byte_received+0x128>

				break;

				case (MIDI_STATUS_NOTEOFF):
					//Is this a velocity byte?
					if (num_bytes > 0) {
     e0c:	80 91 53 05 	lds	r24, 0x0553
     e10:	88 23       	and	r24, r24
     e12:	19 f0       	breq	.+6      	; 0xe1a <check_byte_received+0x10e>
						//Who cares? We aren't implementing aftertouch
						num_bytes = 0;
     e14:	10 92 53 05 	sts	0x0553, r1
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <check_byte_received+0x128>
					} else {
						/* This is a note byte. Let's see if it's the same as the currently
						 * playing note. Only then will we note_off()
						 */

						if (byte_received == playing_midi_note) {
     e1a:	80 91 5c 05 	lds	r24, 0x055C
     e1e:	28 17       	cp	r18, r24
     e20:	21 f4       	brne	.+8      	; 0xe2a <check_byte_received+0x11e>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
     e22:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
     e26:	10 92 65 05 	sts	0x0565, r1
						 */

						if (byte_received == playing_midi_note) {
							note_off();
						}
						num_bytes++;
     e2a:	80 91 53 05 	lds	r24, 0x0553
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 53 05 	sts	0x0553, r24
	}

}

void clear_byte_received() {
	byte_received = 0;
     e34:	10 92 58 05 	sts	0x0558, r1
     e38:	1c c0       	rjmp	.+56     	; 0xe72 <check_byte_received+0x166>

				break;

				case (MIDI_STATUS_CC):
					//Did we already get a CC Status byte?
					if (num_ccs > 0) {
     e3a:	80 91 59 05 	lds	r24, 0x0559
     e3e:	88 23       	and	r24, r24
     e40:	29 f0       	breq	.+10     	; 0xe4c <check_byte_received+0x140>
						current_midi_ccdata = byte_received;
     e42:	20 93 68 05 	sts	0x0568, r18
						process_cc();
     e46:	0e 94 9d 05 	call	0xb3a	; 0xb3a <process_cc>
     e4a:	13 c0       	rjmp	.+38     	; 0xe72 <check_byte_received+0x166>
					}
				//Or is this a new CC status byte?
					else {
						current_midi_cc = byte_received;
     e4c:	20 93 6f 05 	sts	0x056F, r18
						num_ccs++;
     e50:	30 93 59 05 	sts	0x0559, r19
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <check_byte_received+0x166>
					}
				break;

				case (MIDI_STATUS_PB):
					//How many PB related bytes have we gotten?
					switch (num_pbs) {
     e56:	80 91 6c 05 	lds	r24, 0x056C
     e5a:	88 23       	and	r24, r24
     e5c:	19 f0       	breq	.+6      	; 0xe64 <check_byte_received+0x158>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	41 f4       	brne	.+16     	; 0xe72 <check_byte_received+0x166>
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <check_byte_received+0x15e>
					case (0):
						//First byte is 7 LSB
						//Don't care about it for now
						//current_midi_pb_l = byte_received;

						num_pbs++;
     e64:	30 93 6c 05 	sts	0x056C, r19
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <check_byte_received+0x166>
					break;
					case (1):
						//Second byte has 7 MSB
						current_midi_pb_h = byte_received;
     e6a:	20 93 5b 05 	sts	0x055B, r18
						//Combine to get 14 bytes 0 - 13
						//current_midi_pb = ((current_midi_pb_h << 7)|(current_midi_pb_l << 0));
						bend_pitch();
     e6e:	0e 94 1c 06 	call	0xc38	; 0xc38 <bend_pitch>
				break;
				}
			}

		}
		byte_ready = 0;
     e72:	10 92 52 05 	sts	0x0552, r1
     e76:	08 95       	ret

00000e78 <clear_byte_received>:
	}

}

void clear_byte_received() {
	byte_received = 0;
     e78:	10 92 58 05 	sts	0x0558, r1
}
     e7c:	08 95       	ret

00000e7e <check_channel_set>:

void check_channel_set() {
	midi_channel = 0;
     e7e:	10 92 6e 05 	sts	0x056E, r1
	//Get 4-bit (0-16) MIDI CHannel from PORTD b4-b7)
	//midi_channel |= (~PIND & 0xF0) >> 4;

}
     e82:	08 95       	ret

00000e84 <pgm_read_byte1>:
#define OCTAVE_OFFSET (0)
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
     e84:	fc 01       	movw	r30, r24
	return *p;
}
     e86:	80 81       	ld	r24, Z
     e88:	08 95       	ret

00000e8a <play>:

void play(const unsigned char *p)
{
     e8a:	2f 92       	push	r2
     e8c:	3f 92       	push	r3
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <play+0x26>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <play+0x30>
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {

	p++;					// ignore name
     eb8:	cf 01       	movw	r24, r30
  
	
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {
     eba:	fc 01       	movw	r30, r24
     ebc:	81 91       	ld	r24, Z+
     ebe:	8a 33       	cpi	r24, 0x3A	; 58
     ec0:	d9 f7       	brne	.-10     	; 0xeb8 <play+0x2e>

	p++;					// ignore name
  }
  	p++;                     // skip ':'
     ec2:	fb 83       	std	Y+3, r31	; 0x03
     ec4:	ea 83       	std	Y+2, r30	; 0x02
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
     ec6:	80 81       	ld	r24, Z
     ec8:	84 36       	cpi	r24, 0x64	; 100
     eca:	21 f0       	breq	.+8      	; 0xed4 <play+0x4a>
     ecc:	04 e0       	ldi	r16, 0x04	; 4
     ece:	e0 2e       	mov	r14, r16
     ed0:	f1 2c       	mov	r15, r1
     ed2:	26 c0       	rjmp	.+76     	; 0xf20 <play+0x96>
    p++; p++;              // skip "d="
     ed4:	32 96       	adiw	r30, 0x02	; 2
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	11 c0       	rjmp	.+34     	; 0xefe <play+0x74>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + ((*p++) - '0');
     edc:	c9 01       	movw	r24, r18
     ede:	13 e0       	ldi	r17, 0x03	; 3
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	1a 95       	dec	r17
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <play+0x56>
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	82 0f       	add	r24, r18
     eee:	93 1f       	adc	r25, r19
     ef0:	24 2f       	mov	r18, r20
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	20 53       	subi	r18, 0x30	; 48
     ef6:	30 40       	sbci	r19, 0x00	; 0
     ef8:	28 0f       	add	r18, r24
     efa:	39 1f       	adc	r19, r25
     efc:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
     efe:	40 81       	ld	r20, Z
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
    p++; p++;              // skip "d="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
     f00:	40 33       	cpi	r20, 0x30	; 48
     f02:	10 f0       	brcs	.+4      	; 0xf08 <play+0x7e>
     f04:	4a 33       	cpi	r20, 0x3A	; 58
     f06:	50 f3       	brcs	.-44     	; 0xedc <play+0x52>
      num = (num * 10) + ((*p++) - '0');
    }
    if(num > 0) default_dur = num;
     f08:	21 15       	cp	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	21 f4       	brne	.+8      	; 0xf16 <play+0x8c>
     f0e:	a4 e0       	ldi	r26, 0x04	; 4
     f10:	ea 2e       	mov	r14, r26
     f12:	f1 2c       	mov	r15, r1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <play+0x8e>
     f16:	79 01       	movw	r14, r18
    p++;                   // skip comma
     f18:	cf 01       	movw	r24, r30
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	9b 83       	std	Y+3, r25	; 0x03
     f1e:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get default octave
  if(pgm_read_byte1(p) == 'o') {
     f20:	ea 81       	ldd	r30, Y+2	; 0x02
     f22:	fb 81       	ldd	r31, Y+3	; 0x03
     f24:	80 81       	ld	r24, Z
     f26:	8f 36       	cpi	r24, 0x6F	; 111
     f28:	19 f0       	breq	.+6      	; 0xf30 <play+0xa6>
     f2a:	06 e0       	ldi	r16, 0x06	; 6
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <play+0xd2>
    p++; p++;              // skip "o="
     f30:	ea 81       	ldd	r30, Y+2	; 0x02
     f32:	fb 81       	ldd	r31, Y+3	; 0x03
     f34:	31 96       	adiw	r30, 0x01	; 1
     f36:	af 01       	movw	r20, r30
     f38:	4f 5f       	subi	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    num = pgm_read_byte1(p) - '0';p++;
     f3c:	81 81       	ldd	r24, Z+1	; 0x01
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 01       	movw	r18, r24
     f42:	20 53       	subi	r18, 0x30	; 48
     f44:	30 40       	sbci	r19, 0x00	; 0
    if(num >= 3 && num <=7) default_oct = num;
     f46:	c3 97       	sbiw	r24, 0x33	; 51
     f48:	05 97       	sbiw	r24, 0x05	; 5
     f4a:	10 f4       	brcc	.+4      	; 0xf50 <play+0xc6>
     f4c:	89 01       	movw	r16, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <play+0xca>
     f50:	06 e0       	ldi	r16, 0x06	; 6
     f52:	10 e0       	ldi	r17, 0x00	; 0
    p++;                   // skip comma
     f54:	ca 01       	movw	r24, r20
     f56:	02 96       	adiw	r24, 0x02	; 2
     f58:	9b 83       	std	Y+3, r25	; 0x03
     f5a:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get BPM
  if(pgm_read_byte1(p) == 'b') {
     f5c:	ea 81       	ldd	r30, Y+2	; 0x02
     f5e:	fb 81       	ldd	r31, Y+3	; 0x03
     f60:	80 81       	ld	r24, Z
     f62:	82 36       	cpi	r24, 0x62	; 98
     f64:	19 f0       	breq	.+6      	; 0xf6c <play+0xe2>
     f66:	2f e3       	ldi	r18, 0x3F	; 63
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	20 c0       	rjmp	.+64     	; 0xfac <play+0x122>
    p++; p++;              // skip "b="
     f6c:	ea 81       	ldd	r30, Y+2	; 0x02
     f6e:	fb 81       	ldd	r31, Y+3	; 0x03
     f70:	32 96       	adiw	r30, 0x02	; 2
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	11 c0       	rjmp	.+34     	; 0xf9a <play+0x110>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
     f78:	c9 01       	movw	r24, r18
     f7a:	73 e0       	ldi	r23, 0x03	; 3
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	7a 95       	dec	r23
     f82:	e1 f7       	brne	.-8      	; 0xf7c <play+0xf2>
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	24 2f       	mov	r18, r20
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	20 53       	subi	r18, 0x30	; 48
     f92:	30 40       	sbci	r19, 0x00	; 0
     f94:	28 0f       	add	r18, r24
     f96:	39 1f       	adc	r19, r25
     f98:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
     f9a:	40 81       	ld	r20, Z

  // get BPM
  if(pgm_read_byte1(p) == 'b') {
    p++; p++;              // skip "b="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
     f9c:	40 33       	cpi	r20, 0x30	; 48
     f9e:	10 f0       	brcs	.+4      	; 0xfa4 <play+0x11a>
     fa0:	4a 33       	cpi	r20, 0x3A	; 58
     fa2:	50 f3       	brcs	.-44     	; 0xf78 <play+0xee>
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
    }
	
    bpm = num;
    p++;                   // skip colon
     fa4:	cf 01       	movw	r24, r30
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
  }

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	60 e6       	ldi	r22, 0x60	; 96
     fb2:	7a ee       	ldi	r23, 0xEA	; 234
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodsi4>
     fbc:	39 01       	movw	r6, r18
     fbe:	4a 01       	movw	r8, r20
     fc0:	52 e0       	ldi	r21, 0x02	; 2
     fc2:	66 0c       	add	r6, r6
     fc4:	77 1c       	adc	r7, r7
     fc6:	88 1c       	adc	r8, r8
     fc8:	99 1c       	adc	r9, r9
     fca:	5a 95       	dec	r21
     fcc:	d1 f7       	brne	.-12     	; 0xfc2 <play+0x138>
    }
    
    if( num ) { 
	  duration = wholenote / num;
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
     fce:	17 01       	movw	r2, r14
     fd0:	44 24       	eor	r4, r4
     fd2:	55 24       	eor	r5, r5
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
      scale = pgm_read_byte1(p) - '0';
      p++;
    } else {
      scale = default_oct;
     fd4:	09 83       	std	Y+1, r16	; 0x01
     fd6:	19 c1       	rjmp	.+562    	; 0x120a <__stack+0x10b>
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
      num = (num * 10) + ((*p++) - '0');
     fd8:	c9 01       	movw	r24, r18
     fda:	43 e0       	ldi	r20, 0x03	; 3
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	4a 95       	dec	r20
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <play+0x152>
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	21 2f       	mov	r18, r17
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	20 53       	subi	r18, 0x30	; 48
     ff2:	30 40       	sbci	r19, 0x00	; 0
     ff4:	28 0f       	add	r18, r24
     ff6:	39 1f       	adc	r19, r25
     ff8:	ea 81       	ldd	r30, Y+2	; 0x02
     ffa:	fb 81       	ldd	r31, Y+3	; 0x03
     ffc:	31 96       	adiw	r30, 0x01	; 1
     ffe:	fb 83       	std	Y+3, r31	; 0x03
    1000:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    1002:	ea 81       	ldd	r30, Y+2	; 0x02
    1004:	fb 81       	ldd	r31, Y+3	; 0x03
    1006:	10 81       	ld	r17, Z
  while( pgm_read_byte1(p) ) {
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
    1008:	10 33       	cpi	r17, 0x30	; 48
    100a:	10 f0       	brcs	.+4      	; 0x1010 <play+0x186>
    100c:	1a 33       	cpi	r17, 0x3A	; 58
    100e:	20 f3       	brcs	.-56     	; 0xfd8 <play+0x14e>
      num = (num * 10) + ((*p++) - '0');
    }
    
    if( num ) { 
    1010:	21 15       	cp	r18, r1
    1012:	31 05       	cpc	r19, r1
    1014:	29 f0       	breq	.+10     	; 0x1020 <play+0x196>
	  duration = wholenote / num;
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	c4 01       	movw	r24, r8
    101c:	b3 01       	movw	r22, r6
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <play+0x19e>
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    1020:	c4 01       	movw	r24, r8
    1022:	b3 01       	movw	r22, r6
    1024:	a2 01       	movw	r20, r4
    1026:	91 01       	movw	r18, r2
    1028:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__udivmodsi4>
    102c:	c9 01       	movw	r24, r18
    102e:	da 01       	movw	r26, r20
    1030:	ac 01       	movw	r20, r24
    1032:	bd 01       	movw	r22, r26
	}
	
    // get the note
    switch( pgm_read_byte1(p) ) {
    1034:	14 36       	cpi	r17, 0x64	; 100
    1036:	81 f0       	breq	.+32     	; 0x1058 <play+0x1ce>
    1038:	15 36       	cpi	r17, 0x65	; 101
    103a:	38 f4       	brcc	.+14     	; 0x104a <play+0x1c0>
    103c:	12 36       	cpi	r17, 0x62	; 98
    103e:	61 f0       	breq	.+24     	; 0x1058 <play+0x1ce>
    1040:	13 36       	cpi	r17, 0x63	; 99
    1042:	60 f4       	brcc	.+24     	; 0x105c <play+0x1d2>
    1044:	11 36       	cpi	r17, 0x61	; 97
    1046:	a1 f4       	brne	.+40     	; 0x1070 <play+0x1e6>
    1048:	11 c0       	rjmp	.+34     	; 0x106c <play+0x1e2>
    104a:	16 36       	cpi	r17, 0x66	; 102
    104c:	59 f0       	breq	.+22     	; 0x1064 <play+0x1da>
    104e:	16 36       	cpi	r17, 0x66	; 102
    1050:	38 f0       	brcs	.+14     	; 0x1060 <play+0x1d6>
    1052:	17 36       	cpi	r17, 0x67	; 103
    1054:	69 f4       	brne	.+26     	; 0x1070 <play+0x1e6>
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <play+0x1de>
    1058:	23 e0       	ldi	r18, 0x03	; 3
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <play+0x1e8>
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <play+0x1e8>
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <play+0x1e8>
      case 'd':
        note = 3;
        break;
      case 'e':
        note = 10;
        break;
    1064:	29 e0       	ldi	r18, 0x09	; 9
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <play+0x1e8>
      case 'f':
        note = 9;
        break;
    1068:	27 e0       	ldi	r18, 0x07	; 7
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <play+0x1e8>
      case 'g':
        note = 7;
        break;
    106c:	25 e0       	ldi	r18, 0x05	; 5
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <play+0x1e8>
      case 'a':
        note = 5;
        break;
    1070:	20 e0       	ldi	r18, 0x00	; 0
      default:
        note = 0;
    }


    p++;
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02

    // get optional '#' sharp
    if(pgm_read_byte1(p) == '#') {
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	83 32       	cpi	r24, 0x23	; 35
    1082:	21 f4       	brne	.+8      	; 0x108c <play+0x202>
      note++;
    1084:	2f 5f       	subi	r18, 0xFF	; 255
      p++;
    1086:	31 96       	adiw	r30, 0x01	; 1
    1088:	fb 83       	std	Y+3, r31	; 0x03
    108a:	ea 83       	std	Y+2, r30	; 0x02
    }

    // get optional '.' dotted note
    if(pgm_read_byte1(p) == '.') {
    108c:	ea 81       	ldd	r30, Y+2	; 0x02
    108e:	fb 81       	ldd	r31, Y+3	; 0x03
    1090:	80 81       	ld	r24, Z
    1092:	8e 32       	cpi	r24, 0x2E	; 46
    1094:	69 f4       	brne	.+26     	; 0x10b0 <play+0x226>
      duration += duration/2;
    1096:	db 01       	movw	r26, r22
    1098:	ca 01       	movw	r24, r20
    109a:	b6 95       	lsr	r27
    109c:	a7 95       	ror	r26
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	48 0f       	add	r20, r24
    10a4:	59 1f       	adc	r21, r25
    10a6:	6a 1f       	adc	r22, r26
    10a8:	7b 1f       	adc	r23, r27
      p++;
    10aa:	31 96       	adiw	r30, 0x01	; 1
    10ac:	fb 83       	std	Y+3, r31	; 0x03
    10ae:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	80 81       	ld	r24, Z
      duration += duration/2;
      p++;
    }
  
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
    10b6:	80 33       	cpi	r24, 0x30	; 48
    10b8:	40 f0       	brcs	.+16     	; 0x10ca <play+0x240>
    10ba:	8a 33       	cpi	r24, 0x3A	; 58
    10bc:	30 f4       	brcc	.+12     	; 0x10ca <play+0x240>
      scale = pgm_read_byte1(p) - '0';
    10be:	98 2f       	mov	r25, r24
    10c0:	90 53       	subi	r25, 0x30	; 48
      p++;
    10c2:	31 96       	adiw	r30, 0x01	; 1
    10c4:	fb 83       	std	Y+3, r31	; 0x03
    10c6:	ea 83       	std	Y+2, r30	; 0x02
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <play+0x242>
    } else {
      scale = default_oct;
    10ca:	99 81       	ldd	r25, Y+1	; 0x01
	 //note = 11;
	 //scale  = 3+4;

    scale += OCTAVE_OFFSET;

    if(pgm_read_byte1(p) == ',')
    10cc:	ea 81       	ldd	r30, Y+2	; 0x02
    10ce:	fb 81       	ldd	r31, Y+3	; 0x03
    10d0:	80 81       	ld	r24, Z
    10d2:	8c 32       	cpi	r24, 0x2C	; 44
    10d4:	19 f4       	brne	.+6      	; 0x10dc <play+0x252>
      p++;       // skip comma for next note (or we may be at the end)
    10d6:	31 96       	adiw	r30, 0x01	; 1
    10d8:	fb 83       	std	Y+3, r31	; 0x03
    10da:	ea 83       	std	Y+2, r30	; 0x02

	duration /= 2;
    10dc:	7a 01       	movw	r14, r20
    10de:	8b 01       	movw	r16, r22
    10e0:	16 95       	lsr	r17
    10e2:	07 95       	ror	r16
    10e4:	f7 94       	ror	r15
    10e6:	e7 94       	ror	r14
    10e8:	f5 eb       	ldi	r31, 0xB5	; 181
    10ea:	ef 16       	cp	r14, r31
    10ec:	f1 04       	cpc	r15, r1
    10ee:	01 05       	cpc	r16, r1
    10f0:	11 05       	cpc	r17, r1
    10f2:	28 f0       	brcs	.+10     	; 0x10fe <play+0x274>
    10f4:	54 eb       	ldi	r21, 0xB4	; 180
    10f6:	e5 2e       	mov	r14, r21
    10f8:	f1 2c       	mov	r15, r1
    10fa:	01 2d       	mov	r16, r1
    10fc:	11 2d       	mov	r17, r1
	if( duration > 180 ) duration = 180;


    if( note ) {
    10fe:	22 23       	and	r18, r18
    1100:	09 f4       	brne	.+2      	; 0x1104 <__stack+0x5>
    1102:	40 c0       	rjmp	.+128    	; 0x1184 <__stack+0x85>

	  // play the note

	  	current_midi_note = (((scale - 4) * 12) + note);
    1104:	20 53       	subi	r18, 0x30	; 48
    1106:	3c e0       	ldi	r19, 0x0C	; 12
    1108:	93 9f       	mul	r25, r19
    110a:	c0 01       	movw	r24, r0
    110c:	11 24       	eor	r1, r1
    110e:	28 0f       	add	r18, r24
    1110:	20 93 55 05 	sts	0x0555, r18

//		frequency = note_table[current_midi_note];

		note_on();
    1114:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <note_on>

	 	_delay_ms( duration );
    1118:	c8 01       	movw	r24, r16
    111a:	b7 01       	movw	r22, r14
    111c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__floatunsisf>
    1120:	5b 01       	movw	r10, r22
    1122:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a e7       	ldi	r20, 0x7A	; 122
    112a:	55 e4       	ldi	r21, 0x45	; 69
    112c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__mulsf3>
    1130:	7b 01       	movw	r14, r22
    1132:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	d4 f1       	brlt	.+116    	; 0x11b8 <__stack+0xb9>
		__ticks = 1;
	else if (__tmp > 65535)
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__gtsf2>
    1154:	18 16       	cp	r1, r24
    1156:	0c f0       	brlt	.+2      	; 0x115a <__stack+0x5b>
    1158:	51 c0       	rjmp	.+162    	; 0x11fc <__stack+0xfd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115a:	c6 01       	movw	r24, r12
    115c:	b5 01       	movw	r22, r10
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__mulsf3>
    116a:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fixunssfsi>
    116e:	06 c0       	rjmp	.+12     	; 0x117c <__stack+0x7d>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1170:	80 e9       	ldi	r24, 0x90	; 144
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <__stack+0x75>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1178:	61 50       	subi	r22, 0x01	; 1
    117a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	61 15       	cp	r22, r1
    117e:	71 05       	cpc	r23, r1
    1180:	b9 f7       	brne	.-18     	; 0x1170 <__stack+0x71>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__stack+0x10b>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
    1184:	10 92 53 05 	sts	0x0553, r1
	note_on_gate = 0;
    1188:	10 92 65 05 	sts	0x0565, r1
//	 	note_off();
  
	} else {
	
	 	note_off();
	  _delay_ms( duration );
    118c:	c8 01       	movw	r24, r16
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__floatunsisf>
    1194:	5b 01       	movw	r10, r22
    1196:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a e7       	ldi	r20, 0x7A	; 122
    119e:	55 e4       	ldi	r21, 0x45	; 69
    11a0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__mulsf3>
    11a4:	7b 01       	movw	r14, r22
    11a6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	1c f4       	brge	.+6      	; 0x11be <__stack+0xbf>
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	23 c0       	rjmp	.+70     	; 0x1204 <__stack+0x105>
		__ticks = 1;
	else if (__tmp > 65535)
    11be:	c8 01       	movw	r24, r16
    11c0:	b7 01       	movw	r22, r14
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	4f e7       	ldi	r20, 0x7F	; 127
    11c8:	57 e4       	ldi	r21, 0x47	; 71
    11ca:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__gtsf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	ac f4       	brge	.+42     	; 0x11fc <__stack+0xfd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d2:	c6 01       	movw	r24, r12
    11d4:	b5 01       	movw	r22, r10
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__mulsf3>
    11e2:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fixunssfsi>
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <__stack+0xf5>
    11e8:	80 e9       	ldi	r24, 0x90	; 144
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <__stack+0xed>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	61 50       	subi	r22, 0x01	; 1
    11f2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f4:	61 15       	cp	r22, r1
    11f6:	71 05       	cpc	r23, r1
    11f8:	b9 f7       	brne	.-18     	; 0x11e8 <__stack+0xe9>
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <__stack+0x10b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	c8 01       	movw	r24, r16
    11fe:	b7 01       	movw	r22, r14
    1200:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fixunssfsi>
    1204:	cb 01       	movw	r24, r22
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <__stack+0x107>

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)

  // begin note loop
  while( pgm_read_byte1(p) ) {
    120a:	ea 81       	ldd	r30, Y+2	; 0x02
    120c:	fb 81       	ldd	r31, Y+3	; 0x03
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	19 f0       	breq	.+6      	; 0x121a <__stack+0x11b>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f4 ce       	rjmp	.-536    	; 0x1002 <play+0x178>
	  _delay_ms( duration );
	  
    }
  }
	
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	5f 90       	pop	r5
    123e:	4f 90       	pop	r4
    1240:	3f 90       	pop	r3
    1242:	2f 90       	pop	r2
    1244:	08 95       	ret

00001246 <__vector_26>:
uint16_t accumulator = 0;  // large number holds phase
uint8_t indexi = 0;        // index for wave lookup (the upper 8 bits of the accumulator)

// timer 1 is audio interrupt timer
ISR(TIMER3_COMPA_vect) 
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	0b b6       	in	r0, 0x3b	; 59
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
  // calculate frequency mod
  accumulator = accumulator + frequency;  // add in pith, the higher the number, the faster it rolls over, the more cycles per second
    1260:	80 91 56 05 	lds	r24, 0x0556
    1264:	90 91 57 05 	lds	r25, 0x0557
    1268:	20 91 49 05 	lds	r18, 0x0549
    126c:	30 91 4a 05 	lds	r19, 0x054A
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	90 93 4a 05 	sts	0x054A, r25
    1278:	80 93 49 05 	sts	0x0549, r24
  indexi = accumulator >> 8;   // use top 8 bits as wavetable index
    127c:	90 93 4b 05 	sts	0x054B, r25

  PORTC = sine[indexi];    // get sample from wave table
    1280:	e7 e0       	ldi	r30, 0x07	; 7
    1282:	f3 e0       	ldi	r31, 0x03	; 3
    1284:	e9 0f       	add	r30, r25
    1286:	f1 1d       	adc	r31, r1
    1288:	80 81       	ld	r24, Z
    128a:	85 bb       	out	0x15, r24	; 21
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0b be       	out	0x3b, r0	; 59
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <SetRC>:

// Write to LED Array - Takes in a Row and Column
// this routine is written to help understand how the process works, not fast.
void SetRC( unsigned char R, unsigned char C ) 
{	
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
	unsigned char b1,b2;
	unsigned char port_a, ddr_a;

	if ( C  > 4  ) C = 0;
    12ae:	65 30       	cpi	r22, 0x05	; 5
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <SetRC+0xe>
    12b2:	60 e0       	ldi	r22, 0x00	; 0
	if ( R  > 5  ) R = 0;
    12b4:	86 30       	cpi	r24, 0x06	; 6
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <SetRC+0x14>
    12b8:	80 e0       	ldi	r24, 0x00	; 0

	// get current values, Can't cache PORTA/DDRA since the sound interrupt can change, 
	// should cache DDRD6/PORTD6 instead
	port_a = PORTA;
    12ba:	2b b3       	in	r18, 0x1b	; 27
	ddr_a = DDRA;
    12bc:	3a b3       	in	r19, 0x1a	; 26

	//	read two values from array, we use pgm_read_byte because the data is in program memory space
	// its 4*2 because there are 4 leds in each column, and two bytes per led
	b1 = pgm_read_byte(&led30[ (R*(4*2))+(C*2)   ] ) ;
    12be:	a8 2f       	mov	r26, r24
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	aa 0f       	add	r26, r26
    12c4:	bb 1f       	adc	r27, r27
    12c6:	aa 0f       	add	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	a6 0f       	add	r26, r22
    12cc:	b1 1d       	adc	r27, r1
    12ce:	aa 0f       	add	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	cd 01       	movw	r24, r26
    12d4:	8e 5e       	subi	r24, 0xEE	; 238
    12d6:	97 4f       	sbci	r25, 0xF7	; 247
    12d8:	fc 01       	movw	r30, r24
    12da:	44 91       	lpm	r20, Z+
	b2 = pgm_read_byte(&led30[((R*(4*2))+(C*2))+1] ) ;
    12dc:	ad 5e       	subi	r26, 0xED	; 237
    12de:	b7 4f       	sbci	r27, 0xF7	; 247
    12e0:	fd 01       	movw	r30, r26
    12e2:	54 91       	lpm	r21, Z+

	//	b1 = led30[ (R*(4*2))+(C*2)   ]  ;
	//	b2 = led30[((R*(4*2))+(C*2))+1];
	
	// if 10 == 11 then set to don't care (input ) tristate for PB0
	if( GET_BIT( b1,1 )==1 && GET_BIT( b1,0 )==1 ) {
    12e4:	84 2f       	mov	r24, r20
    12e6:	86 95       	lsr	r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	8c 01       	movw	r16, r24
    12ec:	01 70       	andi	r16, 0x01	; 1
    12ee:	10 70       	andi	r17, 0x00	; 0
    12f0:	80 ff       	sbrs	r24, 0
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <SetRC+0x58>
    12f4:	40 ff       	sbrs	r20, 0
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <SetRC+0x58>

		CLR_BIT(ddr_a,2 );
    12f8:	93 2f       	mov	r25, r19
    12fa:	9b 7f       	andi	r25, 0xFB	; 251
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <SetRC+0x5c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,2 );
    12fe:	93 2f       	mov	r25, r19
    1300:	94 60       	ori	r25, 0x04	; 4
	}

	// if 76 == 11 then set to don't care (input ) tristate  for PB1
	if( GET_BIT( b2,7 )==1 && GET_BIT( b2,6 )==1 ) {
    1302:	57 ff       	sbrs	r21, 7
    1304:	0a c0       	rjmp	.+20     	; 0x131a <SetRC+0x74>
    1306:	85 2f       	mov	r24, r21
    1308:	82 95       	swap	r24
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	83 70       	andi	r24, 0x03	; 3
    1310:	80 ff       	sbrs	r24, 0
    1312:	03 c0       	rjmp	.+6      	; 0x131a <SetRC+0x74>

		CLR_BIT(ddr_a,1 );
    1314:	39 2f       	mov	r19, r25
    1316:	3d 7f       	andi	r19, 0xFD	; 253
    1318:	02 c0       	rjmp	.+4      	; 0x131e <SetRC+0x78>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,1 );
    131a:	39 2f       	mov	r19, r25
    131c:	32 60       	ori	r19, 0x02	; 2
	}

	// if 54 == 11 then set to don't care (input ) tristate for PB2
	if( GET_BIT( b2,5 )==1 && GET_BIT( b2,4 )==1 ) {
    131e:	85 2f       	mov	r24, r21
    1320:	82 95       	swap	r24
    1322:	86 95       	lsr	r24
    1324:	87 70       	andi	r24, 0x07	; 7
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	ec 01       	movw	r28, r24
    132a:	c1 70       	andi	r28, 0x01	; 1
    132c:	d0 70       	andi	r29, 0x00	; 0
    132e:	80 ff       	sbrs	r24, 0
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <SetRC+0x9a>
    1332:	85 2f       	mov	r24, r21
    1334:	82 95       	swap	r24
    1336:	8f 70       	andi	r24, 0x0F	; 15
    1338:	80 ff       	sbrs	r24, 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <SetRC+0x9a>

		CLR_BIT(ddr_a,0 );
    133c:	3e 7f       	andi	r19, 0xFE	; 254
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <SetRC+0x9c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,0 );
    1340:	31 60       	ori	r19, 0x01	; 1
	}

	// if 32 == 11 then set to don't care (input ) tristate for PB3
	if( GET_BIT( b2,3 )==1 && GET_BIT( b2,2 )==1 ) {
    1342:	85 2f       	mov	r24, r21
    1344:	86 95       	lsr	r24
    1346:	86 95       	lsr	r24
    1348:	86 95       	lsr	r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	dc 01       	movw	r26, r24
    134e:	a1 70       	andi	r26, 0x01	; 1
    1350:	b0 70       	andi	r27, 0x00	; 0
    1352:	80 ff       	sbrs	r24, 0
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <SetRC+0xbe>
    1356:	85 2f       	mov	r24, r21
    1358:	86 95       	lsr	r24
    135a:	86 95       	lsr	r24
    135c:	80 ff       	sbrs	r24, 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <SetRC+0xbe>

		CLR_BIT(ddr_a,4 );
    1360:	3f 7e       	andi	r19, 0xEF	; 239
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <SetRC+0xc0>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,4 );
    1364:	30 61       	ori	r19, 0x10	; 16
	}

	// if 10 == 11 then set to don't care (input ) tristate for PB4
	if( GET_BIT( b2,1 )==1 && GET_BIT( b2,0 )==1 ) {
    1366:	85 2f       	mov	r24, r21
    1368:	86 95       	lsr	r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	bc 01       	movw	r22, r24
    136e:	61 70       	andi	r22, 0x01	; 1
    1370:	70 70       	andi	r23, 0x00	; 0
    1372:	80 ff       	sbrs	r24, 0
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <SetRC+0xda>
    1376:	50 ff       	sbrs	r21, 0
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <SetRC+0xda>

		CLR_BIT(ddr_a,3 );
    137a:	93 2f       	mov	r25, r19
    137c:	97 7f       	andi	r25, 0xF7	; 247
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <SetRC+0xde>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,3 );
    1380:	93 2f       	mov	r25, r19
    1382:	98 60       	ori	r25, 0x08	; 8

	/// all of the DDR's are set


	// if 10 == 00 then set to low for PB0
	if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==0 ) {
    1384:	01 2b       	or	r16, r17
    1386:	29 f4       	brne	.+10     	; 0x1392 <SetRC+0xec>
    1388:	40 fd       	sbrc	r20, 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <SetRC+0xea>

		CLR_BIT(port_a,2); //set to off
    138c:	2b 7f       	andi	r18, 0xFB	; 251
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <SetRC+0xec>

	// if 32 == 01 then set to high for PB0
	} else if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,2 );
    1390:	24 60       	ori	r18, 0x04	; 4
	}

	// if 76 == 00 then set to low for PB1
	if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 )==0 ) {
    1392:	57 fd       	sbrc	r21, 7
    1394:	0a c0       	rjmp	.+20     	; 0x13aa <SetRC+0x104>
    1396:	85 2f       	mov	r24, r21
    1398:	82 95       	swap	r24
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	83 70       	andi	r24, 0x03	; 3
    13a0:	80 fd       	sbrc	r24, 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <SetRC+0x102>

		CLR_BIT(port_a,1); //set to off
    13a4:	2d 7f       	andi	r18, 0xFD	; 253
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <SetRC+0x104>

	// if 32 == 01 then set to high for PB1
	} else if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 ) ==1 ) { 

		// set to on
		SET_BIT(port_a ,1 );
    13a8:	22 60       	ori	r18, 0x02	; 2
	}


	// if 54 == 00 then set to low for PB2
	if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==0 ) {
    13aa:	cd 2b       	or	r28, r29
    13ac:	41 f4       	brne	.+16     	; 0x13be <SetRC+0x118>
    13ae:	85 2f       	mov	r24, r21
    13b0:	82 95       	swap	r24
    13b2:	8f 70       	andi	r24, 0x0F	; 15
    13b4:	80 fd       	sbrc	r24, 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <SetRC+0x116>

		CLR_BIT(port_a,0); //set to off
    13b8:	2e 7f       	andi	r18, 0xFE	; 254
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <SetRC+0x118>

	// if 32 == 01 then set to high for PB2
	} else if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==1 ) { 

		// set to on
		SET_BIT(port_a ,0 );
    13bc:	21 60       	ori	r18, 0x01	; 1
	}

	// if 32 == 00 then set to low for PB3
	if( GET_BIT( b2,3 )==0 && GET_BIT( b2,2 )==0 ) {
    13be:	ab 2b       	or	r26, r27
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <SetRC+0x12c>
    13c2:	85 2f       	mov	r24, r21
    13c4:	86 95       	lsr	r24
    13c6:	86 95       	lsr	r24
    13c8:	80 fd       	sbrc	r24, 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <SetRC+0x12a>

		CLR_BIT(port_a,4); //set to off
    13cc:	2f 7e       	andi	r18, 0xEF	; 239
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <SetRC+0x12c>

	// if 32 == 01 then set to high for PB3
	} else if( GET_BIT( b2,3 ) ==0 && GET_BIT( b2,2 )==1 ) { 

		// set to on
		SET_BIT(port_a ,4 );
    13d0:	20 61       	ori	r18, 0x10	; 16
	}

	// if 10 == 00 then set to low for PB4
	if( GET_BIT( b2,1 )==0 && GET_BIT( b2,0 )==0 ) {
    13d2:	67 2b       	or	r22, r23
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <SetRC+0x13a>
    13d6:	50 fd       	sbrc	r21, 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <SetRC+0x138>

		CLR_BIT(port_a,3); //set to off
    13da:	27 7f       	andi	r18, 0xF7	; 247
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <SetRC+0x13a>

	// if 32 == 01 then set to high for PB4
	} else if( GET_BIT( b2,1)==0 && GET_BIT( b2,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,3 );
    13de:	28 60       	ori	r18, 0x08	; 8
	}

	//set all at once.
	PORTA = port_a;
    13e0:	2b bb       	out	0x1b, r18	; 27
	DDRA = ddr_a;
    13e2:	9a bb       	out	0x1a, r25	; 26
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <scrollLEDS>:

void scrollLEDS(void)
{
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
	static int c = 0;
	static int r = 0;

	static unsigned short count = 0;

	count ++ ;
    13f6:	80 91 4c 05 	lds	r24, 0x054C
    13fa:	90 91 4d 05 	lds	r25, 0x054D
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	90 93 4d 05 	sts	0x054D, r25
    1404:	80 93 4c 05 	sts	0x054C, r24

	if ( count < 800  ) return;
    1408:	80 52       	subi	r24, 0x20	; 32
    140a:	93 40       	sbci	r25, 0x03	; 3
    140c:	60 f1       	brcs	.+88     	; 0x1466 <scrollLEDS+0x78>

	count = 0;
    140e:	10 92 4d 05 	sts	0x054D, r1
    1412:	10 92 4c 05 	sts	0x054C, r1

	SetRC(r,c);
    1416:	00 91 4e 05 	lds	r16, 0x054E
    141a:	10 91 4f 05 	lds	r17, 0x054F
    141e:	c0 91 50 05 	lds	r28, 0x0550
    1422:	d0 91 51 05 	lds	r29, 0x0551
    1426:	80 2f       	mov	r24, r16
    1428:	6c 2f       	mov	r22, r28
    142a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SetRC>

	r++ ;
    142e:	0f 5f       	subi	r16, 0xFF	; 255
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	10 93 4f 05 	sts	0x054F, r17
    1436:	00 93 4e 05 	sts	0x054E, r16

	if ( r == 5 )  {
    143a:	05 30       	cpi	r16, 0x05	; 5
    143c:	11 05       	cpc	r17, r1
    143e:	49 f4       	brne	.+18     	; 0x1452 <scrollLEDS+0x64>
		r = 0;
    1440:	10 92 4f 05 	sts	0x054F, r1
    1444:	10 92 4e 05 	sts	0x054E, r1
		c++ ;
    1448:	21 96       	adiw	r28, 0x01	; 1
    144a:	d0 93 51 05 	sts	0x0551, r29
    144e:	c0 93 50 05 	sts	0x0550, r28
	}

	if ( c == 4 ) { 
    1452:	80 91 50 05 	lds	r24, 0x0550
    1456:	90 91 51 05 	lds	r25, 0x0551
    145a:	04 97       	sbiw	r24, 0x04	; 4
    145c:	21 f4       	brne	.+8      	; 0x1466 <scrollLEDS+0x78>
		c = 0;
    145e:	10 92 51 05 	sts	0x0551, r1
    1462:	10 92 50 05 	sts	0x0550, r1
	}
	 
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <main>:
}

int main(void) 
{
	/* Disable interrupts at first */
	cli();
    1470:	f8 94       	cli

	/* Setup I/O Pins */
	init_io();
    1472:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_io>


	/* Setup Timers */
	init_timers();
    1476:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <init_timers>
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
    147a:	80 e9       	ldi	r24, 0x90	; 144
    147c:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    1484:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
    1488:	8f e1       	ldi	r24, 0x1F	; 31
    148a:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
    148c:	80 e8       	ldi	r24, 0x80	; 128
    148e:	8b b9       	out	0x0b, r24	; 11

	/* Enable USART and Pin Interrupts */
	init_interrupts();


	PORTB = 0xFF;
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	88 bb       	out	0x18, r24	; 24

	OCR1A = 500;
    1494:	84 ef       	ldi	r24, 0xF4	; 244
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	9b bd       	out	0x2b, r25	; 43
    149a:	8a bd       	out	0x2a, r24	; 42
}

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
    149c:	86 b1       	in	r24, 0x06	; 6
    149e:	87 60       	ori	r24, 0x07	; 7
    14a0:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
    14a2:	37 9a       	sbi	0x06, 7	; 6

	/*
		Pitch bend needs to start at 64 (middle value) or pitch will start out
		two half steps too low (0 = max bend downward)
	 */
	current_midi_pb_l = current_midi_pb_h = 64;
    14a4:	80 e4       	ldi	r24, 0x40	; 64
    14a6:	80 93 5b 05 	sts	0x055B, r24
    14aa:	80 93 5a 05 	sts	0x055A, r24

	num_bytes = 0;
    14ae:	10 92 53 05 	sts	0x0553, r1
	num_ccs = 0;
    14b2:	10 92 59 05 	sts	0x0559, r1
	num_pbs = 0;
    14b6:	10 92 6c 05 	sts	0x056C, r1
	byte_ready = 0;
    14ba:	10 92 52 05 	sts	0x0552, r1
	midi_channel = 0;
    14be:	10 92 6e 05 	sts	0x056E, r1
	master_volume = 127;
    14c2:	8f e7       	ldi	r24, 0x7F	; 127
    14c4:	80 93 54 05 	sts	0x0554, r24

	amplitude = 0;
    14c8:	10 92 5d 05 	sts	0x055D, r1
	fine_pitch_bend = 0;
    14cc:	10 92 62 05 	sts	0x0562, r1
    14d0:	10 92 61 05 	sts	0x0561, r1
	note_on_gate = 0;
    14d4:	10 92 65 05 	sts	0x0565, r1

	sweep_enabled = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	80 93 6d 05 	sts	0x056D, r24
	sweep_direction = SWEEP_UP;
    14de:	80 93 6b 05 	sts	0x056B, r24
	sweep_amount = 0;
    14e2:	10 92 70 05 	sts	0x0570, r1
	sweep_loop_enabled = 1;
    14e6:	80 93 73 05 	sts	0x0573, r24
	fake_16_timer = 0;
    14ea:	10 92 64 05 	sts	0x0564, r1
    14ee:	10 92 63 05 	sts	0x0563, r1

	/* Finally, enable global interrupts */
	sei();
    14f2:	78 94       	sei

	//play(song[1]);

  	adctimer = 0;
    14f4:	10 92 10 05 	sts	0x0510, r1
	/*Main Loop*/
	while (1) {

	    uint8_t adcchan = 0;

	    adctimer++;
    14f8:	80 91 10 05 	lds	r24, 0x0510
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	80 93 10 05 	sts	0x0510, r24
	    adctimer &= (NUM_ADC_SAMPLES-1);
    1502:	80 91 10 05 	lds	r24, 0x0510
    1506:	8f 71       	andi	r24, 0x1F	; 31
    1508:	80 93 10 05 	sts	0x0510, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {

			ADMUX = _BV(REFS0) | adcchan;
    150e:	89 2f       	mov	r24, r25
    1510:	80 64       	ori	r24, 0x40	; 64
    1512:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= _BV(ADSC);
    1514:	36 9a       	sbi	0x06, 6	; 6

	    adctimer++;
	    adctimer &= (NUM_ADC_SAMPLES-1);

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	98 30       	cpi	r25, 0x08	; 8
    151a:	c9 f7       	brne	.-14     	; 0x150e <main+0x9e>
//			read_adc(knobs+adcchan);


	    }

		check_byte_received();
    151c:	0e 94 86 06 	call	0xd0c	; 0xd0c <check_byte_received>


	    // update values after we've read averaged values from all knobs
	    if ( adctimer == 0 ) {
    1520:	80 91 10 05 	lds	r24, 0x0510
    1524:	88 23       	and	r24, r24
    1526:	41 f4       	brne	.+16     	; 0x1538 <main+0xc8>

			fine_pitch_bend = knobs[PITCH_KNOB].val;	
    1528:	80 91 11 05 	lds	r24, 0x0511
    152c:	90 91 12 05 	lds	r25, 0x0512
    1530:	90 93 62 05 	sts	0x0562, r25
    1534:	80 93 61 05 	sts	0x0561, r24

		}
	
	
		scrollLEDS();
    1538:	0e 94 f7 09 	call	0x13ee	; 0x13ee <scrollLEDS>
    153c:	dd cf       	rjmp	.-70     	; 0x14f8 <main+0x88>

0000153e <__fixunssfsi>:
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	7b 01       	movw	r14, r22
    1548:	8c 01       	movw	r16, r24
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	5f e4       	ldi	r21, 0x4F	; 79
    1552:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__gesf2>
    1556:	88 23       	and	r24, r24
    1558:	8c f0       	brlt	.+34     	; 0x157c <__fixunssfsi+0x3e>
    155a:	c8 01       	movw	r24, r16
    155c:	b7 01       	movw	r22, r14
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	5f e4       	ldi	r21, 0x4F	; 79
    1566:	0e 94 17 0c 	call	0x182e	; 0x182e <__subsf3>
    156a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fixsfsi>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	20 50       	subi	r18, 0x00	; 0
    1574:	30 40       	sbci	r19, 0x00	; 0
    1576:	40 40       	sbci	r20, 0x00	; 0
    1578:	50 48       	sbci	r21, 0x80	; 128
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <__fixunssfsi+0x4a>
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fixsfsi>
    1584:	9b 01       	movw	r18, r22
    1586:	ac 01       	movw	r20, r24
    1588:	b9 01       	movw	r22, r18
    158a:	ca 01       	movw	r24, r20
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	08 95       	ret

00001596 <_fpadd_parts>:
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__prologue_saves__>
    15a2:	dc 01       	movw	r26, r24
    15a4:	2b 01       	movw	r4, r22
    15a6:	fa 01       	movw	r30, r20
    15a8:	9c 91       	ld	r25, X
    15aa:	92 30       	cpi	r25, 0x02	; 2
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <_fpadd_parts+0x1a>
    15ae:	39 c1       	rjmp	.+626    	; 0x1822 <_fpadd_parts+0x28c>
    15b0:	eb 01       	movw	r28, r22
    15b2:	88 81       	ld	r24, Y
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <_fpadd_parts+0x24>
    15b8:	33 c1       	rjmp	.+614    	; 0x1820 <_fpadd_parts+0x28a>
    15ba:	94 30       	cpi	r25, 0x04	; 4
    15bc:	69 f4       	brne	.+26     	; 0x15d8 <_fpadd_parts+0x42>
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_fpadd_parts+0x2e>
    15c2:	2f c1       	rjmp	.+606    	; 0x1822 <_fpadd_parts+0x28c>
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	9c 91       	ld	r25, X
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	98 17       	cp	r25, r24
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_fpadd_parts+0x3c>
    15d0:	28 c1       	rjmp	.+592    	; 0x1822 <_fpadd_parts+0x28c>
    15d2:	a7 e0       	ldi	r26, 0x07	; 7
    15d4:	b4 e0       	ldi	r27, 0x04	; 4
    15d6:	25 c1       	rjmp	.+586    	; 0x1822 <_fpadd_parts+0x28c>
    15d8:	84 30       	cpi	r24, 0x04	; 4
    15da:	09 f4       	brne	.+2      	; 0x15de <_fpadd_parts+0x48>
    15dc:	21 c1       	rjmp	.+578    	; 0x1820 <_fpadd_parts+0x28a>
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	a9 f4       	brne	.+42     	; 0x160c <_fpadd_parts+0x76>
    15e2:	92 30       	cpi	r25, 0x02	; 2
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_fpadd_parts+0x52>
    15e6:	1d c1       	rjmp	.+570    	; 0x1822 <_fpadd_parts+0x28c>
    15e8:	9a 01       	movw	r18, r20
    15ea:	ad 01       	movw	r20, r26
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	ea 01       	movw	r28, r20
    15f0:	09 90       	ld	r0, Y+
    15f2:	ae 01       	movw	r20, r28
    15f4:	e9 01       	movw	r28, r18
    15f6:	09 92       	st	Y+, r0
    15f8:	9e 01       	movw	r18, r28
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	c1 f7       	brne	.-16     	; 0x15ee <_fpadd_parts+0x58>
    15fe:	e2 01       	movw	r28, r4
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	11 96       	adiw	r26, 0x01	; 1
    1604:	9c 91       	ld	r25, X
    1606:	89 23       	and	r24, r25
    1608:	81 83       	std	Z+1, r24	; 0x01
    160a:	08 c1       	rjmp	.+528    	; 0x181c <_fpadd_parts+0x286>
    160c:	92 30       	cpi	r25, 0x02	; 2
    160e:	09 f4       	brne	.+2      	; 0x1612 <_fpadd_parts+0x7c>
    1610:	07 c1       	rjmp	.+526    	; 0x1820 <_fpadd_parts+0x28a>
    1612:	12 96       	adiw	r26, 0x02	; 2
    1614:	2d 90       	ld	r2, X+
    1616:	3c 90       	ld	r3, X
    1618:	13 97       	sbiw	r26, 0x03	; 3
    161a:	eb 01       	movw	r28, r22
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	9b 81       	ldd	r25, Y+3	; 0x03
    1620:	14 96       	adiw	r26, 0x04	; 4
    1622:	ad 90       	ld	r10, X+
    1624:	bd 90       	ld	r11, X+
    1626:	cd 90       	ld	r12, X+
    1628:	dc 90       	ld	r13, X
    162a:	17 97       	sbiw	r26, 0x07	; 7
    162c:	ec 80       	ldd	r14, Y+4	; 0x04
    162e:	fd 80       	ldd	r15, Y+5	; 0x05
    1630:	0e 81       	ldd	r16, Y+6	; 0x06
    1632:	1f 81       	ldd	r17, Y+7	; 0x07
    1634:	91 01       	movw	r18, r2
    1636:	28 1b       	sub	r18, r24
    1638:	39 0b       	sbc	r19, r25
    163a:	b9 01       	movw	r22, r18
    163c:	37 ff       	sbrs	r19, 7
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <_fpadd_parts+0xb2>
    1640:	66 27       	eor	r22, r22
    1642:	77 27       	eor	r23, r23
    1644:	62 1b       	sub	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	60 32       	cpi	r22, 0x20	; 32
    164a:	71 05       	cpc	r23, r1
    164c:	0c f0       	brlt	.+2      	; 0x1650 <_fpadd_parts+0xba>
    164e:	61 c0       	rjmp	.+194    	; 0x1712 <_fpadd_parts+0x17c>
    1650:	12 16       	cp	r1, r18
    1652:	13 06       	cpc	r1, r19
    1654:	6c f5       	brge	.+90     	; 0x16b0 <_fpadd_parts+0x11a>
    1656:	37 01       	movw	r6, r14
    1658:	48 01       	movw	r8, r16
    165a:	06 2e       	mov	r0, r22
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <_fpadd_parts+0xd0>
    165e:	96 94       	lsr	r9
    1660:	87 94       	ror	r8
    1662:	77 94       	ror	r7
    1664:	67 94       	ror	r6
    1666:	0a 94       	dec	r0
    1668:	d2 f7       	brpl	.-12     	; 0x165e <_fpadd_parts+0xc8>
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	04 c0       	rjmp	.+8      	; 0x167c <_fpadd_parts+0xe6>
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	44 1f       	adc	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	6a 95       	dec	r22
    167e:	d2 f7       	brpl	.-12     	; 0x1674 <_fpadd_parts+0xde>
    1680:	21 50       	subi	r18, 0x01	; 1
    1682:	30 40       	sbci	r19, 0x00	; 0
    1684:	40 40       	sbci	r20, 0x00	; 0
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	2e 21       	and	r18, r14
    168a:	3f 21       	and	r19, r15
    168c:	40 23       	and	r20, r16
    168e:	51 23       	and	r21, r17
    1690:	21 15       	cp	r18, r1
    1692:	31 05       	cpc	r19, r1
    1694:	41 05       	cpc	r20, r1
    1696:	51 05       	cpc	r21, r1
    1698:	21 f0       	breq	.+8      	; 0x16a2 <_fpadd_parts+0x10c>
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	79 01       	movw	r14, r18
    16a4:	8a 01       	movw	r16, r20
    16a6:	e6 28       	or	r14, r6
    16a8:	f7 28       	or	r15, r7
    16aa:	08 29       	or	r16, r8
    16ac:	19 29       	or	r17, r9
    16ae:	3c c0       	rjmp	.+120    	; 0x1728 <_fpadd_parts+0x192>
    16b0:	23 2b       	or	r18, r19
    16b2:	d1 f1       	breq	.+116    	; 0x1728 <_fpadd_parts+0x192>
    16b4:	26 0e       	add	r2, r22
    16b6:	37 1e       	adc	r3, r23
    16b8:	35 01       	movw	r6, r10
    16ba:	46 01       	movw	r8, r12
    16bc:	06 2e       	mov	r0, r22
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <_fpadd_parts+0x132>
    16c0:	96 94       	lsr	r9
    16c2:	87 94       	ror	r8
    16c4:	77 94       	ror	r7
    16c6:	67 94       	ror	r6
    16c8:	0a 94       	dec	r0
    16ca:	d2 f7       	brpl	.-12     	; 0x16c0 <_fpadd_parts+0x12a>
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <_fpadd_parts+0x148>
    16d6:	22 0f       	add	r18, r18
    16d8:	33 1f       	adc	r19, r19
    16da:	44 1f       	adc	r20, r20
    16dc:	55 1f       	adc	r21, r21
    16de:	6a 95       	dec	r22
    16e0:	d2 f7       	brpl	.-12     	; 0x16d6 <_fpadd_parts+0x140>
    16e2:	21 50       	subi	r18, 0x01	; 1
    16e4:	30 40       	sbci	r19, 0x00	; 0
    16e6:	40 40       	sbci	r20, 0x00	; 0
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	2a 21       	and	r18, r10
    16ec:	3b 21       	and	r19, r11
    16ee:	4c 21       	and	r20, r12
    16f0:	5d 21       	and	r21, r13
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	41 05       	cpc	r20, r1
    16f8:	51 05       	cpc	r21, r1
    16fa:	21 f0       	breq	.+8      	; 0x1704 <_fpadd_parts+0x16e>
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	59 01       	movw	r10, r18
    1706:	6a 01       	movw	r12, r20
    1708:	a6 28       	or	r10, r6
    170a:	b7 28       	or	r11, r7
    170c:	c8 28       	or	r12, r8
    170e:	d9 28       	or	r13, r9
    1710:	0b c0       	rjmp	.+22     	; 0x1728 <_fpadd_parts+0x192>
    1712:	82 15       	cp	r24, r2
    1714:	93 05       	cpc	r25, r3
    1716:	2c f0       	brlt	.+10     	; 0x1722 <_fpadd_parts+0x18c>
    1718:	1c 01       	movw	r2, r24
    171a:	aa 24       	eor	r10, r10
    171c:	bb 24       	eor	r11, r11
    171e:	65 01       	movw	r12, r10
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <_fpadd_parts+0x192>
    1722:	ee 24       	eor	r14, r14
    1724:	ff 24       	eor	r15, r15
    1726:	87 01       	movw	r16, r14
    1728:	11 96       	adiw	r26, 0x01	; 1
    172a:	9c 91       	ld	r25, X
    172c:	d2 01       	movw	r26, r4
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	8c 91       	ld	r24, X
    1732:	98 17       	cp	r25, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <_fpadd_parts+0x1a2>
    1736:	45 c0       	rjmp	.+138    	; 0x17c2 <_fpadd_parts+0x22c>
    1738:	99 23       	and	r25, r25
    173a:	39 f0       	breq	.+14     	; 0x174a <_fpadd_parts+0x1b4>
    173c:	a8 01       	movw	r20, r16
    173e:	97 01       	movw	r18, r14
    1740:	2a 19       	sub	r18, r10
    1742:	3b 09       	sbc	r19, r11
    1744:	4c 09       	sbc	r20, r12
    1746:	5d 09       	sbc	r21, r13
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <_fpadd_parts+0x1c0>
    174a:	a6 01       	movw	r20, r12
    174c:	95 01       	movw	r18, r10
    174e:	2e 19       	sub	r18, r14
    1750:	3f 09       	sbc	r19, r15
    1752:	40 0b       	sbc	r20, r16
    1754:	51 0b       	sbc	r21, r17
    1756:	57 fd       	sbrc	r21, 7
    1758:	08 c0       	rjmp	.+16     	; 0x176a <_fpadd_parts+0x1d4>
    175a:	11 82       	std	Z+1, r1	; 0x01
    175c:	33 82       	std	Z+3, r3	; 0x03
    175e:	22 82       	std	Z+2, r2	; 0x02
    1760:	24 83       	std	Z+4, r18	; 0x04
    1762:	35 83       	std	Z+5, r19	; 0x05
    1764:	46 83       	std	Z+6, r20	; 0x06
    1766:	57 83       	std	Z+7, r21	; 0x07
    1768:	1d c0       	rjmp	.+58     	; 0x17a4 <_fpadd_parts+0x20e>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	81 83       	std	Z+1, r24	; 0x01
    176e:	33 82       	std	Z+3, r3	; 0x03
    1770:	22 82       	std	Z+2, r2	; 0x02
    1772:	88 27       	eor	r24, r24
    1774:	99 27       	eor	r25, r25
    1776:	dc 01       	movw	r26, r24
    1778:	82 1b       	sub	r24, r18
    177a:	93 0b       	sbc	r25, r19
    177c:	a4 0b       	sbc	r26, r20
    177e:	b5 0b       	sbc	r27, r21
    1780:	84 83       	std	Z+4, r24	; 0x04
    1782:	95 83       	std	Z+5, r25	; 0x05
    1784:	a6 83       	std	Z+6, r26	; 0x06
    1786:	b7 83       	std	Z+7, r27	; 0x07
    1788:	0d c0       	rjmp	.+26     	; 0x17a4 <_fpadd_parts+0x20e>
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	44 1f       	adc	r20, r20
    1790:	55 1f       	adc	r21, r21
    1792:	24 83       	std	Z+4, r18	; 0x04
    1794:	35 83       	std	Z+5, r19	; 0x05
    1796:	46 83       	std	Z+6, r20	; 0x06
    1798:	57 83       	std	Z+7, r21	; 0x07
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
    17a4:	24 81       	ldd	r18, Z+4	; 0x04
    17a6:	35 81       	ldd	r19, Z+5	; 0x05
    17a8:	46 81       	ldd	r20, Z+6	; 0x06
    17aa:	57 81       	ldd	r21, Z+7	; 0x07
    17ac:	da 01       	movw	r26, r20
    17ae:	c9 01       	movw	r24, r18
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	a1 09       	sbc	r26, r1
    17b4:	b1 09       	sbc	r27, r1
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	af 4f       	sbci	r26, 0xFF	; 255
    17bc:	bf 43       	sbci	r27, 0x3F	; 63
    17be:	28 f3       	brcs	.-54     	; 0x178a <_fpadd_parts+0x1f4>
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <_fpadd_parts+0x242>
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	33 82       	std	Z+3, r3	; 0x03
    17c6:	22 82       	std	Z+2, r2	; 0x02
    17c8:	ea 0c       	add	r14, r10
    17ca:	fb 1c       	adc	r15, r11
    17cc:	0c 1d       	adc	r16, r12
    17ce:	1d 1d       	adc	r17, r13
    17d0:	e4 82       	std	Z+4, r14	; 0x04
    17d2:	f5 82       	std	Z+5, r15	; 0x05
    17d4:	06 83       	std	Z+6, r16	; 0x06
    17d6:	17 83       	std	Z+7, r17	; 0x07
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	80 83       	st	Z, r24
    17dc:	24 81       	ldd	r18, Z+4	; 0x04
    17de:	35 81       	ldd	r19, Z+5	; 0x05
    17e0:	46 81       	ldd	r20, Z+6	; 0x06
    17e2:	57 81       	ldd	r21, Z+7	; 0x07
    17e4:	57 ff       	sbrs	r21, 7
    17e6:	1a c0       	rjmp	.+52     	; 0x181c <_fpadd_parts+0x286>
    17e8:	c9 01       	movw	r24, r18
    17ea:	aa 27       	eor	r26, r26
    17ec:	97 fd       	sbrc	r25, 7
    17ee:	a0 95       	com	r26
    17f0:	ba 2f       	mov	r27, r26
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	90 70       	andi	r25, 0x00	; 0
    17f6:	a0 70       	andi	r26, 0x00	; 0
    17f8:	b0 70       	andi	r27, 0x00	; 0
    17fa:	56 95       	lsr	r21
    17fc:	47 95       	ror	r20
    17fe:	37 95       	ror	r19
    1800:	27 95       	ror	r18
    1802:	82 2b       	or	r24, r18
    1804:	93 2b       	or	r25, r19
    1806:	a4 2b       	or	r26, r20
    1808:	b5 2b       	or	r27, r21
    180a:	84 83       	std	Z+4, r24	; 0x04
    180c:	95 83       	std	Z+5, r25	; 0x05
    180e:	a6 83       	std	Z+6, r26	; 0x06
    1810:	b7 83       	std	Z+7, r27	; 0x07
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	93 83       	std	Z+3, r25	; 0x03
    181a:	82 83       	std	Z+2, r24	; 0x02
    181c:	df 01       	movw	r26, r30
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <_fpadd_parts+0x28c>
    1820:	d2 01       	movw	r26, r4
    1822:	cd 01       	movw	r24, r26
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	e2 e1       	ldi	r30, 0x12	; 18
    182a:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__epilogue_restores__>

0000182e <__subsf3>:
    182e:	a0 e2       	ldi	r26, 0x20	; 32
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ed e1       	ldi	r30, 0x1D	; 29
    1834:	fc e0       	ldi	r31, 0x0C	; 12
    1836:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__+0x18>
    183a:	69 83       	std	Y+1, r22	; 0x01
    183c:	7a 83       	std	Y+2, r23	; 0x02
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	9c 83       	std	Y+4, r25	; 0x04
    1842:	2d 83       	std	Y+5, r18	; 0x05
    1844:	3e 83       	std	Y+6, r19	; 0x06
    1846:	4f 83       	std	Y+7, r20	; 0x07
    1848:	58 87       	std	Y+8, r21	; 0x08
    184a:	e9 e0       	ldi	r30, 0x09	; 9
    184c:	ee 2e       	mov	r14, r30
    184e:	f1 2c       	mov	r15, r1
    1850:	ec 0e       	add	r14, r28
    1852:	fd 1e       	adc	r15, r29
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	b7 01       	movw	r22, r14
    185a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    185e:	8e 01       	movw	r16, r28
    1860:	0f 5e       	subi	r16, 0xEF	; 239
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	ce 01       	movw	r24, r28
    1866:	05 96       	adiw	r24, 0x05	; 5
    1868:	b8 01       	movw	r22, r16
    186a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    186e:	8a 89       	ldd	r24, Y+18	; 0x12
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	89 27       	eor	r24, r25
    1874:	8a 8b       	std	Y+18, r24	; 0x12
    1876:	c7 01       	movw	r24, r14
    1878:	b8 01       	movw	r22, r16
    187a:	ae 01       	movw	r20, r28
    187c:	47 5e       	subi	r20, 0xE7	; 231
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_fpadd_parts>
    1884:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__pack_f>
    1888:	a0 96       	adiw	r28, 0x20	; 32
    188a:	e6 e0       	ldi	r30, 0x06	; 6
    188c:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__+0x18>

00001890 <__addsf3>:
    1890:	a0 e2       	ldi	r26, 0x20	; 32
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ee e4       	ldi	r30, 0x4E	; 78
    1896:	fc e0       	ldi	r31, 0x0C	; 12
    1898:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__+0x18>
    189c:	69 83       	std	Y+1, r22	; 0x01
    189e:	7a 83       	std	Y+2, r23	; 0x02
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	3e 83       	std	Y+6, r19	; 0x06
    18a8:	4f 83       	std	Y+7, r20	; 0x07
    18aa:	58 87       	std	Y+8, r21	; 0x08
    18ac:	f9 e0       	ldi	r31, 0x09	; 9
    18ae:	ef 2e       	mov	r14, r31
    18b0:	f1 2c       	mov	r15, r1
    18b2:	ec 0e       	add	r14, r28
    18b4:	fd 1e       	adc	r15, r29
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	b7 01       	movw	r22, r14
    18bc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    18c0:	8e 01       	movw	r16, r28
    18c2:	0f 5e       	subi	r16, 0xEF	; 239
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	ce 01       	movw	r24, r28
    18c8:	05 96       	adiw	r24, 0x05	; 5
    18ca:	b8 01       	movw	r22, r16
    18cc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    18d0:	c7 01       	movw	r24, r14
    18d2:	b8 01       	movw	r22, r16
    18d4:	ae 01       	movw	r20, r28
    18d6:	47 5e       	subi	r20, 0xE7	; 231
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_fpadd_parts>
    18de:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__pack_f>
    18e2:	a0 96       	adiw	r28, 0x20	; 32
    18e4:	e6 e0       	ldi	r30, 0x06	; 6
    18e6:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__+0x18>

000018ea <__mulsf3>:
    18ea:	a0 e2       	ldi	r26, 0x20	; 32
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e7       	ldi	r30, 0x7B	; 123
    18f0:	fc e0       	ldi	r31, 0x0C	; 12
    18f2:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__prologue_saves__>
    18f6:	69 83       	std	Y+1, r22	; 0x01
    18f8:	7a 83       	std	Y+2, r23	; 0x02
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	2d 83       	std	Y+5, r18	; 0x05
    1900:	3e 83       	std	Y+6, r19	; 0x06
    1902:	4f 83       	std	Y+7, r20	; 0x07
    1904:	58 87       	std	Y+8, r21	; 0x08
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	be 01       	movw	r22, r28
    190c:	67 5f       	subi	r22, 0xF7	; 247
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1914:	ce 01       	movw	r24, r28
    1916:	05 96       	adiw	r24, 0x05	; 5
    1918:	be 01       	movw	r22, r28
    191a:	6f 5e       	subi	r22, 0xEF	; 239
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1922:	99 85       	ldd	r25, Y+9	; 0x09
    1924:	92 30       	cpi	r25, 0x02	; 2
    1926:	88 f0       	brcs	.+34     	; 0x194a <__mulsf3+0x60>
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	c8 f0       	brcs	.+50     	; 0x1960 <__mulsf3+0x76>
    192e:	94 30       	cpi	r25, 0x04	; 4
    1930:	19 f4       	brne	.+6      	; 0x1938 <__mulsf3+0x4e>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	51 f4       	brne	.+20     	; 0x194a <__mulsf3+0x60>
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__mulsf3+0x56>
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	29 f4       	brne	.+10     	; 0x1946 <__mulsf3+0x5c>
    193c:	92 30       	cpi	r25, 0x02	; 2
    193e:	81 f4       	brne	.+32     	; 0x1960 <__mulsf3+0x76>
    1940:	87 e0       	ldi	r24, 0x07	; 7
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	c6 c0       	rjmp	.+396    	; 0x1ad2 <__mulsf3+0x1e8>
    1946:	92 30       	cpi	r25, 0x02	; 2
    1948:	49 f4       	brne	.+18     	; 0x195c <__mulsf3+0x72>
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	8a 89       	ldd	r24, Y+18	; 0x12
    1950:	98 13       	cpse	r25, r24
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	2a 87       	std	Y+10, r18	; 0x0a
    1956:	ce 01       	movw	r24, r28
    1958:	09 96       	adiw	r24, 0x09	; 9
    195a:	bb c0       	rjmp	.+374    	; 0x1ad2 <__mulsf3+0x1e8>
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	49 f4       	brne	.+18     	; 0x1972 <__mulsf3+0x88>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	8a 89       	ldd	r24, Y+18	; 0x12
    1966:	98 13       	cpse	r25, r24
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	2a 8b       	std	Y+18, r18	; 0x12
    196c:	ce 01       	movw	r24, r28
    196e:	41 96       	adiw	r24, 0x11	; 17
    1970:	b0 c0       	rjmp	.+352    	; 0x1ad2 <__mulsf3+0x1e8>
    1972:	2d 84       	ldd	r2, Y+13	; 0x0d
    1974:	3e 84       	ldd	r3, Y+14	; 0x0e
    1976:	4f 84       	ldd	r4, Y+15	; 0x0f
    1978:	58 88       	ldd	r5, Y+16	; 0x10
    197a:	6d 88       	ldd	r6, Y+21	; 0x15
    197c:	7e 88       	ldd	r7, Y+22	; 0x16
    197e:	8f 88       	ldd	r8, Y+23	; 0x17
    1980:	98 8c       	ldd	r9, Y+24	; 0x18
    1982:	ee 24       	eor	r14, r14
    1984:	ff 24       	eor	r15, r15
    1986:	87 01       	movw	r16, r14
    1988:	aa 24       	eor	r10, r10
    198a:	bb 24       	eor	r11, r11
    198c:	65 01       	movw	r12, r10
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	e0 e0       	ldi	r30, 0x00	; 0
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	c1 01       	movw	r24, r2
    199c:	81 70       	andi	r24, 0x01	; 1
    199e:	90 70       	andi	r25, 0x00	; 0
    19a0:	89 2b       	or	r24, r25
    19a2:	e9 f0       	breq	.+58     	; 0x19de <__mulsf3+0xf4>
    19a4:	e6 0c       	add	r14, r6
    19a6:	f7 1c       	adc	r15, r7
    19a8:	08 1d       	adc	r16, r8
    19aa:	19 1d       	adc	r17, r9
    19ac:	9a 01       	movw	r18, r20
    19ae:	ab 01       	movw	r20, r22
    19b0:	2a 0d       	add	r18, r10
    19b2:	3b 1d       	adc	r19, r11
    19b4:	4c 1d       	adc	r20, r12
    19b6:	5d 1d       	adc	r21, r13
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 14       	cp	r14, r6
    19c2:	f7 04       	cpc	r15, r7
    19c4:	08 05       	cpc	r16, r8
    19c6:	19 05       	cpc	r17, r9
    19c8:	20 f4       	brcc	.+8      	; 0x19d2 <__mulsf3+0xe8>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ba 01       	movw	r22, r20
    19d4:	a9 01       	movw	r20, r18
    19d6:	48 0f       	add	r20, r24
    19d8:	59 1f       	adc	r21, r25
    19da:	6a 1f       	adc	r22, r26
    19dc:	7b 1f       	adc	r23, r27
    19de:	aa 0c       	add	r10, r10
    19e0:	bb 1c       	adc	r11, r11
    19e2:	cc 1c       	adc	r12, r12
    19e4:	dd 1c       	adc	r13, r13
    19e6:	97 fe       	sbrs	r9, 7
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <__mulsf3+0x110>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	a8 2a       	or	r10, r24
    19f4:	b9 2a       	or	r11, r25
    19f6:	ca 2a       	or	r12, r26
    19f8:	db 2a       	or	r13, r27
    19fa:	31 96       	adiw	r30, 0x01	; 1
    19fc:	e0 32       	cpi	r30, 0x20	; 32
    19fe:	f1 05       	cpc	r31, r1
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <__mulsf3+0x12a>
    1a02:	66 0c       	add	r6, r6
    1a04:	77 1c       	adc	r7, r7
    1a06:	88 1c       	adc	r8, r8
    1a08:	99 1c       	adc	r9, r9
    1a0a:	56 94       	lsr	r5
    1a0c:	47 94       	ror	r4
    1a0e:	37 94       	ror	r3
    1a10:	27 94       	ror	r2
    1a12:	c3 cf       	rjmp	.-122    	; 0x199a <__mulsf3+0xb0>
    1a14:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a16:	ea 89       	ldd	r30, Y+18	; 0x12
    1a18:	2b 89       	ldd	r18, Y+19	; 0x13
    1a1a:	3c 89       	ldd	r19, Y+20	; 0x14
    1a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a20:	28 0f       	add	r18, r24
    1a22:	39 1f       	adc	r19, r25
    1a24:	2e 5f       	subi	r18, 0xFE	; 254
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	17 c0       	rjmp	.+46     	; 0x1a58 <__mulsf3+0x16e>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	81 70       	andi	r24, 0x01	; 1
    1a2e:	90 70       	andi	r25, 0x00	; 0
    1a30:	89 2b       	or	r24, r25
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <__mulsf3+0x162>
    1a34:	16 95       	lsr	r17
    1a36:	07 95       	ror	r16
    1a38:	f7 94       	ror	r15
    1a3a:	e7 94       	ror	r14
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e0       	ldi	r26, 0x00	; 0
    1a42:	b0 e8       	ldi	r27, 0x80	; 128
    1a44:	e8 2a       	or	r14, r24
    1a46:	f9 2a       	or	r15, r25
    1a48:	0a 2b       	or	r16, r26
    1a4a:	1b 2b       	or	r17, r27
    1a4c:	76 95       	lsr	r23
    1a4e:	67 95       	ror	r22
    1a50:	57 95       	ror	r21
    1a52:	47 95       	ror	r20
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	77 fd       	sbrc	r23, 7
    1a5a:	e7 cf       	rjmp	.-50     	; 0x1a2a <__mulsf3+0x140>
    1a5c:	0c c0       	rjmp	.+24     	; 0x1a76 <__mulsf3+0x18c>
    1a5e:	44 0f       	add	r20, r20
    1a60:	55 1f       	adc	r21, r21
    1a62:	66 1f       	adc	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	17 fd       	sbrc	r17, 7
    1a68:	41 60       	ori	r20, 0x01	; 1
    1a6a:	ee 0c       	add	r14, r14
    1a6c:	ff 1c       	adc	r15, r15
    1a6e:	00 1f       	adc	r16, r16
    1a70:	11 1f       	adc	r17, r17
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	30 40       	sbci	r19, 0x00	; 0
    1a76:	40 30       	cpi	r20, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	59 07       	cpc	r21, r25
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	69 07       	cpc	r22, r25
    1a80:	90 e4       	ldi	r25, 0x40	; 64
    1a82:	79 07       	cpc	r23, r25
    1a84:	60 f3       	brcs	.-40     	; 0x1a5e <__mulsf3+0x174>
    1a86:	2b 8f       	std	Y+27, r18	; 0x1b
    1a88:	3c 8f       	std	Y+28, r19	; 0x1c
    1a8a:	db 01       	movw	r26, r22
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	8f 77       	andi	r24, 0x7F	; 127
    1a90:	90 70       	andi	r25, 0x00	; 0
    1a92:	a0 70       	andi	r26, 0x00	; 0
    1a94:	b0 70       	andi	r27, 0x00	; 0
    1a96:	80 34       	cpi	r24, 0x40	; 64
    1a98:	91 05       	cpc	r25, r1
    1a9a:	a1 05       	cpc	r26, r1
    1a9c:	b1 05       	cpc	r27, r1
    1a9e:	61 f4       	brne	.+24     	; 0x1ab8 <__mulsf3+0x1ce>
    1aa0:	47 fd       	sbrc	r20, 7
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <__mulsf3+0x1ce>
    1aa4:	e1 14       	cp	r14, r1
    1aa6:	f1 04       	cpc	r15, r1
    1aa8:	01 05       	cpc	r16, r1
    1aaa:	11 05       	cpc	r17, r1
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <__mulsf3+0x1ce>
    1aae:	40 5c       	subi	r20, 0xC0	; 192
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	6f 4f       	sbci	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	40 78       	andi	r20, 0x80	; 128
    1ab8:	1a 8e       	std	Y+26, r1	; 0x1a
    1aba:	fe 17       	cp	r31, r30
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <__mulsf3+0x1d8>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ac2:	4d 8f       	std	Y+29, r20	; 0x1d
    1ac4:	5e 8f       	std	Y+30, r21	; 0x1e
    1ac6:	6f 8f       	std	Y+31, r22	; 0x1f
    1ac8:	78 a3       	std	Y+32, r23	; 0x20
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	89 8f       	std	Y+25, r24	; 0x19
    1ace:	ce 01       	movw	r24, r28
    1ad0:	49 96       	adiw	r24, 0x19	; 25
    1ad2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__pack_f>
    1ad6:	a0 96       	adiw	r28, 0x20	; 32
    1ad8:	e2 e1       	ldi	r30, 0x12	; 18
    1ada:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__epilogue_restores__>

00001ade <__gtsf2>:
    1ade:	a8 e1       	ldi	r26, 0x18	; 24
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e7       	ldi	r30, 0x75	; 117
    1ae4:	fd e0       	ldi	r31, 0x0D	; 13
    1ae6:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__+0x18>
    1aea:	69 83       	std	Y+1, r22	; 0x01
    1aec:	7a 83       	std	Y+2, r23	; 0x02
    1aee:	8b 83       	std	Y+3, r24	; 0x03
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	2d 83       	std	Y+5, r18	; 0x05
    1af4:	3e 83       	std	Y+6, r19	; 0x06
    1af6:	4f 83       	std	Y+7, r20	; 0x07
    1af8:	58 87       	std	Y+8, r21	; 0x08
    1afa:	89 e0       	ldi	r24, 0x09	; 9
    1afc:	e8 2e       	mov	r14, r24
    1afe:	f1 2c       	mov	r15, r1
    1b00:	ec 0e       	add	r14, r28
    1b02:	fd 1e       	adc	r15, r29
    1b04:	ce 01       	movw	r24, r28
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	b7 01       	movw	r22, r14
    1b0a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1b0e:	8e 01       	movw	r16, r28
    1b10:	0f 5e       	subi	r16, 0xEF	; 239
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	ce 01       	movw	r24, r28
    1b16:	05 96       	adiw	r24, 0x05	; 5
    1b18:	b8 01       	movw	r22, r16
    1b1a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	40 f0       	brcs	.+16     	; 0x1b34 <__gtsf2+0x56>
    1b24:	89 89       	ldd	r24, Y+17	; 0x11
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	28 f0       	brcs	.+10     	; 0x1b34 <__gtsf2+0x56>
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b8 01       	movw	r22, r16
    1b2e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__fpcmp_parts_f>
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <__gtsf2+0x58>
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
    1b36:	68 96       	adiw	r28, 0x18	; 24
    1b38:	e6 e0       	ldi	r30, 0x06	; 6
    1b3a:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__+0x18>

00001b3e <__gesf2>:
    1b3e:	a8 e1       	ldi	r26, 0x18	; 24
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 ea       	ldi	r30, 0xA5	; 165
    1b44:	fd e0       	ldi	r31, 0x0D	; 13
    1b46:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__+0x18>
    1b4a:	69 83       	std	Y+1, r22	; 0x01
    1b4c:	7a 83       	std	Y+2, r23	; 0x02
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	2d 83       	std	Y+5, r18	; 0x05
    1b54:	3e 83       	std	Y+6, r19	; 0x06
    1b56:	4f 83       	std	Y+7, r20	; 0x07
    1b58:	58 87       	std	Y+8, r21	; 0x08
    1b5a:	89 e0       	ldi	r24, 0x09	; 9
    1b5c:	e8 2e       	mov	r14, r24
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	ec 0e       	add	r14, r28
    1b62:	fd 1e       	adc	r15, r29
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	b7 01       	movw	r22, r14
    1b6a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1b6e:	8e 01       	movw	r16, r28
    1b70:	0f 5e       	subi	r16, 0xEF	; 239
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	ce 01       	movw	r24, r28
    1b76:	05 96       	adiw	r24, 0x05	; 5
    1b78:	b8 01       	movw	r22, r16
    1b7a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	40 f0       	brcs	.+16     	; 0x1b94 <__gesf2+0x56>
    1b84:	89 89       	ldd	r24, Y+17	; 0x11
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	28 f0       	brcs	.+10     	; 0x1b94 <__gesf2+0x56>
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	b8 01       	movw	r22, r16
    1b8e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__fpcmp_parts_f>
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <__gesf2+0x58>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	68 96       	adiw	r28, 0x18	; 24
    1b98:	e6 e0       	ldi	r30, 0x06	; 6
    1b9a:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__+0x18>

00001b9e <__ltsf2>:
    1b9e:	a8 e1       	ldi	r26, 0x18	; 24
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    1ba4:	fd e0       	ldi	r31, 0x0D	; 13
    1ba6:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__prologue_saves__+0x18>
    1baa:	69 83       	std	Y+1, r22	; 0x01
    1bac:	7a 83       	std	Y+2, r23	; 0x02
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	2d 83       	std	Y+5, r18	; 0x05
    1bb4:	3e 83       	std	Y+6, r19	; 0x06
    1bb6:	4f 83       	std	Y+7, r20	; 0x07
    1bb8:	58 87       	std	Y+8, r21	; 0x08
    1bba:	89 e0       	ldi	r24, 0x09	; 9
    1bbc:	e8 2e       	mov	r14, r24
    1bbe:	f1 2c       	mov	r15, r1
    1bc0:	ec 0e       	add	r14, r28
    1bc2:	fd 1e       	adc	r15, r29
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	b7 01       	movw	r22, r14
    1bca:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1bce:	8e 01       	movw	r16, r28
    1bd0:	0f 5e       	subi	r16, 0xEF	; 239
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	05 96       	adiw	r24, 0x05	; 5
    1bd8:	b8 01       	movw	r22, r16
    1bda:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1bde:	89 85       	ldd	r24, Y+9	; 0x09
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	40 f0       	brcs	.+16     	; 0x1bf4 <__ltsf2+0x56>
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	82 30       	cpi	r24, 0x02	; 2
    1be8:	28 f0       	brcs	.+10     	; 0x1bf4 <__ltsf2+0x56>
    1bea:	c7 01       	movw	r24, r14
    1bec:	b8 01       	movw	r22, r16
    1bee:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__fpcmp_parts_f>
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <__ltsf2+0x58>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	68 96       	adiw	r28, 0x18	; 24
    1bf8:	e6 e0       	ldi	r30, 0x06	; 6
    1bfa:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__epilogue_restores__+0x18>

00001bfe <__fixsfsi>:
    1bfe:	ac e0       	ldi	r26, 0x0C	; 12
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e5 e0       	ldi	r30, 0x05	; 5
    1c04:	fe e0       	ldi	r31, 0x0E	; 14
    1c06:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__prologue_saves__+0x20>
    1c0a:	69 83       	std	Y+1, r22	; 0x01
    1c0c:	7a 83       	std	Y+2, r23	; 0x02
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	ce 01       	movw	r24, r28
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	be 01       	movw	r22, r28
    1c18:	6b 5f       	subi	r22, 0xFB	; 251
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__unpack_f>
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	61 f1       	breq	.+88     	; 0x1c7e <__fixsfsi+0x80>
    1c26:	82 30       	cpi	r24, 0x02	; 2
    1c28:	50 f1       	brcs	.+84     	; 0x1c7e <__fixsfsi+0x80>
    1c2a:	84 30       	cpi	r24, 0x04	; 4
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <__fixsfsi+0x38>
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	88 23       	and	r24, r24
    1c32:	51 f1       	breq	.+84     	; 0x1c88 <__fixsfsi+0x8a>
    1c34:	2e c0       	rjmp	.+92     	; 0x1c92 <__fixsfsi+0x94>
    1c36:	2f 81       	ldd	r18, Y+7	; 0x07
    1c38:	38 85       	ldd	r19, Y+8	; 0x08
    1c3a:	37 fd       	sbrc	r19, 7
    1c3c:	20 c0       	rjmp	.+64     	; 0x1c7e <__fixsfsi+0x80>
    1c3e:	6e 81       	ldd	r22, Y+6	; 0x06
    1c40:	2f 31       	cpi	r18, 0x1F	; 31
    1c42:	31 05       	cpc	r19, r1
    1c44:	1c f0       	brlt	.+6      	; 0x1c4c <__fixsfsi+0x4e>
    1c46:	66 23       	and	r22, r22
    1c48:	f9 f0       	breq	.+62     	; 0x1c88 <__fixsfsi+0x8a>
    1c4a:	23 c0       	rjmp	.+70     	; 0x1c92 <__fixsfsi+0x94>
    1c4c:	8e e1       	ldi	r24, 0x1E	; 30
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	82 1b       	sub	r24, r18
    1c52:	93 0b       	sbc	r25, r19
    1c54:	29 85       	ldd	r18, Y+9	; 0x09
    1c56:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c58:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <__fixsfsi+0x68>
    1c5e:	56 95       	lsr	r21
    1c60:	47 95       	ror	r20
    1c62:	37 95       	ror	r19
    1c64:	27 95       	ror	r18
    1c66:	8a 95       	dec	r24
    1c68:	d2 f7       	brpl	.-12     	; 0x1c5e <__fixsfsi+0x60>
    1c6a:	66 23       	and	r22, r22
    1c6c:	b1 f0       	breq	.+44     	; 0x1c9a <__fixsfsi+0x9c>
    1c6e:	50 95       	com	r21
    1c70:	40 95       	com	r20
    1c72:	30 95       	com	r19
    1c74:	21 95       	neg	r18
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	4f 4f       	sbci	r20, 0xFF	; 255
    1c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7c:	0e c0       	rjmp	.+28     	; 0x1c9a <__fixsfsi+0x9c>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	09 c0       	rjmp	.+18     	; 0x1c9a <__fixsfsi+0x9c>
    1c88:	2f ef       	ldi	r18, 0xFF	; 255
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f ef       	ldi	r20, 0xFF	; 255
    1c8e:	5f e7       	ldi	r21, 0x7F	; 127
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__fixsfsi+0x9c>
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e8       	ldi	r21, 0x80	; 128
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	2c 96       	adiw	r28, 0x0c	; 12
    1ca0:	e2 e0       	ldi	r30, 0x02	; 2
    1ca2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__epilogue_restores__+0x20>

00001ca6 <__floatunsisf>:
    1ca6:	a8 e0       	ldi	r26, 0x08	; 8
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	fe e0       	ldi	r31, 0x0E	; 14
    1cae:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__prologue_saves__+0x10>
    1cb2:	7b 01       	movw	r14, r22
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	61 15       	cp	r22, r1
    1cb8:	71 05       	cpc	r23, r1
    1cba:	81 05       	cpc	r24, r1
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	19 f4       	brne	.+6      	; 0x1cc6 <__floatunsisf+0x20>
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	60 c0       	rjmp	.+192    	; 0x1d86 <__floatunsisf+0xe0>
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	8e e1       	ldi	r24, 0x1E	; 30
    1ccc:	c8 2e       	mov	r12, r24
    1cce:	d1 2c       	mov	r13, r1
    1cd0:	dc 82       	std	Y+4, r13	; 0x04
    1cd2:	cb 82       	std	Y+3, r12	; 0x03
    1cd4:	ed 82       	std	Y+5, r14	; 0x05
    1cd6:	fe 82       	std	Y+6, r15	; 0x06
    1cd8:	0f 83       	std	Y+7, r16	; 0x07
    1cda:	18 87       	std	Y+8, r17	; 0x08
    1cdc:	c8 01       	movw	r24, r16
    1cde:	b7 01       	movw	r22, r14
    1ce0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__clzsi2>
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	31 97       	sbiw	r30, 0x01	; 1
    1ce8:	f7 ff       	sbrs	r31, 7
    1cea:	3b c0       	rjmp	.+118    	; 0x1d62 <__floatunsisf+0xbc>
    1cec:	22 27       	eor	r18, r18
    1cee:	33 27       	eor	r19, r19
    1cf0:	2e 1b       	sub	r18, r30
    1cf2:	3f 0b       	sbc	r19, r31
    1cf4:	57 01       	movw	r10, r14
    1cf6:	68 01       	movw	r12, r16
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <__floatunsisf+0x5e>
    1cfc:	d6 94       	lsr	r13
    1cfe:	c7 94       	ror	r12
    1d00:	b7 94       	ror	r11
    1d02:	a7 94       	ror	r10
    1d04:	0a 94       	dec	r0
    1d06:	d2 f7       	brpl	.-12     	; 0x1cfc <__floatunsisf+0x56>
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <__floatunsisf+0x7c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	2a 95       	dec	r18
    1d24:	d2 f7       	brpl	.-12     	; 0x1d1a <__floatunsisf+0x74>
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	a1 09       	sbc	r26, r1
    1d2a:	b1 09       	sbc	r27, r1
    1d2c:	8e 21       	and	r24, r14
    1d2e:	9f 21       	and	r25, r15
    1d30:	a0 23       	and	r26, r16
    1d32:	b1 23       	and	r27, r17
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	a1 05       	cpc	r26, r1
    1d38:	b1 05       	cpc	r27, r1
    1d3a:	21 f0       	breq	.+8      	; 0x1d44 <__floatunsisf+0x9e>
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	4a 29       	or	r20, r10
    1d46:	5b 29       	or	r21, r11
    1d48:	6c 29       	or	r22, r12
    1d4a:	7d 29       	or	r23, r13
    1d4c:	4d 83       	std	Y+5, r20	; 0x05
    1d4e:	5e 83       	std	Y+6, r21	; 0x06
    1d50:	6f 83       	std	Y+7, r22	; 0x07
    1d52:	78 87       	std	Y+8, r23	; 0x08
    1d54:	8e e1       	ldi	r24, 0x1E	; 30
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	8e 1b       	sub	r24, r30
    1d5a:	9f 0b       	sbc	r25, r31
    1d5c:	9c 83       	std	Y+4, r25	; 0x04
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
    1d60:	12 c0       	rjmp	.+36     	; 0x1d86 <__floatunsisf+0xe0>
    1d62:	30 97       	sbiw	r30, 0x00	; 0
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <__floatunsisf+0xe0>
    1d66:	0e 2e       	mov	r0, r30
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <__floatunsisf+0xcc>
    1d6a:	ee 0c       	add	r14, r14
    1d6c:	ff 1c       	adc	r15, r15
    1d6e:	00 1f       	adc	r16, r16
    1d70:	11 1f       	adc	r17, r17
    1d72:	0a 94       	dec	r0
    1d74:	d2 f7       	brpl	.-12     	; 0x1d6a <__floatunsisf+0xc4>
    1d76:	ed 82       	std	Y+5, r14	; 0x05
    1d78:	fe 82       	std	Y+6, r15	; 0x06
    1d7a:	0f 83       	std	Y+7, r16	; 0x07
    1d7c:	18 87       	std	Y+8, r17	; 0x08
    1d7e:	ce 1a       	sub	r12, r30
    1d80:	df 0a       	sbc	r13, r31
    1d82:	dc 82       	std	Y+4, r13	; 0x04
    1d84:	cb 82       	std	Y+3, r12	; 0x03
    1d86:	1a 82       	std	Y+2, r1	; 0x02
    1d88:	ce 01       	movw	r24, r28
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__pack_f>
    1d90:	28 96       	adiw	r28, 0x08	; 8
    1d92:	ea e0       	ldi	r30, 0x0A	; 10
    1d94:	0c 94 36 11 	jmp	0x226c	; 0x226c <__epilogue_restores__+0x10>

00001d98 <__clzsi2>:
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	7b 01       	movw	r14, r22
    1da2:	8c 01       	movw	r16, r24
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	e8 16       	cp	r14, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	f8 06       	cpc	r15, r24
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	08 07       	cpc	r16, r24
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	18 07       	cpc	r17, r24
    1db4:	88 f4       	brcc	.+34     	; 0x1dd8 <__clzsi2+0x40>
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	e8 16       	cp	r14, r24
    1dba:	f1 04       	cpc	r15, r1
    1dbc:	01 05       	cpc	r16, r1
    1dbe:	11 05       	cpc	r17, r1
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <__clzsi2+0x36>
    1dc2:	28 f0       	brcs	.+10     	; 0x1dce <__clzsi2+0x36>
    1dc4:	88 e0       	ldi	r24, 0x08	; 8
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e0       	ldi	r26, 0x00	; 0
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <__clzsi2+0x64>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	12 c0       	rjmp	.+36     	; 0x1dfc <__clzsi2+0x64>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	e8 16       	cp	r14, r24
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	f8 06       	cpc	r15, r24
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	08 07       	cpc	r16, r24
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	18 07       	cpc	r17, r24
    1de8:	28 f0       	brcs	.+10     	; 0x1df4 <__clzsi2+0x5c>
    1dea:	88 e1       	ldi	r24, 0x18	; 24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e0       	ldi	r26, 0x00	; 0
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__clzsi2+0x64>
    1df4:	80 e1       	ldi	r24, 0x10	; 16
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	20 e2       	ldi	r18, 0x20	; 32
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	28 1b       	sub	r18, r24
    1e06:	39 0b       	sbc	r19, r25
    1e08:	4a 0b       	sbc	r20, r26
    1e0a:	5b 0b       	sbc	r21, r27
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <__clzsi2+0x7e>
    1e0e:	16 95       	lsr	r17
    1e10:	07 95       	ror	r16
    1e12:	f7 94       	ror	r15
    1e14:	e7 94       	ror	r14
    1e16:	8a 95       	dec	r24
    1e18:	d2 f7       	brpl	.-12     	; 0x1e0e <__clzsi2+0x76>
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	e1 5f       	subi	r30, 0xF1	; 241
    1e1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e20:	80 81       	ld	r24, Z
    1e22:	28 1b       	sub	r18, r24
    1e24:	31 09       	sbc	r19, r1
    1e26:	41 09       	sbc	r20, r1
    1e28:	51 09       	sbc	r21, r1
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	08 95       	ret

00001e36 <__pack_f>:
    1e36:	df 92       	push	r13
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	fc 01       	movw	r30, r24
    1e42:	e4 80       	ldd	r14, Z+4	; 0x04
    1e44:	f5 80       	ldd	r15, Z+5	; 0x05
    1e46:	06 81       	ldd	r16, Z+6	; 0x06
    1e48:	17 81       	ldd	r17, Z+7	; 0x07
    1e4a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e4c:	80 81       	ld	r24, Z
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	48 f4       	brcc	.+18     	; 0x1e64 <__pack_f+0x2e>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e1       	ldi	r26, 0x10	; 16
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e8 2a       	or	r14, r24
    1e5c:	f9 2a       	or	r15, r25
    1e5e:	0a 2b       	or	r16, r26
    1e60:	1b 2b       	or	r17, r27
    1e62:	a5 c0       	rjmp	.+330    	; 0x1fae <__pack_f+0x178>
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__pack_f+0x34>
    1e68:	9f c0       	rjmp	.+318    	; 0x1fa8 <__pack_f+0x172>
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	21 f4       	brne	.+8      	; 0x1e76 <__pack_f+0x40>
    1e6e:	ee 24       	eor	r14, r14
    1e70:	ff 24       	eor	r15, r15
    1e72:	87 01       	movw	r16, r14
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <__pack_f+0x4a>
    1e76:	e1 14       	cp	r14, r1
    1e78:	f1 04       	cpc	r15, r1
    1e7a:	01 05       	cpc	r16, r1
    1e7c:	11 05       	cpc	r17, r1
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <__pack_f+0x50>
    1e80:	e0 e0       	ldi	r30, 0x00	; 0
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	96 c0       	rjmp	.+300    	; 0x1fb2 <__pack_f+0x17c>
    1e86:	62 81       	ldd	r22, Z+2	; 0x02
    1e88:	73 81       	ldd	r23, Z+3	; 0x03
    1e8a:	9f ef       	ldi	r25, 0xFF	; 255
    1e8c:	62 38       	cpi	r22, 0x82	; 130
    1e8e:	79 07       	cpc	r23, r25
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <__pack_f+0x5e>
    1e92:	5b c0       	rjmp	.+182    	; 0x1f4a <__pack_f+0x114>
    1e94:	22 e8       	ldi	r18, 0x82	; 130
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	26 1b       	sub	r18, r22
    1e9a:	37 0b       	sbc	r19, r23
    1e9c:	2a 31       	cpi	r18, 0x1A	; 26
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f0       	brlt	.+10     	; 0x1eac <__pack_f+0x76>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	2a c0       	rjmp	.+84     	; 0x1f00 <__pack_f+0xca>
    1eac:	b8 01       	movw	r22, r16
    1eae:	a7 01       	movw	r20, r14
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <__pack_f+0x86>
    1eb4:	76 95       	lsr	r23
    1eb6:	67 95       	ror	r22
    1eb8:	57 95       	ror	r21
    1eba:	47 95       	ror	r20
    1ebc:	0a 94       	dec	r0
    1ebe:	d2 f7       	brpl	.-12     	; 0x1eb4 <__pack_f+0x7e>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e0       	ldi	r26, 0x00	; 0
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <__pack_f+0x9c>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	aa 1f       	adc	r26, r26
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	2a 95       	dec	r18
    1ed4:	d2 f7       	brpl	.-12     	; 0x1eca <__pack_f+0x94>
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	a1 09       	sbc	r26, r1
    1eda:	b1 09       	sbc	r27, r1
    1edc:	8e 21       	and	r24, r14
    1ede:	9f 21       	and	r25, r15
    1ee0:	a0 23       	and	r26, r16
    1ee2:	b1 23       	and	r27, r17
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	a1 05       	cpc	r26, r1
    1ee8:	b1 05       	cpc	r27, r1
    1eea:	21 f0       	breq	.+8      	; 0x1ef4 <__pack_f+0xbe>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	9a 01       	movw	r18, r20
    1ef6:	ab 01       	movw	r20, r22
    1ef8:	28 2b       	or	r18, r24
    1efa:	39 2b       	or	r19, r25
    1efc:	4a 2b       	or	r20, r26
    1efe:	5b 2b       	or	r21, r27
    1f00:	da 01       	movw	r26, r20
    1f02:	c9 01       	movw	r24, r18
    1f04:	8f 77       	andi	r24, 0x7F	; 127
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	a0 70       	andi	r26, 0x00	; 0
    1f0a:	b0 70       	andi	r27, 0x00	; 0
    1f0c:	80 34       	cpi	r24, 0x40	; 64
    1f0e:	91 05       	cpc	r25, r1
    1f10:	a1 05       	cpc	r26, r1
    1f12:	b1 05       	cpc	r27, r1
    1f14:	39 f4       	brne	.+14     	; 0x1f24 <__pack_f+0xee>
    1f16:	27 ff       	sbrs	r18, 7
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <__pack_f+0xf6>
    1f1a:	20 5c       	subi	r18, 0xC0	; 192
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <__pack_f+0xf6>
    1f24:	21 5c       	subi	r18, 0xC1	; 193
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	4f 4f       	sbci	r20, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	e0 e0       	ldi	r30, 0x00	; 0
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	20 30       	cpi	r18, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	3a 07       	cpc	r19, r26
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	4a 07       	cpc	r20, r26
    1f3a:	a0 e4       	ldi	r26, 0x40	; 64
    1f3c:	5a 07       	cpc	r21, r26
    1f3e:	10 f0       	brcs	.+4      	; 0x1f44 <__pack_f+0x10e>
    1f40:	e1 e0       	ldi	r30, 0x01	; 1
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	79 01       	movw	r14, r18
    1f46:	8a 01       	movw	r16, r20
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <__pack_f+0x162>
    1f4a:	60 38       	cpi	r22, 0x80	; 128
    1f4c:	71 05       	cpc	r23, r1
    1f4e:	64 f5       	brge	.+88     	; 0x1fa8 <__pack_f+0x172>
    1f50:	fb 01       	movw	r30, r22
    1f52:	e1 58       	subi	r30, 0x81	; 129
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	d8 01       	movw	r26, r16
    1f58:	c7 01       	movw	r24, r14
    1f5a:	8f 77       	andi	r24, 0x7F	; 127
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	a0 70       	andi	r26, 0x00	; 0
    1f60:	b0 70       	andi	r27, 0x00	; 0
    1f62:	80 34       	cpi	r24, 0x40	; 64
    1f64:	91 05       	cpc	r25, r1
    1f66:	a1 05       	cpc	r26, r1
    1f68:	b1 05       	cpc	r27, r1
    1f6a:	39 f4       	brne	.+14     	; 0x1f7a <__pack_f+0x144>
    1f6c:	e7 fe       	sbrs	r14, 7
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <__pack_f+0x154>
    1f70:	80 e4       	ldi	r24, 0x40	; 64
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e0       	ldi	r26, 0x00	; 0
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <__pack_f+0x14c>
    1f7a:	8f e3       	ldi	r24, 0x3F	; 63
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e8 0e       	add	r14, r24
    1f84:	f9 1e       	adc	r15, r25
    1f86:	0a 1f       	adc	r16, r26
    1f88:	1b 1f       	adc	r17, r27
    1f8a:	17 ff       	sbrs	r17, 7
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <__pack_f+0x162>
    1f8e:	16 95       	lsr	r17
    1f90:	07 95       	ror	r16
    1f92:	f7 94       	ror	r15
    1f94:	e7 94       	ror	r14
    1f96:	31 96       	adiw	r30, 0x01	; 1
    1f98:	87 e0       	ldi	r24, 0x07	; 7
    1f9a:	16 95       	lsr	r17
    1f9c:	07 95       	ror	r16
    1f9e:	f7 94       	ror	r15
    1fa0:	e7 94       	ror	r14
    1fa2:	8a 95       	dec	r24
    1fa4:	d1 f7       	brne	.-12     	; 0x1f9a <__pack_f+0x164>
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <__pack_f+0x17c>
    1fa8:	ee 24       	eor	r14, r14
    1faa:	ff 24       	eor	r15, r15
    1fac:	87 01       	movw	r16, r14
    1fae:	ef ef       	ldi	r30, 0xFF	; 255
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	6e 2f       	mov	r22, r30
    1fb4:	67 95       	ror	r22
    1fb6:	66 27       	eor	r22, r22
    1fb8:	67 95       	ror	r22
    1fba:	90 2f       	mov	r25, r16
    1fbc:	9f 77       	andi	r25, 0x7F	; 127
    1fbe:	d7 94       	ror	r13
    1fc0:	dd 24       	eor	r13, r13
    1fc2:	d7 94       	ror	r13
    1fc4:	8e 2f       	mov	r24, r30
    1fc6:	86 95       	lsr	r24
    1fc8:	49 2f       	mov	r20, r25
    1fca:	46 2b       	or	r20, r22
    1fcc:	58 2f       	mov	r21, r24
    1fce:	5d 29       	or	r21, r13
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	ff 90       	pop	r15
    1fda:	ef 90       	pop	r14
    1fdc:	df 90       	pop	r13
    1fde:	08 95       	ret

00001fe0 <__unpack_f>:
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	db 01       	movw	r26, r22
    1fe4:	40 81       	ld	r20, Z
    1fe6:	51 81       	ldd	r21, Z+1	; 0x01
    1fe8:	22 81       	ldd	r18, Z+2	; 0x02
    1fea:	62 2f       	mov	r22, r18
    1fec:	6f 77       	andi	r22, 0x7F	; 127
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	22 1f       	adc	r18, r18
    1ff2:	22 27       	eor	r18, r18
    1ff4:	22 1f       	adc	r18, r18
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	89 2f       	mov	r24, r25
    1ffa:	88 0f       	add	r24, r24
    1ffc:	82 2b       	or	r24, r18
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	99 1f       	adc	r25, r25
    2004:	99 27       	eor	r25, r25
    2006:	99 1f       	adc	r25, r25
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	9c 93       	st	X, r25
    200c:	11 97       	sbiw	r26, 0x01	; 1
    200e:	21 15       	cp	r18, r1
    2010:	31 05       	cpc	r19, r1
    2012:	a9 f5       	brne	.+106    	; 0x207e <__unpack_f+0x9e>
    2014:	41 15       	cp	r20, r1
    2016:	51 05       	cpc	r21, r1
    2018:	61 05       	cpc	r22, r1
    201a:	71 05       	cpc	r23, r1
    201c:	11 f4       	brne	.+4      	; 0x2022 <__unpack_f+0x42>
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	37 c0       	rjmp	.+110    	; 0x2090 <__unpack_f+0xb0>
    2022:	82 e8       	ldi	r24, 0x82	; 130
    2024:	9f ef       	ldi	r25, 0xFF	; 255
    2026:	13 96       	adiw	r26, 0x03	; 3
    2028:	9c 93       	st	X, r25
    202a:	8e 93       	st	-X, r24
    202c:	12 97       	sbiw	r26, 0x02	; 2
    202e:	9a 01       	movw	r18, r20
    2030:	ab 01       	movw	r20, r22
    2032:	67 e0       	ldi	r22, 0x07	; 7
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	44 1f       	adc	r20, r20
    203a:	55 1f       	adc	r21, r21
    203c:	6a 95       	dec	r22
    203e:	d1 f7       	brne	.-12     	; 0x2034 <__unpack_f+0x54>
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	8c 93       	st	X, r24
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <__unpack_f+0x80>
    2046:	22 0f       	add	r18, r18
    2048:	33 1f       	adc	r19, r19
    204a:	44 1f       	adc	r20, r20
    204c:	55 1f       	adc	r21, r21
    204e:	12 96       	adiw	r26, 0x02	; 2
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	13 97       	sbiw	r26, 0x03	; 3
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	13 96       	adiw	r26, 0x03	; 3
    205a:	9c 93       	st	X, r25
    205c:	8e 93       	st	-X, r24
    205e:	12 97       	sbiw	r26, 0x02	; 2
    2060:	20 30       	cpi	r18, 0x00	; 0
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	38 07       	cpc	r19, r24
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	48 07       	cpc	r20, r24
    206a:	80 e4       	ldi	r24, 0x40	; 64
    206c:	58 07       	cpc	r21, r24
    206e:	58 f3       	brcs	.-42     	; 0x2046 <__unpack_f+0x66>
    2070:	14 96       	adiw	r26, 0x04	; 4
    2072:	2d 93       	st	X+, r18
    2074:	3d 93       	st	X+, r19
    2076:	4d 93       	st	X+, r20
    2078:	5c 93       	st	X, r21
    207a:	17 97       	sbiw	r26, 0x07	; 7
    207c:	08 95       	ret
    207e:	2f 3f       	cpi	r18, 0xFF	; 255
    2080:	31 05       	cpc	r19, r1
    2082:	79 f4       	brne	.+30     	; 0x20a2 <__unpack_f+0xc2>
    2084:	41 15       	cp	r20, r1
    2086:	51 05       	cpc	r21, r1
    2088:	61 05       	cpc	r22, r1
    208a:	71 05       	cpc	r23, r1
    208c:	19 f4       	brne	.+6      	; 0x2094 <__unpack_f+0xb4>
    208e:	84 e0       	ldi	r24, 0x04	; 4
    2090:	8c 93       	st	X, r24
    2092:	08 95       	ret
    2094:	64 ff       	sbrs	r22, 4
    2096:	03 c0       	rjmp	.+6      	; 0x209e <__unpack_f+0xbe>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	8c 93       	st	X, r24
    209c:	12 c0       	rjmp	.+36     	; 0x20c2 <__unpack_f+0xe2>
    209e:	1c 92       	st	X, r1
    20a0:	10 c0       	rjmp	.+32     	; 0x20c2 <__unpack_f+0xe2>
    20a2:	2f 57       	subi	r18, 0x7F	; 127
    20a4:	30 40       	sbci	r19, 0x00	; 0
    20a6:	13 96       	adiw	r26, 0x03	; 3
    20a8:	3c 93       	st	X, r19
    20aa:	2e 93       	st	-X, r18
    20ac:	12 97       	sbiw	r26, 0x02	; 2
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	8c 93       	st	X, r24
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	44 0f       	add	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	66 1f       	adc	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	8a 95       	dec	r24
    20be:	d1 f7       	brne	.-12     	; 0x20b4 <__unpack_f+0xd4>
    20c0:	70 64       	ori	r23, 0x40	; 64
    20c2:	14 96       	adiw	r26, 0x04	; 4
    20c4:	4d 93       	st	X+, r20
    20c6:	5d 93       	st	X+, r21
    20c8:	6d 93       	st	X+, r22
    20ca:	7c 93       	st	X, r23
    20cc:	17 97       	sbiw	r26, 0x07	; 7
    20ce:	08 95       	ret

000020d0 <__fpcmp_parts_f>:
    20d0:	1f 93       	push	r17
    20d2:	dc 01       	movw	r26, r24
    20d4:	fb 01       	movw	r30, r22
    20d6:	9c 91       	ld	r25, X
    20d8:	92 30       	cpi	r25, 0x02	; 2
    20da:	08 f4       	brcc	.+2      	; 0x20de <__fpcmp_parts_f+0xe>
    20dc:	47 c0       	rjmp	.+142    	; 0x216c <__fpcmp_parts_f+0x9c>
    20de:	80 81       	ld	r24, Z
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <__fpcmp_parts_f+0x16>
    20e4:	43 c0       	rjmp	.+134    	; 0x216c <__fpcmp_parts_f+0x9c>
    20e6:	94 30       	cpi	r25, 0x04	; 4
    20e8:	51 f4       	brne	.+20     	; 0x20fe <__fpcmp_parts_f+0x2e>
    20ea:	11 96       	adiw	r26, 0x01	; 1
    20ec:	1c 91       	ld	r17, X
    20ee:	84 30       	cpi	r24, 0x04	; 4
    20f0:	99 f5       	brne	.+102    	; 0x2158 <__fpcmp_parts_f+0x88>
    20f2:	81 81       	ldd	r24, Z+1	; 0x01
    20f4:	68 2f       	mov	r22, r24
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	61 1b       	sub	r22, r17
    20fa:	71 09       	sbc	r23, r1
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <__fpcmp_parts_f+0xac>
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	21 f0       	breq	.+8      	; 0x210a <__fpcmp_parts_f+0x3a>
    2102:	92 30       	cpi	r25, 0x02	; 2
    2104:	31 f4       	brne	.+12     	; 0x2112 <__fpcmp_parts_f+0x42>
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	b9 f1       	breq	.+110    	; 0x2178 <__fpcmp_parts_f+0xa8>
    210a:	81 81       	ldd	r24, Z+1	; 0x01
    210c:	88 23       	and	r24, r24
    210e:	89 f1       	breq	.+98     	; 0x2172 <__fpcmp_parts_f+0xa2>
    2110:	2d c0       	rjmp	.+90     	; 0x216c <__fpcmp_parts_f+0x9c>
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	1c 91       	ld	r17, X
    2116:	11 97       	sbiw	r26, 0x01	; 1
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	f1 f0       	breq	.+60     	; 0x2158 <__fpcmp_parts_f+0x88>
    211c:	81 81       	ldd	r24, Z+1	; 0x01
    211e:	18 17       	cp	r17, r24
    2120:	d9 f4       	brne	.+54     	; 0x2158 <__fpcmp_parts_f+0x88>
    2122:	12 96       	adiw	r26, 0x02	; 2
    2124:	2d 91       	ld	r18, X+
    2126:	3c 91       	ld	r19, X
    2128:	13 97       	sbiw	r26, 0x03	; 3
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	94 f0       	brlt	.+36     	; 0x2158 <__fpcmp_parts_f+0x88>
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	bc f0       	brlt	.+46     	; 0x2168 <__fpcmp_parts_f+0x98>
    213a:	14 96       	adiw	r26, 0x04	; 4
    213c:	8d 91       	ld	r24, X+
    213e:	9d 91       	ld	r25, X+
    2140:	0d 90       	ld	r0, X+
    2142:	bc 91       	ld	r27, X
    2144:	a0 2d       	mov	r26, r0
    2146:	24 81       	ldd	r18, Z+4	; 0x04
    2148:	35 81       	ldd	r19, Z+5	; 0x05
    214a:	46 81       	ldd	r20, Z+6	; 0x06
    214c:	57 81       	ldd	r21, Z+7	; 0x07
    214e:	28 17       	cp	r18, r24
    2150:	39 07       	cpc	r19, r25
    2152:	4a 07       	cpc	r20, r26
    2154:	5b 07       	cpc	r21, r27
    2156:	18 f4       	brcc	.+6      	; 0x215e <__fpcmp_parts_f+0x8e>
    2158:	11 23       	and	r17, r17
    215a:	41 f0       	breq	.+16     	; 0x216c <__fpcmp_parts_f+0x9c>
    215c:	0a c0       	rjmp	.+20     	; 0x2172 <__fpcmp_parts_f+0xa2>
    215e:	82 17       	cp	r24, r18
    2160:	93 07       	cpc	r25, r19
    2162:	a4 07       	cpc	r26, r20
    2164:	b5 07       	cpc	r27, r21
    2166:	40 f4       	brcc	.+16     	; 0x2178 <__fpcmp_parts_f+0xa8>
    2168:	11 23       	and	r17, r17
    216a:	19 f0       	breq	.+6      	; 0x2172 <__fpcmp_parts_f+0xa2>
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	05 c0       	rjmp	.+10     	; 0x217c <__fpcmp_parts_f+0xac>
    2172:	6f ef       	ldi	r22, 0xFF	; 255
    2174:	7f ef       	ldi	r23, 0xFF	; 255
    2176:	02 c0       	rjmp	.+4      	; 0x217c <__fpcmp_parts_f+0xac>
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	cb 01       	movw	r24, r22
    217e:	1f 91       	pop	r17
    2180:	08 95       	ret

00002182 <__udivmodhi4>:
    2182:	aa 1b       	sub	r26, r26
    2184:	bb 1b       	sub	r27, r27
    2186:	51 e1       	ldi	r21, 0x11	; 17
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <__udivmodhi4_ep>

0000218a <__udivmodhi4_loop>:
    218a:	aa 1f       	adc	r26, r26
    218c:	bb 1f       	adc	r27, r27
    218e:	a6 17       	cp	r26, r22
    2190:	b7 07       	cpc	r27, r23
    2192:	10 f0       	brcs	.+4      	; 0x2198 <__udivmodhi4_ep>
    2194:	a6 1b       	sub	r26, r22
    2196:	b7 0b       	sbc	r27, r23

00002198 <__udivmodhi4_ep>:
    2198:	88 1f       	adc	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	5a 95       	dec	r21
    219e:	a9 f7       	brne	.-22     	; 0x218a <__udivmodhi4_loop>
    21a0:	80 95       	com	r24
    21a2:	90 95       	com	r25
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	08 95       	ret

000021aa <__udivmodsi4>:
    21aa:	a1 e2       	ldi	r26, 0x21	; 33
    21ac:	1a 2e       	mov	r1, r26
    21ae:	aa 1b       	sub	r26, r26
    21b0:	bb 1b       	sub	r27, r27
    21b2:	fd 01       	movw	r30, r26
    21b4:	0d c0       	rjmp	.+26     	; 0x21d0 <__udivmodsi4_ep>

000021b6 <__udivmodsi4_loop>:
    21b6:	aa 1f       	adc	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	ee 1f       	adc	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	a2 17       	cp	r26, r18
    21c0:	b3 07       	cpc	r27, r19
    21c2:	e4 07       	cpc	r30, r20
    21c4:	f5 07       	cpc	r31, r21
    21c6:	20 f0       	brcs	.+8      	; 0x21d0 <__udivmodsi4_ep>
    21c8:	a2 1b       	sub	r26, r18
    21ca:	b3 0b       	sbc	r27, r19
    21cc:	e4 0b       	sbc	r30, r20
    21ce:	f5 0b       	sbc	r31, r21

000021d0 <__udivmodsi4_ep>:
    21d0:	66 1f       	adc	r22, r22
    21d2:	77 1f       	adc	r23, r23
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	1a 94       	dec	r1
    21da:	69 f7       	brne	.-38     	; 0x21b6 <__udivmodsi4_loop>
    21dc:	60 95       	com	r22
    21de:	70 95       	com	r23
    21e0:	80 95       	com	r24
    21e2:	90 95       	com	r25
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	bd 01       	movw	r22, r26
    21ea:	cf 01       	movw	r24, r30
    21ec:	08 95       	ret

000021ee <__divmodsi4>:
    21ee:	97 fb       	bst	r25, 7
    21f0:	09 2e       	mov	r0, r25
    21f2:	05 26       	eor	r0, r21
    21f4:	0e d0       	rcall	.+28     	; 0x2212 <__divmodsi4_neg1>
    21f6:	57 fd       	sbrc	r21, 7
    21f8:	04 d0       	rcall	.+8      	; 0x2202 <__divmodsi4_neg2>
    21fa:	d7 df       	rcall	.-82     	; 0x21aa <__udivmodsi4>
    21fc:	0a d0       	rcall	.+20     	; 0x2212 <__divmodsi4_neg1>
    21fe:	00 1c       	adc	r0, r0
    2200:	38 f4       	brcc	.+14     	; 0x2210 <__divmodsi4_exit>

00002202 <__divmodsi4_neg2>:
    2202:	50 95       	com	r21
    2204:	40 95       	com	r20
    2206:	30 95       	com	r19
    2208:	21 95       	neg	r18
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	4f 4f       	sbci	r20, 0xFF	; 255
    220e:	5f 4f       	sbci	r21, 0xFF	; 255

00002210 <__divmodsi4_exit>:
    2210:	08 95       	ret

00002212 <__divmodsi4_neg1>:
    2212:	f6 f7       	brtc	.-4      	; 0x2210 <__divmodsi4_exit>
    2214:	90 95       	com	r25
    2216:	80 95       	com	r24
    2218:	70 95       	com	r23
    221a:	61 95       	neg	r22
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	08 95       	ret

00002224 <__prologue_saves__>:
    2224:	2f 92       	push	r2
    2226:	3f 92       	push	r3
    2228:	4f 92       	push	r4
    222a:	5f 92       	push	r5
    222c:	6f 92       	push	r6
    222e:	7f 92       	push	r7
    2230:	8f 92       	push	r8
    2232:	9f 92       	push	r9
    2234:	af 92       	push	r10
    2236:	bf 92       	push	r11
    2238:	cf 92       	push	r12
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	ca 1b       	sub	r28, r26
    224e:	db 0b       	sbc	r29, r27
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	09 94       	ijmp

0000225c <__epilogue_restores__>:
    225c:	2a 88       	ldd	r2, Y+18	; 0x12
    225e:	39 88       	ldd	r3, Y+17	; 0x11
    2260:	48 88       	ldd	r4, Y+16	; 0x10
    2262:	5f 84       	ldd	r5, Y+15	; 0x0f
    2264:	6e 84       	ldd	r6, Y+14	; 0x0e
    2266:	7d 84       	ldd	r7, Y+13	; 0x0d
    2268:	8c 84       	ldd	r8, Y+12	; 0x0c
    226a:	9b 84       	ldd	r9, Y+11	; 0x0b
    226c:	aa 84       	ldd	r10, Y+10	; 0x0a
    226e:	b9 84       	ldd	r11, Y+9	; 0x09
    2270:	c8 84       	ldd	r12, Y+8	; 0x08
    2272:	df 80       	ldd	r13, Y+7	; 0x07
    2274:	ee 80       	ldd	r14, Y+6	; 0x06
    2276:	fd 80       	ldd	r15, Y+5	; 0x05
    2278:	0c 81       	ldd	r16, Y+4	; 0x04
    227a:	1b 81       	ldd	r17, Y+3	; 0x03
    227c:	aa 81       	ldd	r26, Y+2	; 0x02
    227e:	b9 81       	ldd	r27, Y+1	; 0x01
    2280:	ce 0f       	add	r28, r30
    2282:	d1 1d       	adc	r29, r1
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	ed 01       	movw	r28, r26
    2290:	08 95       	ret

00002292 <_exit>:
    2292:	f8 94       	cli

00002294 <__stop_program>:
    2294:	ff cf       	rjmp	.-2      	; 0x2294 <__stop_program>
