
NSL_6x6_bv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002be  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a9  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ea  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013b  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e9       	ldi	r30, 0x94	; 148
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 38       	cpi	r26, 0x84	; 132
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	a0 d0       	rcall	.+320    	; 0x18a <main>
  4a:	22 c1       	rjmp	.+580    	; 0x290 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <delay_ten_us>:
	0b00111111
	};

void delay_ten_us(unsigned long int us) 
{
	us /= 8;
  4e:	23 e0       	ldi	r18, 0x03	; 3
  50:	96 95       	lsr	r25
  52:	87 95       	ror	r24
  54:	77 95       	ror	r23
  56:	67 95       	ror	r22
  58:	2a 95       	dec	r18
  5a:	d1 f7       	brne	.-12     	; 0x50 <delay_ten_us+0x2>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  5c:	33 e0       	ldi	r19, 0x03	; 3
  5e:	07 c0       	rjmp	.+14     	; 0x6e <delay_ten_us+0x20>
  60:	23 2f       	mov	r18, r19
  62:	2a 95       	dec	r18
  64:	f1 f7       	brne	.-4      	; 0x62 <delay_ten_us+0x14>

  while (us != 0) {
	_delay_us(10);
    us--;
  66:	61 50       	subi	r22, 0x01	; 1
  68:	70 40       	sbci	r23, 0x00	; 0
  6a:	80 40       	sbci	r24, 0x00	; 0
  6c:	90 40       	sbci	r25, 0x00	; 0

void delay_ten_us(unsigned long int us) 
{
	us /= 8;

  while (us != 0) {
  6e:	61 15       	cp	r22, r1
  70:	71 05       	cpc	r23, r1
  72:	81 05       	cpc	r24, r1
  74:	91 05       	cpc	r25, r1
  76:	a1 f7       	brne	.-24     	; 0x60 <delay_ten_us+0x12>
	_delay_us(10);
    us--;
  }
}
  78:	08 95       	ret

0000007a <InitRC>:



static void InitRC()
{
	PORTD = 0b00111111;
  7a:	8f e3       	ldi	r24, 0x3F	; 63
  7c:	82 bb       	out	0x12, r24	; 18
	//PORTD &= ( _BV( PD0 ) | _BV( PD1 ) ); //PD0 and PD1 should be 1
	PORTD |= ( _BV( PD5 ) | _BV( PD4 ) | _BV( PD3 ) | _BV( PD2 ) ); // PD5, PD4, PD3, PD2 = 1 turns all rows off
  7e:	82 b3       	in	r24, 0x12	; 18
  80:	8c 63       	ori	r24, 0x3C	; 60
  82:	82 bb       	out	0x12, r24	; 18
	PORTB &= ( _BV( PB5 ) | _BV( PB6 ) | _BV ( PB7) ) ;	
  84:	88 b3       	in	r24, 0x18	; 24
  86:	80 7e       	andi	r24, 0xE0	; 224
  88:	88 bb       	out	0x18, r24	; 24
	PORTA |= ( _BV(PA0) | _BV(PA1) );
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8b bb       	out	0x1b, r24	; 27
	}
  90:	08 95       	ret

00000092 <RowByte>:

static void RowByte( unsigned char row )
{
  92:	48 2f       	mov	r20, r24
	if (GET_BIT(row,5)==GET_BIT(PORTD,PD5)) SWITCH_BIT(PORTD,PD5);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	24 2f       	mov	r18, r20
  98:	22 95       	swap	r18
  9a:	26 95       	lsr	r18
  9c:	27 70       	andi	r18, 0x07	; 7
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	82 95       	swap	r24
  a2:	86 95       	lsr	r24
  a4:	87 70       	andi	r24, 0x07	; 7
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	28 27       	eor	r18, r24
  aa:	39 27       	eor	r19, r25
  ac:	20 fd       	sbrc	r18, 0
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <RowByte+0x26>
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	90 e2       	ldi	r25, 0x20	; 32
  b4:	89 27       	eor	r24, r25
  b6:	82 bb       	out	0x12, r24	; 18
	if (GET_BIT(row,4)==GET_BIT(PORTD,PD4)) SWITCH_BIT(PORTD,PD4);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	24 2f       	mov	r18, r20
  bc:	22 95       	swap	r18
  be:	2f 70       	andi	r18, 0x0F	; 15
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	28 27       	eor	r18, r24
  ca:	39 27       	eor	r19, r25
  cc:	20 fd       	sbrc	r18, 0
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <RowByte+0x46>
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	90 e1       	ldi	r25, 0x10	; 16
  d4:	89 27       	eor	r24, r25
  d6:	82 bb       	out	0x12, r24	; 18
	if (GET_BIT(row,3)==GET_BIT(PORTD,PD3)) SWITCH_BIT(PORTD,PD3);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	24 2f       	mov	r18, r20
  dc:	26 95       	lsr	r18
  de:	26 95       	lsr	r18
  e0:	26 95       	lsr	r18
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 27       	eor	r18, r24
  ee:	39 27       	eor	r19, r25
  f0:	20 fd       	sbrc	r18, 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__stack+0x1d>
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	98 e0       	ldi	r25, 0x08	; 8
  f8:	89 27       	eor	r24, r25
  fa:	82 bb       	out	0x12, r24	; 18
	if (GET_BIT(row,2)==GET_BIT(PORTD,PD2)) SWITCH_BIT(PORTD,PD2);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	24 2f       	mov	r18, r20
 100:	26 95       	lsr	r18
 102:	26 95       	lsr	r18
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	28 27       	eor	r18, r24
 10e:	39 27       	eor	r19, r25
 110:	20 fd       	sbrc	r18, 0
 112:	04 c0       	rjmp	.+8      	; 0x11c <__stack+0x3d>
 114:	82 b3       	in	r24, 0x12	; 18
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	89 27       	eor	r24, r25
 11a:	82 bb       	out	0x12, r24	; 18
	if (GET_BIT(row,1)==GET_BIT(PORTA,PA0)) SWITCH_BIT(PORTA,PA0);
 11c:	2b b3       	in	r18, 0x1b	; 27
 11e:	84 2f       	mov	r24, r20
 120:	86 95       	lsr	r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	82 27       	eor	r24, r18
 128:	93 27       	eor	r25, r19
 12a:	80 fd       	sbrc	r24, 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__stack+0x57>
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	89 27       	eor	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
	if (GET_BIT(row,0)==GET_BIT(PORTA,PA1)) SWITCH_BIT(PORTA,PA1);
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	24 2f       	mov	r18, r20
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	86 95       	lsr	r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	28 27       	eor	r18, r24
 142:	39 27       	eor	r19, r25
 144:	20 fd       	sbrc	r18, 0
 146:	04 c0       	rjmp	.+8      	; 0x150 <__stack+0x71>
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	89 27       	eor	r24, r25
 14e:	8b bb       	out	0x1b, r24	; 27
 150:	08 95       	ret

00000152 <ColON>:
		}
}

static void ColON( unsigned char column )
{
	switch( column ) {
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	91 f0       	breq	.+36     	; 0x17a <ColON+0x28>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	28 f4       	brcc	.+10     	; 0x164 <ColON+0x12>
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <ColON+0x20>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	99 f4       	brne	.+38     	; 0x188 <ColON+0x36>
 162:	09 c0       	rjmp	.+18     	; 0x176 <ColON+0x24>
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	69 f0       	breq	.+26     	; 0x182 <ColON+0x30>
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	48 f0       	brcs	.+18     	; 0x17e <ColON+0x2c>
 16c:	85 30       	cpi	r24, 0x05	; 5
 16e:	61 f4       	brne	.+24     	; 0x188 <ColON+0x36>
 170:	0a c0       	rjmp	.+20     	; 0x186 <ColON+0x34>
		case 0:
			SET_BIT(PORTD, PD6);
 172:	96 9a       	sbi	0x12, 6	; 18
 174:	08 95       	ret
			break;
		case 1:
			SET_BIT(PORTB, PB0);
 176:	c0 9a       	sbi	0x18, 0	; 24
 178:	08 95       	ret
			break;
		case 2:
			SET_BIT(PORTB, PB1);
 17a:	c1 9a       	sbi	0x18, 1	; 24
 17c:	08 95       	ret
			break;
		case 3:
			SET_BIT(PORTB, PB2);
 17e:	c2 9a       	sbi	0x18, 2	; 24
 180:	08 95       	ret
			break;
		case 4:
			SET_BIT(PORTB, PB3);
 182:	c3 9a       	sbi	0x18, 3	; 24
 184:	08 95       	ret
			break;
		case 5:
			SET_BIT(PORTB, PB4);
 186:	c4 9a       	sbi	0x18, 4	; 24
 188:	08 95       	ret

0000018a <main>:
	RowByte(fuckyou[frame+5]);
	delay_ten_us(delayon);
}

int main(void)
{
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	unsigned int X, frame;
	R=0b11111100;
	X=0;
	C=0;
	frame=0;
	DDRA   = _BV( 0 ) | _BV( 1 );
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	8a bb       	out	0x1a, r24	; 26
	DDRB   =  (_BV(0) | _BV(1) |_BV(2) |_BV(3) |_BV(4) |_BV(5) );
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	87 bb       	out	0x17, r24	; 23
	DDRD   = _BV( 6) |_BV( 5 ) | _BV( 4 ) |_BV( 3 ) |_BV( 2 );
 19e:	8c e7       	ldi	r24, 0x7C	; 124
 1a0:	81 bb       	out	0x11, r24	; 17
 1a2:	ee 24       	eor	r14, r14
 1a4:	ff 24       	eor	r15, r15
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0

	while( 1 ) 
	{
	X++;
 1aa:	08 94       	sec
 1ac:	e1 1c       	adc	r14, r1
 1ae:	f1 1c       	adc	r15, r1
	if (X>75) {frame++; X=0;}
 1b0:	8c e4       	ldi	r24, 0x4C	; 76
 1b2:	e8 16       	cp	r14, r24
 1b4:	f1 04       	cpc	r15, r1
 1b6:	18 f0       	brcs	.+6      	; 0x1be <main+0x34>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	ee 24       	eor	r14, r14
 1bc:	ff 24       	eor	r15, r15
	if (frame>35) frame=0;
 1be:	c4 32       	cpi	r28, 0x24	; 36
 1c0:	d1 05       	cpc	r29, r1
 1c2:	10 f0       	brcs	.+4      	; 0x1c8 <main+0x3e>
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
		}
}

static void drawframe( unsigned int frame , unsigned int delayon, unsigned int delayoff )
{
	InitRC();
 1c8:	58 df       	rcall	.-336    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	3d df       	rcall	.-390    	; 0x4e <delay_ten_us>
	ColON(5);
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	bd df       	rcall	.-134    	; 0x152 <ColON>
	RowByte(fuckyou[frame]);
 1d8:	8e 01       	movw	r16, r28
 1da:	00 5a       	subi	r16, 0xA0	; 160
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	f8 01       	movw	r30, r16
 1e0:	80 81       	ld	r24, Z
 1e2:	57 df       	rcall	.-338    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	30 df       	rcall	.-416    	; 0x4e <delay_ten_us>
	InitRC();
 1ee:	45 df       	rcall	.-374    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2a df       	rcall	.-428    	; 0x4e <delay_ten_us>
	ColON(4);
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	aa df       	rcall	.-172    	; 0x152 <ColON>
	RowByte(fuckyou[frame+1]);
 1fe:	f8 01       	movw	r30, r16
 200:	81 81       	ldd	r24, Z+1	; 0x01
 202:	47 df       	rcall	.-370    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 204:	6a e0       	ldi	r22, 0x0A	; 10
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	20 df       	rcall	.-448    	; 0x4e <delay_ten_us>
	InitRC();
 20e:	35 df       	rcall	.-406    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	1a df       	rcall	.-460    	; 0x4e <delay_ten_us>
	ColON(3);
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	9a df       	rcall	.-204    	; 0x152 <ColON>
	RowByte(fuckyou[frame+2]);
 21e:	f8 01       	movw	r30, r16
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	37 df       	rcall	.-402    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 224:	6a e0       	ldi	r22, 0x0A	; 10
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	10 df       	rcall	.-480    	; 0x4e <delay_ten_us>
	InitRC();
 22e:	25 df       	rcall	.-438    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0a df       	rcall	.-492    	; 0x4e <delay_ten_us>
	ColON(2);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	8a df       	rcall	.-236    	; 0x152 <ColON>
	RowByte(fuckyou[frame+3]);
 23e:	f8 01       	movw	r30, r16
 240:	83 81       	ldd	r24, Z+3	; 0x03
 242:	27 df       	rcall	.-434    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	00 df       	rcall	.-512    	; 0x4e <delay_ten_us>
	InitRC();
 24e:	15 df       	rcall	.-470    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fa de       	rcall	.-524    	; 0x4e <delay_ten_us>
	ColON(1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	7a df       	rcall	.-268    	; 0x152 <ColON>
	RowByte(fuckyou[frame+4]);
 25e:	f8 01       	movw	r30, r16
 260:	84 81       	ldd	r24, Z+4	; 0x04
 262:	17 df       	rcall	.-466    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 264:	6a e0       	ldi	r22, 0x0A	; 10
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	f0 de       	rcall	.-544    	; 0x4e <delay_ten_us>
	InitRC();
 26e:	05 df       	rcall	.-502    	; 0x7a <InitRC>
	delay_ten_us(delayoff);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	ea de       	rcall	.-556    	; 0x4e <delay_ten_us>
	ColON(0);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	6a df       	rcall	.-300    	; 0x152 <ColON>
	RowByte(fuckyou[frame+5]);
 27e:	f8 01       	movw	r30, r16
 280:	85 81       	ldd	r24, Z+5	; 0x05
 282:	07 df       	rcall	.-498    	; 0x92 <RowByte>
	delay_ten_us(delayon);
 284:	6a e0       	ldi	r22, 0x0A	; 10
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	e0 de       	rcall	.-576    	; 0x4e <delay_ten_us>
 28e:	8d cf       	rjmp	.-230    	; 0x1aa <main+0x20>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
